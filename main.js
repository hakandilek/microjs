!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e,n){"use strict";function r(t){return t&&0===t.length}function i(t){return null==t?[]:Object.keys(t)}function o(t){for(var e=[],n=Object.keys(t),r=0;r<n.length;r++)e.push(t[n[r]]);return e}function a(t,e){for(var n=[],r=i(t),o=0;o<r.length;o++){var a=r[o];n.push(e.call(null,t[a],a))}return n}function u(t,e){for(var n=[],r=0;r<t.length;r++)n.push(e.call(null,t[r],r));return n}function c(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];Array.isArray(r)?e=e.concat(c(r)):e.push(r)}return e}function s(t){return r(t)?void 0:t[0]}function f(t){var e=t&&t.length;return e?t[e-1]:void 0}function l(t,e){if(Array.isArray(t))for(var n=0;n<t.length;n++)e.call(null,t[n],n);else{if(!j(t))throw Error("non exhaustive match");var r=i(t);for(n=0;n<r.length;n++){var o=r[n],a=t[o];e.call(null,a,o)}}}function h(t){return"string"==typeof t}function p(t){return void 0===t}function d(t){return t instanceof Function}function v(t,e){return void 0===e&&(e=1),t.slice(e,t.length)}function y(t,e){return void 0===e&&(e=1),t.slice(0,t.length-e)}function g(t,e){var n=[];if(Array.isArray(t))for(var r=0;r<t.length;r++){var i=t[r];e.call(null,i)&&n.push(i)}return n}function m(t,e){return g(t,(function(t){return!e(t)}))}function _(t,e){for(var n=Object.keys(t),r={},i=0;i<n.length;i++){var o=n[i],a=t[o];e(a)&&(r[o]=a)}return r}function O(t,e){return!!j(t)&&t.hasOwnProperty(e)}function E(t,e){return void 0!==A(t,(function(t){return t===e}))}function T(t){for(var e=[],n=0;n<t.length;n++)e.push(t[n]);return e}function b(t){var e={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function A(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(e.call(null,r))return r}}function I(t,e){for(var n=[],r=0;r<t.length;r++){var i=t[r];e.call(null,i)&&n.push(i)}return n}function R(t,e,n){for(var r=Array.isArray(t),a=r?t:o(t),u=r?[]:i(t),c=n,s=0;s<a.length;s++)c=e.call(null,c,a[s],r?s:u[s]);return c}function N(t){return m(t,(function(t){return null==t}))}function S(t,e){void 0===e&&(e=function(t){return t});var n=[];return R(t,(function(t,r){var i=e(r);return E(n,i)?t:(n.push(i),t.concat(r))}),[])}function k(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=[null],i=r.concat(e);return Function.bind.apply(t,i)}function x(t){return Array.isArray(t)}function L(t){return t instanceof RegExp}function j(t){return t instanceof Object}function C(t,e){for(var n=0;n<t.length;n++)if(!e(t[n],n))return!1;return!0}function w(t,e){return m(t,(function(t){return E(e,t)}))}function P(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return!0;return!1}function M(t,e){for(var n=0;n<t.length;n++)if(t[n]===e)return n;return-1}function U(t,e){var n=T(t);return n.sort((function(t,n){return e(t)-e(n)})),n}function F(t,e){if(t.length!==e.length)throw Error("can't zipObject with different number of keys and values!");for(var n={},r=0;r<t.length;r++)n[t[r]]=e[r];return n}function D(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r=0;r<e.length;r++)for(var o=e[r],a=i(o),u=0;u<a.length;u++){var c=a[u];t[c]=o[c]}return t}function B(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r=0;r<e.length;r++)for(var o=e[r],a=i(o),u=0;u<a.length;u++){var c=a[u];O(t,c)||(t[c]=o[c])}return t}function W(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return B.apply(null,[{}].concat(t))}function G(t,e){var n={};return l(t,(function(t){var r=e(t),i=n[r];i?i.push(t):n[r]=[t]})),n}function K(t,e){for(var n=b(t),r=i(e),o=0;o<r.length;o++){var a=r[o],u=e[a];n[a]=u}return n}function z(){}function V(t){return t}function H(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];e.push(void 0!==r?r:void 0)}return e}function Y(t){console&&console.error&&console.error("Error: "+t)}function $(t){console&&console.warn&&console.warn("Warning: "+t)}function q(){return"function"==typeof Map}function X(t,e){e.forEach((function(e){var n=e.prototype;Object.getOwnPropertyNames(n).forEach((function(r){if("constructor"!==r){var i=Object.getOwnPropertyDescriptor(n,r);i&&(i.get||i.set)?Object.defineProperty(t.prototype,r,i):t.prototype[r]=e.prototype[r]}}))}))}function Z(t){function e(){}e.prototype=t;var n=new e;function r(){return typeof n.bar}return r(),r(),t}function J(t){return t[t.length-1]}function Q(t){var e=(new Date).getTime(),n=t();return{time:(new Date).getTime()-e,value:n}}n.d(e,"A",(function(){return r})),n.d(e,"G",(function(){return i})),n.d(e,"U",(function(){return o})),n.d(e,"J",(function(){return a})),n.d(e,"I",(function(){return u})),n.d(e,"t",(function(){return c})),n.d(e,"s",(function(){return s})),n.d(e,"H",(function(){return f})),n.d(e,"u",(function(){return l})),n.d(e,"E",(function(){return h})),n.d(e,"F",(function(){return p})),n.d(e,"B",(function(){return d})),n.d(e,"m",(function(){return v})),n.d(e,"n",(function(){return y})),n.d(e,"p",(function(){return g})),n.d(e,"P",(function(){return m})),n.d(e,"N",(function(){return _})),n.d(e,"w",(function(){return O})),n.d(e,"j",(function(){return E})),n.d(e,"g",(function(){return T})),n.d(e,"h",(function(){return b})),n.d(e,"q",(function(){return A})),n.d(e,"r",(function(){return I})),n.d(e,"O",(function(){return R})),n.d(e,"i",(function(){return N})),n.d(e,"T",(function(){return S})),n.d(e,"y",(function(){return x})),n.d(e,"D",(function(){return L})),n.d(e,"C",(function(){return j})),n.d(e,"o",(function(){return C})),n.d(e,"l",(function(){return w})),n.d(e,"Q",(function(){return P})),n.d(e,"x",(function(){return M})),n.d(e,"f",(function(){return D})),n.d(e,"k",(function(){return W})),n.d(e,"v",(function(){return G})),n.d(e,"K",(function(){return K})),n.d(e,"b",(function(){return z})),n.d(e,"a",(function(){return V})),n.d(e,"L",(function(){return H})),n.d(e,"c",(function(){return Y})),n.d(e,"d",(function(){return $})),n.d(e,"z",(function(){return q})),n.d(e,"e",(function(){return X})),n.d(e,"S",(function(){return Z})),n.d(e,"M",(function(){return J})),n.d(e,"R",(function(){return Q}))},function(t,e,n){var r,i,o;"undefined"!=typeof self&&self,i=[],void 0===(o="function"==typeof(r=function(){function t(){}t.prototype.saveState=function(){return{idx:this.idx,input:this.input,groupIdx:this.groupIdx}},t.prototype.restoreState=function(t){this.idx=t.idx,this.input=t.input,this.groupIdx=t.groupIdx},t.prototype.pattern=function(t){this.idx=0,this.input=t,this.groupIdx=0,this.consumeChar("/");var e=this.disjunction();this.consumeChar("/");for(var n={type:"Flags",loc:{begin:this.idx,end:t.length},global:!1,ignoreCase:!1,multiLine:!1,unicode:!1,sticky:!1};this.isRegExpFlag();)switch(this.popChar()){case"g":u(n,"global");break;case"i":u(n,"ignoreCase");break;case"m":u(n,"multiLine");break;case"u":u(n,"unicode");break;case"y":u(n,"sticky")}if(this.idx!==this.input.length)throw Error("Redundant input: "+this.input.substring(this.idx));return{type:"Pattern",flags:n,value:e,loc:this.loc(0)}},t.prototype.disjunction=function(){var t=[],e=this.idx;for(t.push(this.alternative());"|"===this.peekChar();)this.consumeChar("|"),t.push(this.alternative());return{type:"Disjunction",value:t,loc:this.loc(e)}},t.prototype.alternative=function(){for(var t=[],e=this.idx;this.isTerm();)t.push(this.term());return{type:"Alternative",value:t,loc:this.loc(e)}},t.prototype.term=function(){return this.isAssertion()?this.assertion():this.atom()},t.prototype.assertion=function(){var t=this.idx;switch(this.popChar()){case"^":return{type:"StartAnchor",loc:this.loc(t)};case"$":return{type:"EndAnchor",loc:this.loc(t)};case"\\":switch(this.popChar()){case"b":return{type:"WordBoundary",loc:this.loc(t)};case"B":return{type:"NonWordBoundary",loc:this.loc(t)}}throw Error("Invalid Assertion Escape");case"(":var e;switch(this.consumeChar("?"),this.popChar()){case"=":e="Lookahead";break;case"!":e="NegativeLookahead"}c(e);var n=this.disjunction();return this.consumeChar(")"),{type:e,value:n,loc:this.loc(t)}}!function(){throw Error("Internal Error - Should never get here!")}()},t.prototype.quantifier=function(t){var e,n=this.idx;switch(this.popChar()){case"*":e={atLeast:0,atMost:1/0};break;case"+":e={atLeast:1,atMost:1/0};break;case"?":e={atLeast:0,atMost:1};break;case"{":var r=this.integerIncludingZero();switch(this.popChar()){case"}":e={atLeast:r,atMost:r};break;case",":e=this.isDigit()?{atLeast:r,atMost:this.integerIncludingZero()}:{atLeast:r,atMost:1/0},this.consumeChar("}")}if(!0===t&&void 0===e)return;c(e)}if(!0!==t||void 0!==e)return c(e),"?"===this.peekChar(0)?(this.consumeChar("?"),e.greedy=!1):e.greedy=!0,e.type="Quantifier",e.loc=this.loc(n),e},t.prototype.atom=function(){var t,e=this.idx;switch(this.peekChar()){case".":t=this.dotAll();break;case"\\":t=this.atomEscape();break;case"[":t=this.characterClass();break;case"(":t=this.group()}return void 0===t&&this.isPatternCharacter()&&(t=this.patternCharacter()),c(t),t.loc=this.loc(e),this.isQuantifier()&&(t.quantifier=this.quantifier()),t},t.prototype.dotAll=function(){return this.consumeChar("."),{type:"Set",complement:!0,value:[o("\n"),o("\r"),o("\u2028"),o("\u2029")]}},t.prototype.atomEscape=function(){switch(this.consumeChar("\\"),this.peekChar()){case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return this.decimalEscapeAtom();case"d":case"D":case"s":case"S":case"w":case"W":return this.characterClassEscape();case"f":case"n":case"r":case"t":case"v":return this.controlEscapeAtom();case"c":return this.controlLetterEscapeAtom();case"0":return this.nulCharacterAtom();case"x":return this.hexEscapeSequenceAtom();case"u":return this.regExpUnicodeEscapeSequenceAtom();default:return this.identityEscapeAtom()}},t.prototype.decimalEscapeAtom=function(){return{type:"GroupBackReference",value:this.positiveInteger()}},t.prototype.characterClassEscape=function(){var t,e=!1;switch(this.popChar()){case"d":t=s;break;case"D":t=s,e=!0;break;case"s":t=l;break;case"S":t=l,e=!0;break;case"w":t=f;break;case"W":t=f,e=!0}return c(t),{type:"Set",value:t,complement:e}},t.prototype.controlEscapeAtom=function(){var t;switch(this.popChar()){case"f":t=o("\f");break;case"n":t=o("\n");break;case"r":t=o("\r");break;case"t":t=o("\t");break;case"v":t=o("\v")}return c(t),{type:"Character",value:t}},t.prototype.controlLetterEscapeAtom=function(){this.consumeChar("c");var t=this.popChar();if(!1===/[a-zA-Z]/.test(t))throw Error("Invalid ");return{type:"Character",value:t.toUpperCase().charCodeAt(0)-64}},t.prototype.nulCharacterAtom=function(){return this.consumeChar("0"),{type:"Character",value:o("\0")}},t.prototype.hexEscapeSequenceAtom=function(){return this.consumeChar("x"),this.parseHexDigits(2)},t.prototype.regExpUnicodeEscapeSequenceAtom=function(){return this.consumeChar("u"),this.parseHexDigits(4)},t.prototype.identityEscapeAtom=function(){return{type:"Character",value:o(this.popChar())}},t.prototype.classPatternCharacterAtom=function(){switch(this.peekChar()){case"\n":case"\r":case"\u2028":case"\u2029":case"\\":case"]":throw Error("TBD");default:return{type:"Character",value:o(this.popChar())}}},t.prototype.characterClass=function(){var t=[],e=!1;for(this.consumeChar("["),"^"===this.peekChar(0)&&(this.consumeChar("^"),e=!0);this.isClassAtom();){var n=this.classAtom();if("Character"===n.type&&this.isRangeDash()){this.consumeChar("-");var r=this.classAtom();if("Character"===r.type){if(r.value<n.value)throw Error("Range out of order in character class");t.push({from:n.value,to:r.value})}else a(n.value,t),t.push(o("-")),a(r.value,t)}else a(n.value,t)}return this.consumeChar("]"),{type:"Set",complement:e,value:t}},t.prototype.classAtom=function(){switch(this.peekChar()){case"]":case"\n":case"\r":case"\u2028":case"\u2029":throw Error("TBD");case"\\":return this.classEscape();default:return this.classPatternCharacterAtom()}},t.prototype.classEscape=function(){switch(this.consumeChar("\\"),this.peekChar()){case"b":return this.consumeChar("b"),{type:"Character",value:o("\b")};case"d":case"D":case"s":case"S":case"w":case"W":return this.characterClassEscape();case"f":case"n":case"r":case"t":case"v":return this.controlEscapeAtom();case"c":return this.controlLetterEscapeAtom();case"0":return this.nulCharacterAtom();case"x":return this.hexEscapeSequenceAtom();case"u":return this.regExpUnicodeEscapeSequenceAtom();default:return this.identityEscapeAtom()}},t.prototype.group=function(){var t=!0;switch(this.consumeChar("("),this.peekChar(0)){case"?":this.consumeChar("?"),this.consumeChar(":"),t=!1;break;default:this.groupIdx++}var e=this.disjunction();this.consumeChar(")");var n={type:"Group",capturing:t,value:e};return t&&(n.idx=this.groupIdx),n},t.prototype.positiveInteger=function(){var t=this.popChar();if(!1===i.test(t))throw Error("Expecting a positive integer");for(;r.test(this.peekChar(0));)t+=this.popChar();return parseInt(t,10)},t.prototype.integerIncludingZero=function(){var t=this.popChar();if(!1===r.test(t))throw Error("Expecting an integer");for(;r.test(this.peekChar(0));)t+=this.popChar();return parseInt(t,10)},t.prototype.patternCharacter=function(){var t=this.popChar();switch(t){case"\n":case"\r":case"\u2028":case"\u2029":case"^":case"$":case"\\":case".":case"*":case"+":case"?":case"(":case")":case"[":case"|":throw Error("TBD");default:return{type:"Character",value:o(t)}}},t.prototype.isRegExpFlag=function(){switch(this.peekChar(0)){case"g":case"i":case"m":case"u":case"y":return!0;default:return!1}},t.prototype.isRangeDash=function(){return"-"===this.peekChar()&&this.isClassAtom(1)},t.prototype.isDigit=function(){return r.test(this.peekChar(0))},t.prototype.isClassAtom=function(t){switch(void 0===t&&(t=0),this.peekChar(t)){case"]":case"\n":case"\r":case"\u2028":case"\u2029":return!1;default:return!0}},t.prototype.isTerm=function(){return this.isAtom()||this.isAssertion()},t.prototype.isAtom=function(){if(this.isPatternCharacter())return!0;switch(this.peekChar(0)){case".":case"\\":case"[":case"(":return!0;default:return!1}},t.prototype.isAssertion=function(){switch(this.peekChar(0)){case"^":case"$":return!0;case"\\":switch(this.peekChar(1)){case"b":case"B":return!0;default:return!1}case"(":return"?"===this.peekChar(1)&&("="===this.peekChar(2)||"!"===this.peekChar(2));default:return!1}},t.prototype.isQuantifier=function(){var t=this.saveState();try{return void 0!==this.quantifier(!0)}catch(t){return!1}finally{this.restoreState(t)}},t.prototype.isPatternCharacter=function(){switch(this.peekChar()){case"^":case"$":case"\\":case".":case"*":case"+":case"?":case"(":case")":case"[":case"|":case"/":case"\n":case"\r":case"\u2028":case"\u2029":return!1;default:return!0}},t.prototype.parseHexDigits=function(t){for(var e="",r=0;r<t;r++){var i=this.popChar();if(!1===n.test(i))throw Error("Expecting a HexDecimal digits");e+=i}return{type:"Character",value:parseInt(e,16)}},t.prototype.peekChar=function(t){return void 0===t&&(t=0),this.input[this.idx+t]},t.prototype.popChar=function(){var t=this.peekChar(0);return this.consumeChar(),t},t.prototype.consumeChar=function(t){if(void 0!==t&&this.input[this.idx]!==t)throw Error("Expected: '"+t+"' but found: '"+this.input[this.idx]+"' at offset: "+this.idx);if(this.idx>=this.input.length)throw Error("Unexpected end of input");this.idx++},t.prototype.loc=function(t){return{begin:t,end:this.idx}};var e,n=/[0-9a-fA-F]/,r=/[0-9]/,i=/[1-9]/;function o(t){return t.charCodeAt(0)}function a(t,e){void 0!==t.length?t.forEach((function(t){e.push(t)})):e.push(t)}function u(t,e){if(!0===t[e])throw"duplicate flag "+e;t[e]=!0}function c(t){if(void 0===t)throw Error("Internal Error - Should never get here!")}var s=[];for(e=o("0");e<=o("9");e++)s.push(e);var f=[o("_")].concat(s);for(e=o("a");e<=o("z");e++)f.push(e);for(e=o("A");e<=o("Z");e++)f.push(e);var l=[o(" "),o("\f"),o("\n"),o("\r"),o("\t"),o("\v"),o("\t"),o(" "),o(" "),o(" "),o(" "),o(" "),o(" "),o(" "),o(" "),o(" "),o(" "),o(" "),o(" "),o(" "),o("\u2028"),o("\u2029"),o(" "),o(" "),o("　"),o("\ufeff")];function h(){}return h.prototype.visitChildren=function(t){for(var e in t){var n=t[e];t.hasOwnProperty(e)&&(void 0!==n.type?this.visit(n):Array.isArray(n)&&n.forEach((function(t){this.visit(t)}),this))}},h.prototype.visit=function(t){switch(t.type){case"Pattern":this.visitPattern(t);break;case"Flags":this.visitFlags(t);break;case"Disjunction":this.visitDisjunction(t);break;case"Alternative":this.visitAlternative(t);break;case"StartAnchor":this.visitStartAnchor(t);break;case"EndAnchor":this.visitEndAnchor(t);break;case"WordBoundary":this.visitWordBoundary(t);break;case"NonWordBoundary":this.visitNonWordBoundary(t);break;case"Lookahead":this.visitLookahead(t);break;case"NegativeLookahead":this.visitNegativeLookahead(t);break;case"Character":this.visitCharacter(t);break;case"Set":this.visitSet(t);break;case"Group":this.visitGroup(t);break;case"GroupBackReference":this.visitGroupBackReference(t);break;case"Quantifier":this.visitQuantifier(t)}this.visitChildren(t)},h.prototype.visitPattern=function(t){},h.prototype.visitFlags=function(t){},h.prototype.visitDisjunction=function(t){},h.prototype.visitAlternative=function(t){},h.prototype.visitStartAnchor=function(t){},h.prototype.visitEndAnchor=function(t){},h.prototype.visitWordBoundary=function(t){},h.prototype.visitNonWordBoundary=function(t){},h.prototype.visitLookahead=function(t){},h.prototype.visitNegativeLookahead=function(t){},h.prototype.visitCharacter=function(t){},h.prototype.visitSet=function(t){},h.prototype.visitGroup=function(t){},h.prototype.visitGroupBackReference=function(t){},h.prototype.visitQuantifier=function(t){},{RegExpParser:t,BaseRegExpVisitor:h,VERSION:"0.5.0"}})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){"use strict";n.r(e),n.d(e,"VERSION",(function(){return r})),n.d(e,"CstParser",(function(){return rn})),n.d(e,"EmbeddedActionsParser",(function(){return on})),n.d(e,"ParserDefinitionErrorType",(function(){return Je})),n.d(e,"EMPTY_ALT",(function(){return en})),n.d(e,"Lexer",(function(){return $})),n.d(e,"LexerDefinitionErrorType",(function(){return V})),n.d(e,"createToken",(function(){return J})),n.d(e,"createTokenInstance",(function(){return tt})),n.d(e,"EOF",(function(){return Q})),n.d(e,"tokenLabel",(function(){return q})),n.d(e,"tokenMatcher",(function(){return et})),n.d(e,"tokenName",(function(){return X})),n.d(e,"defaultGrammarResolverErrorProvider",(function(){return kt})),n.d(e,"defaultGrammarValidatorErrorProvider",(function(){return xt})),n.d(e,"defaultParserErrorProvider",(function(){return St})),n.d(e,"EarlyExitException",(function(){return ge})),n.d(e,"isRecognitionException",(function(){return pe})),n.d(e,"MismatchedTokenException",(function(){return de})),n.d(e,"NotAllInputParsedException",(function(){return ye})),n.d(e,"NoViableAltException",(function(){return ve})),n.d(e,"defaultLexerErrorProvider",(function(){return H})),n.d(e,"Alternation",(function(){return ht})),n.d(e,"Alternative",(function(){return at})),n.d(e,"NonTerminal",(function(){return it})),n.d(e,"Option",(function(){return ut})),n.d(e,"Repetition",(function(){return ft})),n.d(e,"RepetitionMandatory",(function(){return ct})),n.d(e,"RepetitionMandatoryWithSeparator",(function(){return st})),n.d(e,"RepetitionWithSeparator",(function(){return lt})),n.d(e,"Rule",(function(){return ot})),n.d(e,"Terminal",(function(){return pt})),n.d(e,"serializeGrammar",(function(){return dt})),n.d(e,"serializeProduction",(function(){return vt})),n.d(e,"GAstVisitor",(function(){return mt})),n.d(e,"assignOccurrenceIndices",(function(){return le})),n.d(e,"resolveGrammar",(function(){return se})),n.d(e,"validateGrammar",(function(){return fe})),n.d(e,"clearCache",(function(){return gn})),n.d(e,"createSyntaxDiagramsCode",(function(){return an})),n.d(e,"generateParserFactory",(function(){return vn})),n.d(e,"generateParserModule",(function(){return yn})),n.d(e,"Parser",(function(){return mn}));var r="7.0.1",i=n(0),o=n(1),a={},u=new o.RegExpParser;function c(t){var e=t.toString();if(a.hasOwnProperty(e))return a[e];var n=u.pattern(e);return a[e]=n,n}var s,f=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),l='Unable to use "first char" lexer optimizations:\n';function h(t,e){void 0===e&&(e=!1);try{var n=c(t);return function t(e,n,r){switch(e.type){case"Disjunction":for(var o=0;o<e.value.length;o++)t(e.value[o],n,r);break;case"Alternative":var a=e.value;for(o=0;o<a.length;o++){var u=a[o];switch(u.type){case"EndAnchor":case"GroupBackReference":case"Lookahead":case"NegativeLookahead":case"StartAnchor":case"WordBoundary":case"NonWordBoundary":continue}var c=u;switch(c.type){case"Character":p(c.value,n,r);break;case"Set":if(!0===c.complement)throw Error("Complement Sets are not supported for first char optimization");Object(i.u)(c.value,(function(t){if("number"==typeof t)p(t,n,r);else{var e=t;if(!0===r)for(var i=e.from;i<=e.to;i++)p(i,n,r);else{for(i=e.from;i<=e.to&&i<w;i++)p(i,n,r);if(e.to>=w)for(var o=e.from>=w?e.from:w,a=e.to,u=P(o),c=P(a),s=u;s<=c;s++)n[s]=s}}}));break;case"Group":t(c.value,n,r);break;default:throw Error("Non Exhaustive Match")}var s=void 0!==c.quantifier&&0===c.quantifier.atLeast;if("Group"===c.type&&!1===v(c)||"Group"!==c.type&&!1===s)break}break;default:throw Error("non exhaustive match!")}return Object(i.U)(n)}(n.value,{},n.flags.ignoreCase)}catch(n){if("Complement Sets are not supported for first char optimization"===n.message)e&&Object(i.d)(l+"\tUnable to optimize: < "+t.toString()+" >\n\tComplement Sets cannot be automatically optimized.\n\tThis will disable the lexer's first char optimizations.\n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.");else{var r="";e&&(r="\n\tThis will disable the lexer's first char optimizations.\n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details."),Object(i.c)(l+"\n\tFailed parsing: < "+t.toString()+" >\n\tUsing the regexp-to-ast library version: "+o.VERSION+"\n\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues"+r)}}return[]}function p(t,e,n){var r=P(t);e[r]=r,!0===n&&function(t,e){var n=String.fromCharCode(t),r=n.toUpperCase();if(r!==n){var i=P(r.charCodeAt(0));e[i]=i}else{var o=n.toLowerCase();if(o!==n){i=P(o.charCodeAt(0));e[i]=i}}}(t,e)}function d(t,e){return Object(i.q)(t.value,(function(t){if("number"==typeof t)return Object(i.j)(e,t);var n=t;return void 0!==Object(i.q)(e,(function(t){return n.from<=t&&t<=n.to}))}))}function v(t){return!(!t.quantifier||0!==t.quantifier.atLeast)||!!t.value&&(Object(i.y)(t.value)?Object(i.o)(t.value,v):v(t.value))}var y=function(t){function e(e){var n=t.call(this)||this;return n.targetCharCodes=e,n.found=!1,n}return f(e,t),e.prototype.visitChildren=function(e){if(!0!==this.found){switch(e.type){case"Lookahead":return void this.visitLookahead(e);case"NegativeLookahead":return void this.visitNegativeLookahead(e)}t.prototype.visitChildren.call(this,e)}},e.prototype.visitCharacter=function(t){Object(i.j)(this.targetCharCodes,t.value)&&(this.found=!0)},e.prototype.visitSet=function(t){t.complement?void 0===d(t,this.targetCharCodes)&&(this.found=!0):void 0!==d(t,this.targetCharCodes)&&(this.found=!0)},e}(o.BaseRegExpVisitor);function g(t,e){if(e instanceof RegExp){var n=c(e),r=new y(t);return r.visit(n),r.found}return void 0!==Object(i.q)(e,(function(e){return Object(i.j)(t,e.charCodeAt(0))}))}var m=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_="PATTERN",O="boolean"==typeof new RegExp("(?:)").sticky;function E(t,e){var n,r=(e=Object(i.k)(e,{useSticky:O,debug:!1,safeMode:!1,positionTracking:"full",lineTerminatorCharacters:["\r","\n"],tracer:function(t,e){return e()}})).tracer;r("initCharCodeToOptimizedIndexMap",(function(){!function(){if(Object(i.A)(M)){M=new Array(65536);for(var t=0;t<65536;t++)M[t]=t>255?255+~~(t/255):t}}()})),r("Reject Lexer.NA",(function(){n=Object(i.P)(t,(function(t){return t[_]===$.NA}))}));var o,a,u,c,s,f,p,d,v,y,m,E=!1;r("Transform Patterns",(function(){E=!1,o=Object(i.I)(n,(function(t){var n=t[_];if(Object(i.D)(n)){var r=n.source;return 1!==r.length||"^"===r||"$"===r||"."===r||n.ignoreCase?2!==r.length||"\\"!==r[0]||Object(i.j)(["d","D","s","S","t","r","n","t","0","c","b","B","f","v","w","W"],r[1])?e.useSticky?R(n):I(n):r[1]:r}if(Object(i.B)(n))return E=!0,{exec:n};if(Object(i.w)(n,"exec"))return E=!0,n;if("string"==typeof n){if(1===n.length)return n;var o=n.replace(/[\\^$.*+?()[\]{}|]/g,"\\$&"),a=new RegExp(o);return e.useSticky?R(a):I(a)}throw Error("non exhaustive match")}))})),r("misc mapping",(function(){a=Object(i.I)(n,(function(t){return t.tokenTypeIdx})),u=Object(i.I)(n,(function(t){var e=t.GROUP;if(e!==$.SKIPPED){if(Object(i.E)(e))return e;if(Object(i.F)(e))return!1;throw Error("non exhaustive match")}})),c=Object(i.I)(n,(function(t){var e=t.LONGER_ALT;if(e)return Object(i.x)(n,e)})),s=Object(i.I)(n,(function(t){return t.PUSH_MODE})),f=Object(i.I)(n,(function(t){return Object(i.w)(t,"POP_MODE")}))})),r("Line Terminator Handling",(function(){var t=j(e.lineTerminatorCharacters);p=Object(i.I)(n,(function(t){return!1})),"onlyOffset"!==e.positionTracking&&(p=Object(i.I)(n,(function(e){return Object(i.w)(e,"LINE_BREAKS")?e.LINE_BREAKS:!1===L(e,t)?g(t,e.PATTERN):void 0})))})),r("Misc Mapping #2",(function(){d=Object(i.I)(n,S),v=Object(i.I)(o,k),y=Object(i.O)(n,(function(t,e){var n=e.GROUP;return Object(i.E)(n)&&n!==$.SKIPPED&&(t[n]=[]),t}),{}),m=Object(i.I)(o,(function(t,e){return{pattern:o[e],longerAlt:c[e],canLineTerminator:p[e],isCustom:d[e],short:v[e],group:u[e],push:s[e],pop:f[e],tokenTypeIdx:a[e],tokenType:n[e]}}))}));var T=!0,b=[];return e.safeMode||r("First Char Optimization",(function(){b=Object(i.O)(n,(function(t,n,r){if("string"==typeof n.PATTERN){var o=P(n.PATTERN.charCodeAt(0));C(t,o,m[r])}else if(Object(i.y)(n.START_CHARS_HINT)){var a;Object(i.u)(n.START_CHARS_HINT,(function(e){var n=P("string"==typeof e?e.charCodeAt(0):e);a!==n&&(a=n,C(t,n,m[r]))}))}else if(Object(i.D)(n.PATTERN))if(n.PATTERN.unicode)T=!1,e.ensureOptimizations&&Object(i.c)(l+"\tUnable to analyze < "+n.PATTERN.toString()+" > pattern.\n\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\n\tThis will disable the lexer's first char optimizations.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE");else{var u=h(n.PATTERN,e.ensureOptimizations);Object(i.A)(u)&&(T=!1),Object(i.u)(u,(function(e){C(t,e,m[r])}))}else e.ensureOptimizations&&Object(i.c)(l+"\tTokenType: <"+n.name+"> is using a custom token pattern without providing <start_chars_hint> parameter.\n\tThis will disable the lexer's first char optimizations.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE"),T=!1;return t}),[])})),r("ArrayPacking",(function(){b=Object(i.L)(b)})),{emptyGroups:y,patternIdxToConfig:m,charCodeToPatternIdxToConfig:b,hasCustom:E,canBeOptimized:T}}function T(t,e){var n=[],r=function(t){var e=Object(i.p)(t,(function(t){return!Object(i.w)(t,_)})),n=Object(i.I)(e,(function(t){return{message:"Token Type: ->"+t.name+"<- missing static 'PATTERN' property",type:V.MISSING_PATTERN,tokenTypes:[t]}})),r=Object(i.l)(t,e);return{errors:n,valid:r}}(t);n=n.concat(r.errors);var a=function(t){var e=Object(i.p)(t,(function(t){var e=t[_];return!(Object(i.D)(e)||Object(i.B)(e)||Object(i.w)(e,"exec")||Object(i.E)(e))})),n=Object(i.I)(e,(function(t){return{message:"Token Type: ->"+t.name+"<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",type:V.INVALID_PATTERN,tokenTypes:[t]}})),r=Object(i.l)(t,e);return{errors:n,valid:r}}(r.valid),u=a.valid;return n=(n=(n=(n=(n=n.concat(a.errors)).concat(function(t){var e=[],n=Object(i.p)(t,(function(t){return Object(i.D)(t[_])}));return e=(e=(e=(e=(e=e.concat(function(t){var e=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.found=!1,e}return m(e,t),e.prototype.visitEndAnchor=function(t){this.found=!0},e}(o.BaseRegExpVisitor),n=Object(i.p)(t,(function(t){var n=t[_];try{var r=c(n),i=new e;return i.visit(r),i.found}catch(t){return b.test(n.source)}}));return Object(i.I)(n,(function(t){return{message:"Unexpected RegExp Anchor Error:\n\tToken Type: ->"+t.name+"<- static 'PATTERN' cannot contain end of input anchor '$'\n\tSee sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.",type:V.EOI_ANCHOR_FOUND,tokenTypes:[t]}}))}(n))).concat(function(t){var e=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.found=!1,e}return m(e,t),e.prototype.visitStartAnchor=function(t){this.found=!0},e}(o.BaseRegExpVisitor),n=Object(i.p)(t,(function(t){var n=t[_];try{var r=c(n),i=new e;return i.visit(r),i.found}catch(t){return A.test(n.source)}}));return Object(i.I)(n,(function(t){return{message:"Unexpected RegExp Anchor Error:\n\tToken Type: ->"+t.name+"<- static 'PATTERN' cannot contain start of input anchor '^'\n\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.",type:V.SOI_ANCHOR_FOUND,tokenTypes:[t]}}))}(n))).concat(function(t){var e=Object(i.p)(t,(function(t){var e=t[_];return e instanceof RegExp&&(e.multiline||e.global)}));return Object(i.I)(e,(function(t){return{message:"Token Type: ->"+t.name+"<- static 'PATTERN' may NOT contain global('g') or multiline('m')",type:V.UNSUPPORTED_FLAGS_FOUND,tokenTypes:[t]}}))}(n))).concat(function(t){var e=[],n=Object(i.I)(t,(function(n){return Object(i.O)(t,(function(t,r){return n.PATTERN.source!==r.PATTERN.source||Object(i.j)(e,r)||r.PATTERN===$.NA||(e.push(r),t.push(r)),t}),[])}));n=Object(i.i)(n);var r=Object(i.p)(n,(function(t){return t.length>1}));return Object(i.I)(r,(function(t){var e=Object(i.I)(t,(function(t){return t.name}));return{message:"The same RegExp pattern ->"+Object(i.s)(t).PATTERN+"<-has been used in all of the following Token Types: "+e.join(", ")+" <-",type:V.DUPLICATE_PATTERNS_FOUND,tokenTypes:t}}))}(n))).concat(function(t){var e=Object(i.p)(t,(function(t){return t[_].test("")}));return Object(i.I)(e,(function(t){return{message:"Token Type: ->"+t.name+"<- static 'PATTERN' must not match an empty string",type:V.EMPTY_MATCH_PATTERN,tokenTypes:[t]}}))}(n))}(u))).concat(function(t){var e=Object(i.p)(t,(function(t){if(!Object(i.w)(t,"GROUP"))return!1;var e=t.GROUP;return e!==$.SKIPPED&&e!==$.NA&&!Object(i.E)(e)}));return Object(i.I)(e,(function(t){return{message:"Token Type: ->"+t.name+"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",type:V.INVALID_GROUP_TYPE_FOUND,tokenTypes:[t]}}))}(u))).concat(function(t,e){var n=Object(i.p)(t,(function(t){return void 0!==t.PUSH_MODE&&!Object(i.j)(e,t.PUSH_MODE)}));return Object(i.I)(n,(function(t){return{message:"Token Type: ->"+t.name+"<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->"+t.PUSH_MODE+"<-which does not exist",type:V.PUSH_MODE_DOES_NOT_EXIST,tokenTypes:[t]}}))}(u,e))).concat(function(t){var e=[],n=Object(i.O)(t,(function(t,e,n){var r,o=e.PATTERN;return o===$.NA||(Object(i.E)(o)?t.push({str:o,idx:n,tokenType:e}):Object(i.D)(o)&&(r=o,void 0===Object(i.q)([".","\\","[","]","|","^","$","(",")","?","*","+","{"],(function(t){return-1!==r.source.indexOf(t)})))&&t.push({str:o.source,idx:n,tokenType:e})),t}),[]);return Object(i.u)(t,(function(t,r){Object(i.u)(n,(function(n){var o=n.str,a=n.idx,u=n.tokenType;if(r<a&&function(t,e){if(Object(i.D)(e)){var n=e.exec(t);return null!==n&&0===n.index}if(Object(i.B)(e))return e(t,0,[],{});if(Object(i.w)(e,"exec"))return e.exec(t,0,[],{});if("string"==typeof e)return e===t;throw Error("non exhaustive match")}(o,t.PATTERN)){var c="Token: ->"+u.name+"<- can never be matched.\nBecause it appears AFTER the Token Type ->"+t.name+"<-in the lexer's definition.\nSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNREACHABLE";e.push({message:c,type:V.UNREACHABLE_PATTERN,tokenTypes:[t,u]})}}))})),e}(u))}var b=/[^\\][\$]/;var A=/[^\\[][\^]|^\^/;function I(t){var e=t.ignoreCase?"i":"";return new RegExp("^(?:"+t.source+")",e)}function R(t){var e=t.ignoreCase?"iy":"y";return new RegExp(""+t.source,e)}function N(t,e,n){var r=[],o=!1,a=Object(i.i)(Object(i.t)(Object(i.J)(t.modes,(function(t){return t})))),u=Object(i.P)(a,(function(t){return t[_]===$.NA})),c=j(n);return e&&Object(i.u)(u,(function(t){var e=L(t,c);if(!1!==e){var n={message:function(t,e){if(e.issue===V.IDENTIFY_TERMINATOR)return"Warning: unable to identify line terminator usage in pattern.\n\tThe problem is in the <"+t.name+"> Token Type\n\t Root cause: "+e.errMsg+".\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR";if(e.issue===V.CUSTOM_LINE_BREAK)return"Warning: A Custom Token Pattern should specify the <line_breaks> option.\n\tThe problem is in the <"+t.name+"> Token Type\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK";throw Error("non exhaustive match")}(t,e),type:e.issue,tokenType:t};r.push(n)}else Object(i.w)(t,"LINE_BREAKS")?!0===t.LINE_BREAKS&&(o=!0):g(c,t.PATTERN)&&(o=!0)})),e&&!o&&r.push({message:"Warning: No LINE_BREAKS Found.\n\tThis Lexer has been defined to track line and column information,\n\tBut none of the Token Types can be identified as matching a line terminator.\n\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \n\tfor details.",type:V.NO_LINE_BREAKS_FLAGS}),r}function S(t){var e=t.PATTERN;if(Object(i.D)(e))return!1;if(Object(i.B)(e))return!0;if(Object(i.w)(e,"exec"))return!0;if(Object(i.E)(e))return!1;throw Error("non exhaustive match")}function k(t){return!(!Object(i.E)(t)||1!==t.length)&&t.charCodeAt(0)}var x={test:function(t){for(var e=t.length,n=this.lastIndex;n<e;n++){var r=t.charCodeAt(n);if(10===r)return this.lastIndex=n+1,!0;if(13===r)return 10===t.charCodeAt(n+1)?this.lastIndex=n+2:this.lastIndex=n+1,!0}return!1},lastIndex:0};function L(t,e){if(Object(i.w)(t,"LINE_BREAKS"))return!1;if(Object(i.D)(t.PATTERN)){try{g(e,t.PATTERN)}catch(t){return{issue:V.IDENTIFY_TERMINATOR,errMsg:t.message}}return!1}if(Object(i.E)(t.PATTERN))return!1;if(S(t))return{issue:V.CUSTOM_LINE_BREAK};throw Error("non exhaustive match")}function j(t){return Object(i.I)(t,(function(t){return Object(i.E)(t)&&t.length>0?t.charCodeAt(0):t}))}function C(t,e,n){void 0===t[e]?t[e]=[n]:t[e].push(n)}var w=256;function P(t){return t<w?t:M[t]}var M=[];function U(t,e){var n=t.tokenTypeIdx;return n===e.tokenTypeIdx||!0===e.isParent&&!0===e.categoryMatchesMap[n]}function F(t,e){return t.tokenTypeIdx===e.tokenTypeIdx}var D=1,B={};function W(t){var e=function(t){var e=Object(i.g)(t),n=t,r=!0;for(;r;){n=Object(i.i)(Object(i.t)(Object(i.I)(n,(function(t){return t.CATEGORIES}))));var o=Object(i.l)(n,e);e=e.concat(o),Object(i.A)(o)?r=!1:n=o}return e}(t);!function(t){Object(i.u)(t,(function(t){var e;G(t)||(B[D]=t,t.tokenTypeIdx=D++),K(t)&&!Object(i.y)(t.CATEGORIES)&&(t.CATEGORIES=[t.CATEGORIES]),K(t)||(t.CATEGORIES=[]),e=t,Object(i.w)(e,"categoryMatches")||(t.categoryMatches=[]),function(t){return Object(i.w)(t,"categoryMatchesMap")}(t)||(t.categoryMatchesMap={})}))}(e),function(t){Object(i.u)(t,(function(t){!function t(e,n){Object(i.u)(e,(function(t){n.categoryMatchesMap[t.tokenTypeIdx]=!0})),Object(i.u)(n.CATEGORIES,(function(r){var o=e.concat(n);Object(i.j)(o,r)||t(o,r)}))}([],t)}))}(e),function(t){Object(i.u)(t,(function(t){t.categoryMatches=[],Object(i.u)(t.categoryMatchesMap,(function(e,n){t.categoryMatches.push(B[n].tokenTypeIdx)}))}))}(e),Object(i.u)(e,(function(t){t.isParent=t.categoryMatches.length>0}))}function G(t){return Object(i.w)(t,"tokenTypeIdx")}function K(t){return Object(i.w)(t,"CATEGORIES")}function z(t){return Object(i.w)(t,"tokenTypeIdx")}var V,H={buildUnableToPopLexerModeMessage:function(t){return"Unable to pop Lexer Mode after encountering Token ->"+t.image+"<- The Mode Stack is empty"},buildUnexpectedCharactersMessage:function(t,e,n,r,i){return"unexpected character: ->"+t.charAt(e)+"<- at offset: "+e+", skipped "+n+" characters."}};!function(t){t[t.MISSING_PATTERN=0]="MISSING_PATTERN",t[t.INVALID_PATTERN=1]="INVALID_PATTERN",t[t.EOI_ANCHOR_FOUND=2]="EOI_ANCHOR_FOUND",t[t.UNSUPPORTED_FLAGS_FOUND=3]="UNSUPPORTED_FLAGS_FOUND",t[t.DUPLICATE_PATTERNS_FOUND=4]="DUPLICATE_PATTERNS_FOUND",t[t.INVALID_GROUP_TYPE_FOUND=5]="INVALID_GROUP_TYPE_FOUND",t[t.PUSH_MODE_DOES_NOT_EXIST=6]="PUSH_MODE_DOES_NOT_EXIST",t[t.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE=7]="MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE",t[t.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY=8]="MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY",t[t.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST=9]="MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST",t[t.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED=10]="LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED",t[t.SOI_ANCHOR_FOUND=11]="SOI_ANCHOR_FOUND",t[t.EMPTY_MATCH_PATTERN=12]="EMPTY_MATCH_PATTERN",t[t.NO_LINE_BREAKS_FLAGS=13]="NO_LINE_BREAKS_FLAGS",t[t.UNREACHABLE_PATTERN=14]="UNREACHABLE_PATTERN",t[t.IDENTIFY_TERMINATOR=15]="IDENTIFY_TERMINATOR",t[t.CUSTOM_LINE_BREAK=16]="CUSTOM_LINE_BREAK"}(V||(V={}));var Y={deferDefinitionErrorsHandling:!1,positionTracking:"full",lineTerminatorsPattern:/\n|\r\n?/g,lineTerminatorCharacters:["\n","\r"],ensureOptimizations:!1,safeMode:!1,errorMessageProvider:H,traceInitPerf:!1,skipValidations:!1};Object.freeze(Y);var $=function(){function t(t,e){var n=this;if(void 0===e&&(e=Y),this.lexerDefinition=t,this.lexerDefinitionErrors=[],this.lexerDefinitionWarning=[],this.patternIdxToConfig={},this.charCodeToPatternIdxToConfig={},this.modes=[],this.emptyGroups={},this.config=void 0,this.trackStartLines=!0,this.trackEndLines=!0,this.hasCustom=!1,this.canModeBeOptimized={},"boolean"==typeof e)throw Error("The second argument to the Lexer constructor is now an ILexerConfig Object.\na boolean 2nd argument is no longer supported");this.config=Object(i.K)(Y,e);var r=this.config.traceInitPerf;!0===r?(this.traceInitMaxIdent=1/0,this.traceInitPerf=!0):"number"==typeof r&&(this.traceInitMaxIdent=r,this.traceInitPerf=!0),this.traceInitIndent=-1,this.TRACE_INIT("Lexer Constructor",(function(){var r,o=!0;n.TRACE_INIT("Lexer Config handling",(function(){if(n.config.lineTerminatorsPattern===Y.lineTerminatorsPattern)n.config.lineTerminatorsPattern=x;else if(n.config.lineTerminatorCharacters===Y.lineTerminatorCharacters)throw Error("Error: Missing <lineTerminatorCharacters> property on the Lexer config.\n\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS");if(e.safeMode&&e.ensureOptimizations)throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');n.trackStartLines=/full|onlyStart/i.test(n.config.positionTracking),n.trackEndLines=/full/i.test(n.config.positionTracking),Object(i.y)(t)?((r={modes:{}}).modes.defaultMode=Object(i.g)(t),r.defaultMode="defaultMode"):(o=!1,r=Object(i.h)(t))})),!1===n.config.skipValidations&&(n.TRACE_INIT("performRuntimeChecks",(function(){n.lexerDefinitionErrors=n.lexerDefinitionErrors.concat(function(t,e,n){var r=[];return Object(i.w)(t,"defaultMode")||r.push({message:"A MultiMode Lexer cannot be initialized without a <defaultMode> property in its definition\n",type:V.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE}),Object(i.w)(t,"modes")||r.push({message:"A MultiMode Lexer cannot be initialized without a <modes> property in its definition\n",type:V.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY}),Object(i.w)(t,"modes")&&Object(i.w)(t,"defaultMode")&&!Object(i.w)(t.modes,t.defaultMode)&&r.push({message:"A MultiMode Lexer cannot be initialized with a defaultMode: <"+t.defaultMode+">which does not exist\n",type:V.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST}),Object(i.w)(t,"modes")&&Object(i.u)(t.modes,(function(t,e){Object(i.u)(t,(function(t,n){Object(i.F)(t)&&r.push({message:"A Lexer cannot be initialized using an undefined Token Type. Mode:<"+e+"> at index: <"+n+">\n",type:V.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED})}))})),r}(r,n.trackStartLines,n.config.lineTerminatorCharacters))})),n.TRACE_INIT("performWarningRuntimeChecks",(function(){n.lexerDefinitionWarning=n.lexerDefinitionWarning.concat(N(r,n.trackStartLines,n.config.lineTerminatorCharacters))}))),r.modes=r.modes?r.modes:{},Object(i.u)(r.modes,(function(t,e){r.modes[e]=Object(i.P)(t,(function(t){return Object(i.F)(t)}))}));var u=Object(i.G)(r.modes);if(Object(i.u)(r.modes,(function(t,r){n.TRACE_INIT("Mode: <"+r+"> processing",(function(){var o;(n.modes.push(r),!1===n.config.skipValidations&&n.TRACE_INIT("validatePatterns",(function(){n.lexerDefinitionErrors=n.lexerDefinitionErrors.concat(T(t,u))})),Object(i.A)(n.lexerDefinitionErrors))&&(W(t),n.TRACE_INIT("analyzeTokenTypes",(function(){o=E(t,{lineTerminatorCharacters:n.config.lineTerminatorCharacters,positionTracking:e.positionTracking,ensureOptimizations:e.ensureOptimizations,safeMode:e.safeMode,tracer:n.TRACE_INIT.bind(n)})})),n.patternIdxToConfig[r]=o.patternIdxToConfig,n.charCodeToPatternIdxToConfig[r]=o.charCodeToPatternIdxToConfig,n.emptyGroups=Object(i.K)(n.emptyGroups,o.emptyGroups),n.hasCustom=o.hasCustom||n.hasCustom,n.canModeBeOptimized[r]=o.canBeOptimized)}))})),n.defaultMode=r.defaultMode,!Object(i.A)(n.lexerDefinitionErrors)&&!n.config.deferDefinitionErrorsHandling){var c=Object(i.I)(n.lexerDefinitionErrors,(function(t){return t.message})).join("-----------------------\n");throw new Error("Errors detected in definition of Lexer:\n"+c)}Object(i.u)(n.lexerDefinitionWarning,(function(t){Object(i.d)(t.message)})),n.TRACE_INIT("Choosing sub-methods implementations",(function(){if(O?(n.chopInput=i.a,n.match=n.matchWithTest):(n.updateLastIndex=i.b,n.match=n.matchWithExec),o&&(n.handleModes=i.b),!1===n.trackStartLines&&(n.computeNewColumn=i.a),!1===n.trackEndLines&&(n.updateTokenEndLineColumnLocation=i.b),/full/i.test(n.config.positionTracking))n.createTokenInstance=n.createFullToken;else if(/onlyStart/i.test(n.config.positionTracking))n.createTokenInstance=n.createStartOnlyToken;else{if(!/onlyOffset/i.test(n.config.positionTracking))throw Error('Invalid <positionTracking> config option: "'+n.config.positionTracking+'"');n.createTokenInstance=n.createOffsetOnlyToken}n.hasCustom?(n.addToken=n.addTokenUsingPush,n.handlePayload=n.handlePayloadWithCustom):(n.addToken=n.addTokenUsingMemberAccess,n.handlePayload=n.handlePayloadNoCustom)})),n.TRACE_INIT("Failed Optimization Warnings",(function(){var t=Object(i.O)(n.canModeBeOptimized,(function(t,e,n){return!1===e&&t.push(n),t}),[]);if(e.ensureOptimizations&&!Object(i.A)(t))throw Error("Lexer Modes: < "+t.join(", ")+' > cannot be optimized.\n\t Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n\t Or inspect the console log for details on how to resolve these issues.')})),n.TRACE_INIT("clearRegExpParserCache",(function(){a={}})),n.TRACE_INIT("toFastProperties",(function(){Object(i.S)(n)}))}))}return t.prototype.tokenize=function(t,e){if(void 0===e&&(e=this.defaultMode),!Object(i.A)(this.lexerDefinitionErrors)){var n=Object(i.I)(this.lexerDefinitionErrors,(function(t){return t.message})).join("-----------------------\n");throw new Error("Unable to Tokenize because Errors detected in definition of Lexer:\n"+n)}return this.tokenizeInternal(t,e)},t.prototype.tokenizeInternal=function(t,e){var n,r,o,a,u,c,s,f,l,h,p,d,v,y,g,m,_,O=this,E=t,T=E.length,b=0,A=0,I=this.hasCustom?0:Math.floor(t.length/10),R=new Array(I),N=[],S=this.trackStartLines?1:void 0,k=this.trackStartLines?1:void 0,x=(g=this.emptyGroups,m={},_=Object(i.G)(g),Object(i.u)(_,(function(t){var e=g[t];if(!Object(i.y)(e))throw Error("non exhaustive match");m[t]=[]})),m),L=this.trackStartLines,j=this.config.lineTerminatorsPattern,C=0,w=[],M=[],U=[],F=[];Object.freeze(F);var D=void 0;function B(){return w}function W(t){var e=P(t),n=M[e];return void 0===n?F:n}var G,K=function(t){if(1===U.length&&void 0===t.tokenType.PUSH_MODE){var e=O.config.errorMessageProvider.buildUnableToPopLexerModeMessage(t);N.push({offset:t.startOffset,line:void 0!==t.startLine?t.startLine:void 0,column:void 0!==t.startColumn?t.startColumn:void 0,length:t.image.length,message:e})}else{U.pop();var n=Object(i.H)(U);w=O.patternIdxToConfig[n],M=O.charCodeToPatternIdxToConfig[n],C=w.length;var r=O.canModeBeOptimized[n]&&!1===O.config.safeMode;D=M&&r?W:B}};function z(t){U.push(t),M=this.charCodeToPatternIdxToConfig[t],w=this.patternIdxToConfig[t],C=w.length,C=w.length;var e=this.canModeBeOptimized[t]&&!1===this.config.safeMode;D=M&&e?W:B}for(z.call(this,e);b<T;){u=null;var V=E.charCodeAt(b),H=D(V),Y=H.length;for(n=0;n<Y;n++){var $=(G=H[n]).pattern;if(c=null,!1!==(it=G.short)?V===it&&(u=$):!0===G.isCustom?null!==(y=$.exec(E,b,R,x))?(u=y[0],void 0!==y.payload&&(c=y.payload)):u=null:(this.updateLastIndex($,b),u=this.match($,t,b)),null!==u){if(void 0!==(a=G.longerAlt)){var q=w[a],X=q.pattern;s=null,!0===q.isCustom?null!==(y=X.exec(E,b,R,x))?(o=y[0],void 0!==y.payload&&(s=y.payload)):o=null:(this.updateLastIndex(X,b),o=this.match(X,t,b)),o&&o.length>u.length&&(u=o,c=s,G=q)}break}}if(null!==u){if(f=u.length,void 0!==(l=G.group)&&(h=G.tokenTypeIdx,p=this.createTokenInstance(u,b,h,G.tokenType,S,k,f),this.handlePayload(p,c),!1===l?A=this.addToken(R,A,p):x[l].push(p)),t=this.chopInput(t,f),b+=f,k=this.computeNewColumn(k,f),!0===L&&!0===G.canLineTerminator){var Z=0,J=void 0,Q=void 0;j.lastIndex=0;do{!0===(J=j.test(u))&&(Q=j.lastIndex-1,Z++)}while(!0===J);0!==Z&&(S+=Z,k=f-Q,this.updateTokenEndLineColumnLocation(p,l,Q,Z,S,k,f))}this.handleModes(G,K,z,p)}else{for(var tt=b,et=S,nt=k,rt=!1;!rt&&b<T;)for(E.charCodeAt(b),t=this.chopInput(t,1),b++,r=0;r<C;r++){var it,ot=w[r];$=ot.pattern;if(!1!==(it=ot.short)?E.charCodeAt(b)===it&&(rt=!0):!0===ot.isCustom?rt=null!==$.exec(E,b,R,x):(this.updateLastIndex($,b),rt=null!==$.exec(t)),!0===rt)break}d=b-tt,v=this.config.errorMessageProvider.buildUnexpectedCharactersMessage(E,tt,d,et,nt),N.push({offset:tt,line:et,column:nt,length:d,message:v})}}return this.hasCustom||(R.length=A),{tokens:R,groups:x,errors:N}},t.prototype.handleModes=function(t,e,n,r){if(!0===t.pop){var i=t.push;e(r),void 0!==i&&n.call(this,i)}else void 0!==t.push&&n.call(this,t.push)},t.prototype.chopInput=function(t,e){return t.substring(e)},t.prototype.updateLastIndex=function(t,e){t.lastIndex=e},t.prototype.updateTokenEndLineColumnLocation=function(t,e,n,r,i,o,a){var u,c;void 0!==e&&(c=(u=n===a-1)?-1:0,1===r&&!0===u||(t.endLine=i+c,t.endColumn=o-1-c))},t.prototype.computeNewColumn=function(t,e){return t+e},t.prototype.createTokenInstance=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return null},t.prototype.createOffsetOnlyToken=function(t,e,n,r){return{image:t,startOffset:e,tokenTypeIdx:n,tokenType:r}},t.prototype.createStartOnlyToken=function(t,e,n,r,i,o){return{image:t,startOffset:e,startLine:i,startColumn:o,tokenTypeIdx:n,tokenType:r}},t.prototype.createFullToken=function(t,e,n,r,i,o,a){return{image:t,startOffset:e,endOffset:e+a-1,startLine:i,endLine:i,startColumn:o,endColumn:o+a-1,tokenTypeIdx:n,tokenType:r}},t.prototype.addToken=function(t,e,n){return 666},t.prototype.addTokenUsingPush=function(t,e,n){return t.push(n),e},t.prototype.addTokenUsingMemberAccess=function(t,e,n){return t[e]=n,++e},t.prototype.handlePayload=function(t,e){},t.prototype.handlePayloadNoCustom=function(t,e){},t.prototype.handlePayloadWithCustom=function(t,e){null!==e&&(t.payload=e)},t.prototype.match=function(t,e,n){return null},t.prototype.matchWithTest=function(t,e,n){return!0===t.test(e)?e.substring(n,t.lastIndex):null},t.prototype.matchWithExec=function(t,e){var n=t.exec(e);return null!==n?n[0]:n},t.prototype.TRACE_INIT=function(t,e){if(!0===this.traceInitPerf){this.traceInitIndent++;var n=new Array(this.traceInitIndent+1).join("\t");this.traceInitIndent<this.traceInitMaxIdent&&console.log(n+"--\x3e <"+t+">");var r=Object(i.R)(e),o=r.time,a=r.value,u=o>10?console.warn:console.log;return this.traceInitIndent<this.traceInitMaxIdent&&u(n+"<-- <"+t+"> time: "+o+"ms"),this.traceInitIndent--,a}return e()},t.SKIPPED="This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.",t.NA=/NOT_APPLICABLE/,t}();function q(t){return Z(t)?t.LABEL:t.name}function X(t){return t.name}function Z(t){return Object(i.E)(t.LABEL)&&""!==t.LABEL}function J(t){return function(t){var e=t.pattern,n={};n.name=t.name,Object(i.F)(e)||(n.PATTERN=e);if(Object(i.w)(t,"parent"))throw"The parent property is no longer supported.\nSee: https://github.com/SAP/chevrotain/issues/564#issuecomment-349062346 for details.";Object(i.w)(t,"categories")&&(n.CATEGORIES=t.categories);W([n]),Object(i.w)(t,"label")&&(n.LABEL=t.label);Object(i.w)(t,"group")&&(n.GROUP=t.group);Object(i.w)(t,"pop_mode")&&(n.POP_MODE=t.pop_mode);Object(i.w)(t,"push_mode")&&(n.PUSH_MODE=t.push_mode);Object(i.w)(t,"longer_alt")&&(n.LONGER_ALT=t.longer_alt);Object(i.w)(t,"line_breaks")&&(n.LINE_BREAKS=t.line_breaks);Object(i.w)(t,"start_chars_hint")&&(n.START_CHARS_HINT=t.start_chars_hint);return n}(t)}var Q=J({name:"EOF",pattern:$.NA});function tt(t,e,n,r,i,o,a,u){return{image:e,startOffset:n,endOffset:r,startLine:i,endLine:o,startColumn:a,endColumn:u,tokenTypeIdx:t.tokenTypeIdx,tokenType:t}}function et(t,e){return U(t,e)}W([Q]);var nt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),rt=function(){function t(t){this.definition=t}return t.prototype.accept=function(t){t.visit(this),Object(i.u)(this.definition,(function(e){e.accept(t)}))},t}(),it=function(t){function e(e){var n=t.call(this,[])||this;return n.idx=1,Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),Object.defineProperty(e.prototype,"definition",{get:function(){return void 0!==this.referencedRule?this.referencedRule.definition:[]},set:function(t){},enumerable:!0,configurable:!0}),e.prototype.accept=function(t){t.visit(this)},e}(rt),ot=function(t){function e(e){var n=t.call(this,e.definition)||this;return n.orgText="",Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),e}(rt),at=function(t){function e(e){var n=t.call(this,e.definition)||this;return n.ignoreAmbiguities=!1,Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),e}(rt),ut=function(t){function e(e){var n=t.call(this,e.definition)||this;return n.idx=1,Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),e}(rt),ct=function(t){function e(e){var n=t.call(this,e.definition)||this;return n.idx=1,Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),e}(rt),st=function(t){function e(e){var n=t.call(this,e.definition)||this;return n.idx=1,Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),e}(rt),ft=function(t){function e(e){var n=t.call(this,e.definition)||this;return n.idx=1,Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),e}(rt),lt=function(t){function e(e){var n=t.call(this,e.definition)||this;return n.idx=1,Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),e}(rt),ht=function(t){function e(e){var n=t.call(this,e.definition)||this;return n.idx=1,n.ignoreAmbiguities=!1,n.hasPredicates=!1,Object(i.f)(n,Object(i.N)(e,(function(t){return void 0!==t}))),n}return nt(e,t),e}(rt),pt=function(){function t(t){this.idx=1,Object(i.f)(this,Object(i.N)(t,(function(t){return void 0!==t})))}return t.prototype.accept=function(t){t.visit(this)},t}();function dt(t){return Object(i.I)(t,vt)}function vt(t){function e(t){return Object(i.I)(t,vt)}if(t instanceof it)return{type:"NonTerminal",name:t.nonTerminalName,idx:t.idx};if(t instanceof at)return{type:"Alternative",definition:e(t.definition)};if(t instanceof ut)return{type:"Option",idx:t.idx,definition:e(t.definition)};if(t instanceof ct)return{type:"RepetitionMandatory",idx:t.idx,definition:e(t.definition)};if(t instanceof st)return{type:"RepetitionMandatoryWithSeparator",idx:t.idx,separator:vt(new pt({terminalType:t.separator})),definition:e(t.definition)};if(t instanceof lt)return{type:"RepetitionWithSeparator",idx:t.idx,separator:vt(new pt({terminalType:t.separator})),definition:e(t.definition)};if(t instanceof ft)return{type:"Repetition",idx:t.idx,definition:e(t.definition)};if(t instanceof ht)return{type:"Alternation",idx:t.idx,definition:e(t.definition)};if(t instanceof pt){var n={type:"Terminal",name:t.terminalType.name,label:q(t.terminalType),idx:t.idx},r=t.terminalType.PATTERN;return t.terminalType.PATTERN&&(n.pattern=Object(i.D)(r)?r.source:r),n}if(t instanceof ot)return{type:"Rule",name:t.name,orgText:t.orgText,definition:e(t.definition)};throw Error("non exhaustive match")}var yt=function(){function t(){}return t.prototype.walk=function(t,e){var n=this;void 0===e&&(e=[]),Object(i.u)(t.definition,(function(r,o){var a=Object(i.m)(t.definition,o+1);if(r instanceof it)n.walkProdRef(r,a,e);else if(r instanceof pt)n.walkTerminal(r,a,e);else if(r instanceof at)n.walkFlat(r,a,e);else if(r instanceof ut)n.walkOption(r,a,e);else if(r instanceof ct)n.walkAtLeastOne(r,a,e);else if(r instanceof st)n.walkAtLeastOneSep(r,a,e);else if(r instanceof lt)n.walkManySep(r,a,e);else if(r instanceof ft)n.walkMany(r,a,e);else{if(!(r instanceof ht))throw Error("non exhaustive match");n.walkOr(r,a,e)}}))},t.prototype.walkTerminal=function(t,e,n){},t.prototype.walkProdRef=function(t,e,n){},t.prototype.walkFlat=function(t,e,n){var r=e.concat(n);this.walk(t,r)},t.prototype.walkOption=function(t,e,n){var r=e.concat(n);this.walk(t,r)},t.prototype.walkAtLeastOne=function(t,e,n){var r=[new ut({definition:t.definition})].concat(e,n);this.walk(t,r)},t.prototype.walkAtLeastOneSep=function(t,e,n){var r=gt(t,e,n);this.walk(t,r)},t.prototype.walkMany=function(t,e,n){var r=[new ut({definition:t.definition})].concat(e,n);this.walk(t,r)},t.prototype.walkManySep=function(t,e,n){var r=gt(t,e,n);this.walk(t,r)},t.prototype.walkOr=function(t,e,n){var r=this,o=e.concat(n);Object(i.u)(t.definition,(function(t){var e=new at({definition:[t]});r.walk(e,o)}))},t}();function gt(t,e,n){return[new ut({definition:[new pt({terminalType:t.separator})].concat(t.definition)})].concat(e,n)}var mt=function(){function t(){}return t.prototype.visit=function(t){var e=t;switch(e.constructor){case it:return this.visitNonTerminal(e);case at:return this.visitAlternative(e);case ut:return this.visitOption(e);case ct:return this.visitRepetitionMandatory(e);case st:return this.visitRepetitionMandatoryWithSeparator(e);case lt:return this.visitRepetitionWithSeparator(e);case ft:return this.visitRepetition(e);case ht:return this.visitAlternation(e);case pt:return this.visitTerminal(e);case ot:return this.visitRule(e);default:throw Error("non exhaustive match")}},t.prototype.visitNonTerminal=function(t){},t.prototype.visitAlternative=function(t){},t.prototype.visitOption=function(t){},t.prototype.visitRepetition=function(t){},t.prototype.visitRepetitionMandatory=function(t){},t.prototype.visitRepetitionMandatoryWithSeparator=function(t){},t.prototype.visitRepetitionWithSeparator=function(t){},t.prototype.visitAlternation=function(t){},t.prototype.visitTerminal=function(t){},t.prototype.visitRule=function(t){},t}(),_t=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function Ot(t,e){return void 0===e&&(e=[]),!!(t instanceof ut||t instanceof ft||t instanceof lt)||(t instanceof ht?Object(i.Q)(t.definition,(function(t){return Ot(t,e)})):!(t instanceof it&&Object(i.j)(e,t))&&(t instanceof rt&&(t instanceof it&&e.push(t),Object(i.o)(t.definition,(function(t){return Ot(t,e)})))))}function Et(t){if(t instanceof it)return"SUBRULE";if(t instanceof ut)return"OPTION";if(t instanceof ht)return"OR";if(t instanceof ct)return"AT_LEAST_ONE";if(t instanceof st)return"AT_LEAST_ONE_SEP";if(t instanceof lt)return"MANY_SEP";if(t instanceof ft)return"MANY";if(t instanceof pt)return"CONSUME";throw Error("non exhaustive match")}var Tt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.separator="-",e.dslMethods={option:[],alternation:[],repetition:[],repetitionWithSeparator:[],repetitionMandatory:[],repetitionMandatoryWithSeparator:[]},e}return _t(e,t),e.prototype.reset=function(){this.dslMethods={option:[],alternation:[],repetition:[],repetitionWithSeparator:[],repetitionMandatory:[],repetitionMandatoryWithSeparator:[]}},e.prototype.visitTerminal=function(t){var e=t.terminalType.name+this.separator+"Terminal";Object(i.w)(this.dslMethods,e)||(this.dslMethods[e]=[]),this.dslMethods[e].push(t)},e.prototype.visitNonTerminal=function(t){var e=t.nonTerminalName+this.separator+"Terminal";Object(i.w)(this.dslMethods,e)||(this.dslMethods[e]=[]),this.dslMethods[e].push(t)},e.prototype.visitOption=function(t){this.dslMethods.option.push(t)},e.prototype.visitRepetitionWithSeparator=function(t){this.dslMethods.repetitionWithSeparator.push(t)},e.prototype.visitRepetitionMandatory=function(t){this.dslMethods.repetitionMandatory.push(t)},e.prototype.visitRepetitionMandatoryWithSeparator=function(t){this.dslMethods.repetitionMandatoryWithSeparator.push(t)},e.prototype.visitRepetition=function(t){this.dslMethods.repetition.push(t)},e.prototype.visitAlternation=function(t){this.dslMethods.alternation.push(t)},e}(mt),bt=new Tt;function At(t){if(t instanceof it)return At(t.referencedRule);if(t instanceof pt)return[t.terminalType];if(function(t){return t instanceof at||t instanceof ut||t instanceof ft||t instanceof ct||t instanceof st||t instanceof lt||t instanceof pt||t instanceof ot}(t))return function(t){var e,n=[],r=t.definition,o=0,a=r.length>o,u=!0;for(;a&&u;)e=r[o],u=Ot(e),n=n.concat(At(e)),o+=1,a=r.length>o;return Object(i.T)(n)}(t);if(function(t){return t instanceof ht}(t))return function(t){var e=Object(i.I)(t.definition,(function(t){return At(t)}));return Object(i.T)(Object(i.t)(e))}(t);throw Error("non exhaustive match")}var It="_~IN~_",Rt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Nt=function(t){function e(e){var n=t.call(this)||this;return n.topProd=e,n.follows={},n}return Rt(e,t),e.prototype.startWalking=function(){return this.walk(this.topProd),this.follows},e.prototype.walkTerminal=function(t,e,n){},e.prototype.walkProdRef=function(t,e,n){var r,i,o=(r=t.referencedRule,i=t.idx,r.name+i+It+this.topProd.name),a=e.concat(n),u=At(new at({definition:a}));this.follows[o]=u},e}(yt);var St={buildMismatchTokenMessage:function(t){var e=t.expected,n=t.actual;t.previous,t.ruleName;return"Expecting "+(Z(e)?"--\x3e "+q(e)+" <--":"token of type --\x3e "+e.name+" <--")+" but found --\x3e '"+n.image+"' <--"},buildNotAllInputParsedMessage:function(t){var e=t.firstRedundant;t.ruleName;return"Redundant input, expecting EOF but found: "+e.image},buildNoViableAltMessage:function(t){var e=t.expectedPathsPerAlt,n=t.actual,r=(t.previous,t.customUserDescription),o=(t.ruleName,"\nbut found: '"+Object(i.s)(n).image+"'");if(r)return"Expecting: "+r+o;var a=Object(i.O)(e,(function(t,e){return t.concat(e)}),[]),u=Object(i.I)(a,(function(t){return"["+Object(i.I)(t,(function(t){return q(t)})).join(", ")+"]"}));return"Expecting: "+("one of these possible Token sequences:\n"+Object(i.I)(u,(function(t,e){return"  "+(e+1)+". "+t})).join("\n"))+o},buildEarlyExitMessage:function(t){var e=t.expectedIterationPaths,n=t.actual,r=t.customUserDescription,o=(t.ruleName,"\nbut found: '"+Object(i.s)(n).image+"'");return r?"Expecting: "+r+o:"Expecting: "+("expecting at least one iteration which starts with one of these possible Token sequences::\n  <"+Object(i.I)(e,(function(t){return"["+Object(i.I)(t,(function(t){return q(t)})).join(",")+"]"})).join(" ,")+">")+o}};Object.freeze(St);var kt={buildRuleNotFoundError:function(t,e){return"Invalid grammar, reference to a rule which is not defined: ->"+e.nonTerminalName+"<-\ninside top level rule: ->"+t.name+"<-"}},xt={buildDuplicateFoundError:function(t,e){var n,r=t.name,o=Object(i.s)(e),a=o.idx,u=Et(o),c=(n=o)instanceof pt?n.terminalType.name:n instanceof it?n.nonTerminalName:"",s="->"+u+(a>0?a:"")+"<- "+(c?"with argument: ->"+c+"<-":"")+"\n                  appears more than once ("+e.length+" times) in the top level rule: ->"+r+"<-.                  \n                  For further details see: https://sap.github.io/chevrotain/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  ";return s=(s=s.replace(/[ \t]+/g," ")).replace(/\s\s+/g,"\n")},buildNamespaceConflictError:function(t){return"Namespace conflict found in grammar.\nThe grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <"+t.name+">.\nTo resolve this make sure each Terminal and Non-Terminal names are unique\nThis is easy to accomplish by using the convention that Terminal names start with an uppercase letter\nand Non-Terminal names start with a lower case letter."},buildAlternationPrefixAmbiguityError:function(t){var e=Object(i.I)(t.prefixPath,(function(t){return q(t)})).join(", "),n=0===t.alternation.idx?"":t.alternation.idx;return"Ambiguous alternatives: <"+t.ambiguityIndices.join(" ,")+"> due to common lookahead prefix\nin <OR"+n+"> inside <"+t.topLevelRule.name+"> Rule,\n<"+e+"> may appears as a prefix path in all these alternatives.\nSee: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\nFor Further details."},buildAlternationAmbiguityError:function(t){var e=Object(i.I)(t.prefixPath,(function(t){return q(t)})).join(", "),n=0===t.alternation.idx?"":t.alternation.idx,r="Ambiguous Alternatives Detected: <"+t.ambiguityIndices.join(" ,")+"> in <OR"+n+"> inside <"+t.topLevelRule.name+"> Rule,\n<"+e+"> may appears as a prefix path in all these alternatives.\n";return r+="See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\nFor Further details."},buildEmptyRepetitionError:function(t){var e=Et(t.repetition);return 0!==t.repetition.idx&&(e+=t.repetition.idx),"The repetition <"+e+"> within Rule <"+t.topLevelRule.name+"> can never consume any tokens.\nThis could lead to an infinite loop."},buildTokenNameError:function(t){return"Invalid Grammar Token name: ->"+t.tokenType.name+"<- it must match the pattern: ->"+t.expectedPattern.toString()+"<-"},buildEmptyAlternationError:function(t){return"Ambiguous empty alternative: <"+(t.emptyChoiceIdx+1)+"> in <OR"+t.alternation.idx+"> inside <"+t.topLevelRule.name+"> Rule.\nOnly the last alternative may be an empty alternative."},buildTooManyAlternativesError:function(t){return"An Alternation cannot have more than 256 alternatives:\n<OR"+t.alternation.idx+"> inside <"+t.topLevelRule.name+"> Rule.\n has "+(t.alternation.definition.length+1)+" alternatives."},buildLeftRecursionError:function(t){var e=t.topLevelRule.name;return"Left Recursion found in grammar.\nrule: <"+e+"> can be invoked from itself (directly or indirectly)\nwithout consuming any Tokens. The grammar path that causes this is: \n "+(e+" --\x3e "+i.I(t.leftRecursionPath,(function(t){return t.name})).concat([e]).join(" --\x3e "))+"\n To fix this refactor your grammar to remove the left recursion.\nsee: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring."},buildInvalidRuleNameError:function(t){return"Invalid grammar rule name: ->"+t.topLevelRule.name+"<- it must match the pattern: ->"+t.expectedPattern.toString()+"<-"},buildDuplicateRuleNameError:function(t){return"Duplicate definition, rule: ->"+(t.topLevelRule instanceof ot?t.topLevelRule.name:t.topLevelRule)+"<- is already defined in the grammar: ->"+t.grammarName+"<-"}},Lt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();var jt=function(t){function e(e,n){var r=t.call(this)||this;return r.nameToTopRule=e,r.errMsgProvider=n,r.errors=[],r}return Lt(e,t),e.prototype.resolveRefs=function(){var t=this;Object(i.u)(Object(i.U)(this.nameToTopRule),(function(e){t.currTopLevel=e,e.accept(t)}))},e.prototype.visitNonTerminal=function(t){var e=this.nameToTopRule[t.nonTerminalName];if(e)t.referencedRule=e;else{var n=this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel,t);this.errors.push({message:n,type:Je.UNRESOLVED_SUBRULE_REF,ruleName:this.currTopLevel.name,unresolvedRefName:t.nonTerminalName})}},e}(mt),Ct=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),wt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.path=n,r.nextTerminalName="",r.nextTerminalOccurrence=0,r.nextTerminalName=r.path.lastTok.name,r.nextTerminalOccurrence=r.path.lastTokOccurrence,r}return Ct(e,t),e.prototype.walkTerminal=function(t,e,n){if(this.isAtEndOfPath&&t.terminalType.name===this.nextTerminalName&&t.idx===this.nextTerminalOccurrence&&!this.found){var r=e.concat(n),i=new at({definition:r});this.possibleTokTypes=At(i),this.found=!0}},e}(function(t){function e(e,n){var r=t.call(this)||this;return r.topProd=e,r.path=n,r.possibleTokTypes=[],r.nextProductionName="",r.nextProductionOccurrence=0,r.found=!1,r.isAtEndOfPath=!1,r}return Ct(e,t),e.prototype.startWalking=function(){if(this.found=!1,this.path.ruleStack[0]!==this.topProd.name)throw Error("The path does not start with the walker's top Rule!");return this.ruleStack=Object(i.g)(this.path.ruleStack).reverse(),this.occurrenceStack=Object(i.g)(this.path.occurrenceStack).reverse(),this.ruleStack.pop(),this.occurrenceStack.pop(),this.updateExpectedNext(),this.walk(this.topProd),this.possibleTokTypes},e.prototype.walk=function(e,n){void 0===n&&(n=[]),this.found||t.prototype.walk.call(this,e,n)},e.prototype.walkProdRef=function(t,e,n){if(t.referencedRule.name===this.nextProductionName&&t.idx===this.nextProductionOccurrence){var r=e.concat(n);this.updateExpectedNext(),this.walk(t.referencedRule,r)}},e.prototype.updateExpectedNext=function(){Object(i.A)(this.ruleStack)?(this.nextProductionName="",this.nextProductionOccurrence=0,this.isAtEndOfPath=!0):(this.nextProductionName=this.ruleStack.pop(),this.nextProductionOccurrence=this.occurrenceStack.pop())},e}(yt)),Pt=function(t){function e(e,n){var r=t.call(this)||this;return r.topRule=e,r.occurrence=n,r.result={token:void 0,occurrence:void 0,isEndOfRule:void 0},r}return Ct(e,t),e.prototype.startWalking=function(){return this.walk(this.topRule),this.result},e}(yt),Mt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ct(e,t),e.prototype.walkMany=function(e,n,r){if(e.idx===this.occurrence){var o=Object(i.s)(n.concat(r));this.result.isEndOfRule=void 0===o,o instanceof pt&&(this.result.token=o.terminalType,this.result.occurrence=o.idx)}else t.prototype.walkMany.call(this,e,n,r)},e}(Pt),Ut=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ct(e,t),e.prototype.walkManySep=function(e,n,r){if(e.idx===this.occurrence){var o=Object(i.s)(n.concat(r));this.result.isEndOfRule=void 0===o,o instanceof pt&&(this.result.token=o.terminalType,this.result.occurrence=o.idx)}else t.prototype.walkManySep.call(this,e,n,r)},e}(Pt),Ft=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ct(e,t),e.prototype.walkAtLeastOne=function(e,n,r){if(e.idx===this.occurrence){var o=Object(i.s)(n.concat(r));this.result.isEndOfRule=void 0===o,o instanceof pt&&(this.result.token=o.terminalType,this.result.occurrence=o.idx)}else t.prototype.walkAtLeastOne.call(this,e,n,r)},e}(Pt),Dt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ct(e,t),e.prototype.walkAtLeastOneSep=function(e,n,r){if(e.idx===this.occurrence){var o=Object(i.s)(n.concat(r));this.result.isEndOfRule=void 0===o,o instanceof pt&&(this.result.token=o.terminalType,this.result.occurrence=o.idx)}else t.prototype.walkAtLeastOneSep.call(this,e,n,r)},e}(Pt);function Bt(t,e,n){void 0===n&&(n=[]),n=Object(i.g)(n);var r=[],o=0;function a(a){var u=Bt(a.concat(Object(i.m)(t,o+1)),e,n);return r.concat(u)}for(;n.length<e&&o<t.length;){var u=t[o];if(u instanceof at)return a(u.definition);if(u instanceof it)return a(u.definition);if(u instanceof ut)r=a(u.definition);else{if(u instanceof ct)return a(c=u.definition.concat([new ft({definition:u.definition})]));if(u instanceof st)return a(c=[new at({definition:u.definition}),new ft({definition:[new pt({terminalType:u.separator})].concat(u.definition)})]);if(u instanceof lt){var c=u.definition.concat([new ft({definition:[new pt({terminalType:u.separator})].concat(u.definition)})]);r=a(c)}else if(u instanceof ft){c=u.definition.concat([new ft({definition:u.definition})]);r=a(c)}else{if(u instanceof ht)return Object(i.u)(u.definition,(function(t){r=a(t.definition)})),r;if(!(u instanceof pt))throw Error("non exhaustive match");n.push(u.terminalType)}}o++}return r.push({partialPath:n,suffixDef:Object(i.m)(t,o)}),r}function Wt(t,e,n,r){var o=["EXIT_NONE_TERMINAL"],a=!1,u=e.length,c=u-r-1,s=[],f=[];for(f.push({idx:-1,def:t,ruleStack:[],occurrenceStack:[]});!Object(i.A)(f);){var l=f.pop();if("EXIT_ALTERNATIVE"!==l){var h=l.def,p=l.idx,d=l.ruleStack,v=l.occurrenceStack;if(!Object(i.A)(h)){var y=h[0];if("EXIT_NONE_TERMINAL"===y){var g={idx:p,def:Object(i.m)(h),ruleStack:Object(i.n)(d),occurrenceStack:Object(i.n)(v)};f.push(g)}else if(y instanceof pt)if(p<u-1){var m=p+1;if(n(e[m],y.terminalType)){g={idx:m,def:Object(i.m)(h),ruleStack:d,occurrenceStack:v};f.push(g)}}else{if(p!==u-1)throw Error("non exhaustive match");s.push({nextTokenType:y.terminalType,nextTokenOccurrence:y.idx,ruleStack:d,occurrenceStack:v}),a=!0}else if(y instanceof it){var _=Object(i.g)(d);_.push(y.nonTerminalName);var O=Object(i.g)(v);O.push(y.idx);g={idx:p,def:y.definition.concat(o,Object(i.m)(h)),ruleStack:_,occurrenceStack:O};f.push(g)}else if(y instanceof ut){var E={idx:p,def:Object(i.m)(h),ruleStack:d,occurrenceStack:v};f.push(E),f.push("EXIT_ALTERNATIVE");var T={idx:p,def:y.definition.concat(Object(i.m)(h)),ruleStack:d,occurrenceStack:v};f.push(T)}else if(y instanceof ct){var b=new ft({definition:y.definition,idx:y.idx});g={idx:p,def:y.definition.concat([b],Object(i.m)(h)),ruleStack:d,occurrenceStack:v};f.push(g)}else if(y instanceof st){var A=new pt({terminalType:y.separator});b=new ft({definition:[A].concat(y.definition),idx:y.idx}),g={idx:p,def:y.definition.concat([b],Object(i.m)(h)),ruleStack:d,occurrenceStack:v};f.push(g)}else if(y instanceof lt){E={idx:p,def:Object(i.m)(h),ruleStack:d,occurrenceStack:v};f.push(E),f.push("EXIT_ALTERNATIVE");A=new pt({terminalType:y.separator});var I=new ft({definition:[A].concat(y.definition),idx:y.idx});T={idx:p,def:y.definition.concat([I],Object(i.m)(h)),ruleStack:d,occurrenceStack:v};f.push(T)}else if(y instanceof ft){E={idx:p,def:Object(i.m)(h),ruleStack:d,occurrenceStack:v};f.push(E),f.push("EXIT_ALTERNATIVE");I=new ft({definition:y.definition,idx:y.idx}),T={idx:p,def:y.definition.concat([I],Object(i.m)(h)),ruleStack:d,occurrenceStack:v};f.push(T)}else if(y instanceof ht)for(var R=y.definition.length-1;R>=0;R--){var N={idx:p,def:y.definition[R].definition.concat(Object(i.m)(h)),ruleStack:d,occurrenceStack:v};f.push(N),f.push("EXIT_ALTERNATIVE")}else if(y instanceof at)f.push({idx:p,def:y.definition.concat(Object(i.m)(h)),ruleStack:d,occurrenceStack:v});else{if(!(y instanceof ot))throw Error("non exhaustive match");f.push(Gt(y,p,d,v))}}}else a&&Object(i.H)(f).idx<=c&&f.pop()}return s}function Gt(t,e,n,r){var o=Object(i.g)(n);o.push(t.name);var a=Object(i.g)(r);return a.push(1),{idx:e,def:t.definition,ruleStack:o,occurrenceStack:a}}var Kt,zt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t[t.OPTION=0]="OPTION",t[t.REPETITION=1]="REPETITION",t[t.REPETITION_MANDATORY=2]="REPETITION_MANDATORY",t[t.REPETITION_MANDATORY_WITH_SEPARATOR=3]="REPETITION_MANDATORY_WITH_SEPARATOR",t[t.REPETITION_WITH_SEPARATOR=4]="REPETITION_WITH_SEPARATOR",t[t.ALTERNATION=5]="ALTERNATION"}(Kt||(Kt={}));var Vt=function(t){function e(e,n,r){var i=t.call(this)||this;return i.topProd=e,i.targetOccurrence=n,i.targetProdType=r,i}return zt(e,t),e.prototype.startWalking=function(){return this.walk(this.topProd),this.restDef},e.prototype.checkIsTarget=function(t,e,n,r){return t.idx===this.targetOccurrence&&this.targetProdType===e&&(this.restDef=n.concat(r),!0)},e.prototype.walkOption=function(e,n,r){this.checkIsTarget(e,Kt.OPTION,n,r)||t.prototype.walkOption.call(this,e,n,r)},e.prototype.walkAtLeastOne=function(e,n,r){this.checkIsTarget(e,Kt.REPETITION_MANDATORY,n,r)||t.prototype.walkOption.call(this,e,n,r)},e.prototype.walkAtLeastOneSep=function(e,n,r){this.checkIsTarget(e,Kt.REPETITION_MANDATORY_WITH_SEPARATOR,n,r)||t.prototype.walkOption.call(this,e,n,r)},e.prototype.walkMany=function(e,n,r){this.checkIsTarget(e,Kt.REPETITION,n,r)||t.prototype.walkOption.call(this,e,n,r)},e.prototype.walkManySep=function(e,n,r){this.checkIsTarget(e,Kt.REPETITION_WITH_SEPARATOR,n,r)||t.prototype.walkOption.call(this,e,n,r)},e}(yt),Ht=function(t){function e(e,n,r){var i=t.call(this)||this;return i.targetOccurrence=e,i.targetProdType=n,i.targetRef=r,i.result=[],i}return zt(e,t),e.prototype.checkIsTarget=function(t,e){t.idx!==this.targetOccurrence||this.targetProdType!==e||void 0!==this.targetRef&&t!==this.targetRef||(this.result=t.definition)},e.prototype.visitOption=function(t){this.checkIsTarget(t,Kt.OPTION)},e.prototype.visitRepetition=function(t){this.checkIsTarget(t,Kt.REPETITION)},e.prototype.visitRepetitionMandatory=function(t){this.checkIsTarget(t,Kt.REPETITION_MANDATORY)},e.prototype.visitRepetitionMandatoryWithSeparator=function(t){this.checkIsTarget(t,Kt.REPETITION_MANDATORY_WITH_SEPARATOR)},e.prototype.visitRepetitionWithSeparator=function(t){this.checkIsTarget(t,Kt.REPETITION_WITH_SEPARATOR)},e.prototype.visitAlternation=function(t){this.checkIsTarget(t,Kt.ALTERNATION)},e}(mt);function Yt(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=[];return e}function $t(t){for(var e=[""],n=0;n<t.length;n++){for(var r=t[n],i=[],o=0;o<e.length;o++){var a=e[o];i.push(a+"_"+r.tokenTypeIdx);for(var u=0;u<r.categoryMatches.length;u++){var c="_"+r.categoryMatches[u];i.push(a+c)}}e=i}return e}function qt(t,e,n){for(var r=0;r<t.length;r++)if(r!==n)for(var i=t[r],o=0;o<e.length;o++){if(!0===i[e[o]])return!1}return!0}function Xt(t,e){for(var n=Object(i.I)(t,(function(t){return Bt([t],1)})),r=Yt(n.length),o=Object(i.I)(n,(function(t){var e={};return Object(i.u)(t,(function(t){var n=$t(t.partialPath);Object(i.u)(n,(function(t){e[t]=!0}))})),e})),a=n,u=1;u<=e;u++){var c=a;a=Yt(c.length);for(var s=function(t){for(var n=c[t],s=0;s<n.length;s++){var f=n[s].partialPath,l=n[s].suffixDef,h=$t(f);if(qt(o,h,t)||Object(i.A)(l)||f.length===e){var p=r[t];if(!1===Qt(p,f)){p.push(f);for(var d=0;d<h.length;d++){var v=h[d];o[t][v]=!0}}}else{var y=Bt(l,u+1,f);a[t]=a[t].concat(y),Object(i.u)(y,(function(e){var n=$t(e.partialPath);Object(i.u)(n,(function(e){o[t][e]=!0}))}))}}},f=0;f<c.length;f++)s(f)}return r}function Zt(t,e,n,r){var i=new Ht(t,Kt.ALTERNATION,r);return e.accept(i),Xt(i.result,n)}function Jt(t,e,n,r){var i=new Ht(t,n);e.accept(i);var o=i.result,a=new Vt(e,t,n).startWalking();return Xt([new at({definition:o}),new at({definition:a})],r)}function Qt(t,e){t:for(var n=0;n<t.length;n++){var r=t[n];if(r.length===e.length){for(var i=0;i<r.length;i++){var o=e[i],a=r[i];if(!1===(o===a||void 0!==a.categoryMatchesMap[o.tokenTypeIdx]))continue t}return!0}}return!1}function te(t){return Object(i.o)(t,(function(t){return Object(i.o)(t,(function(t){return Object(i.o)(t,(function(t){return Object(i.A)(t.categoryMatches)}))}))}))}var ee=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function ne(t,e,n,r,o){var a=i.I(t,(function(t){return function(t,e){var n=new oe;t.accept(n);var r=n.allProductions,o=i.v(r,re),a=i.N(o,(function(t){return t.length>1}));return i.I(i.U(a),(function(n){var r=i.s(n),o=e.buildDuplicateFoundError(t,n),a=Et(r),u={message:o,type:Je.DUPLICATE_PRODUCTIONS,ruleName:t.name,dslName:a,occurrence:r.idx},c=ie(r);return c&&(u.parameter=c),u}))}(t,r)})),u=i.I(t,(function(t){return function t(e,n,r,o){void 0===o&&(o=[]);var a=[],u=function t(e){var n=[];if(i.A(e))return n;var r=i.s(e);if(r instanceof it)n.push(r.referencedRule);else if(r instanceof at||r instanceof ut||r instanceof ct||r instanceof st||r instanceof lt||r instanceof ft)n=n.concat(t(r.definition));else if(r instanceof ht)n=i.t(i.I(r.definition,(function(e){return t(e.definition)})));else if(!(r instanceof pt))throw Error("non exhaustive match");var o=Ot(r),a=e.length>1;if(o&&a){var u=i.m(e);return n.concat(t(u))}return n}(n.definition);if(i.A(u))return[];var c=e.name;i.j(u,e)&&a.push({message:r.buildLeftRecursionError({topLevelRule:e,leftRecursionPath:o}),type:Je.LEFT_RECURSION,ruleName:c});var s=i.l(u,o.concat([e])),f=i.I(s,(function(n){var a=i.g(o);return a.push(n),t(e,n,r,a)}));return a.concat(i.t(f))}(t,t,r)})),c=[],s=[],f=[];Object(i.o)(u,i.A)&&(c=Object(i.I)(t,(function(t){return function(t,e){var n=new ue;t.accept(n);var r=n.alternations;return i.O(r,(function(n,r){var o=i.n(r.definition),a=i.I(o,(function(n,o){var a=Wt([n],[],null,1);return i.A(a)?{message:e.buildEmptyAlternationError({topLevelRule:t,alternation:r,emptyChoiceIdx:o}),type:Je.NONE_LAST_EMPTY_ALT,ruleName:t.name,occurrence:r.idx,alternative:o+1}:null}));return n.concat(i.i(a))}),[])}(t,r)})),s=Object(i.I)(t,(function(t){return function(t,e,n){var r=new ue;t.accept(r);var o=r.alternations;return o=Object(i.P)(o,(function(t){return!0===t.ignoreAmbiguities})),i.O(o,(function(r,o){var a=o.idx,u=o.maxLookahead||e,c=Zt(a,t,u,o),s=function(t,e,n,r){var o=[],a=Object(i.O)(t,(function(n,r,a){return!0===e.definition[a].ignoreAmbiguities||Object(i.u)(r,(function(r){var u=[a];Object(i.u)(t,(function(t,n){a!==n&&Qt(t,r)&&!0!==e.definition[n].ignoreAmbiguities&&u.push(n)})),u.length>1&&!Qt(o,r)&&(o.push(r),n.push({alts:u,path:r}))})),n}),[]);return i.I(a,(function(t){var o=Object(i.I)(t.alts,(function(t){return t+1}));return{message:r.buildAlternationAmbiguityError({topLevelRule:n,alternation:e,ambiguityIndices:o,prefixPath:t.path}),type:Je.AMBIGUOUS_ALTS,ruleName:n.name,occurrence:e.idx,alternatives:[t.alts]}}))}(c,o,t,n),f=function(t,e,n,r){var o=[],a=Object(i.O)(t,(function(t,e,n){var r=Object(i.I)(e,(function(t){return{idx:n,path:t}}));return t.concat(r)}),[]);return Object(i.u)(a,(function(t){if(!0!==e.definition[t.idx].ignoreAmbiguities){var u=t.idx,c=t.path,s=Object(i.r)(a,(function(t){return!0!==e.definition[t.idx].ignoreAmbiguities&&t.idx<u&&(n=t.path,r=c,n.length<r.length&&Object(i.o)(n,(function(t,e){var n=r[e];return t===n||n.categoryMatchesMap[t.tokenTypeIdx]})));var n,r})),f=Object(i.I)(s,(function(t){var i=[t.idx+1,u+1],o=0===e.idx?"":e.idx;return{message:r.buildAlternationPrefixAmbiguityError({topLevelRule:n,alternation:e,ambiguityIndices:i,prefixPath:t.path}),type:Je.AMBIGUOUS_PREFIX_ALTS,ruleName:n.name,occurrence:o,alternatives:i}}));o=o.concat(f)}})),o}(c,o,t,n);return r.concat(s,f)}),[])}(t,e,r)})),f=function(t,e,n){var r=[];return Object(i.u)(t,(function(t){var o=new ce;t.accept(o);var a=o.allProductions;Object(i.u)(a,(function(o){var a=function(t){if(t instanceof ut)return Kt.OPTION;if(t instanceof ft)return Kt.REPETITION;if(t instanceof ct)return Kt.REPETITION_MANDATORY;if(t instanceof st)return Kt.REPETITION_MANDATORY_WITH_SEPARATOR;if(t instanceof lt)return Kt.REPETITION_WITH_SEPARATOR;if(t instanceof ht)return Kt.ALTERNATION;throw Error("non exhaustive match")}(o),u=o.maxLookahead||e,c=Jt(o.idx,t,a,u)[0];if(Object(i.A)(Object(i.t)(c))){var s=n.buildEmptyRepetitionError({topLevelRule:t,repetition:o});r.push({message:s,type:Je.NO_NON_EMPTY_LOOKAHEAD,ruleName:t.name})}}))})),r}(t,e,r));var l=function(t,e,n){var r=[],o=Object(i.I)(e,(function(t){return t.name}));return Object(i.u)(t,(function(t){var e=t.name;if(Object(i.j)(o,e)){var a=n.buildNamespaceConflictError(t);r.push({message:a,type:Je.CONFLICT_TOKENS_RULES_NAMESPACE,ruleName:e})}})),r}(t,n,r),h=i.I(n,(function(t){return function(t,e){var n=[];t.name.match(ae)||n.push({message:e.buildTokenNameError({tokenType:t,expectedPattern:ae}),type:Je.INVALID_TOKEN_NAME});return n}(t,r)})),p=Object(i.I)(t,(function(t){return function(t,e){var n=new ue;t.accept(n);var r=n.alternations;return i.O(r,(function(n,r){return r.definition.length>255&&n.push({message:e.buildTooManyAlternativesError({topLevelRule:t,alternation:r}),type:Je.TOO_MANY_ALTS,ruleName:t.name,occurrence:r.idx}),n}),[])}(t,r)})),d=Object(i.I)(t,(function(t){return function(t,e){var n=[],r=t.name;r.match(ae)||n.push({message:e.buildInvalidRuleNameError({topLevelRule:t,expectedPattern:ae}),type:Je.INVALID_RULE_NAME,ruleName:r});return n}(t,r)})),v=Object(i.I)(t,(function(e){return function(t,e,n,r){var o=[];if(Object(i.O)(e,(function(e,n){return n.name===t.name?e+1:e}),0)>1){var a=r.buildDuplicateRuleNameError({topLevelRule:t,grammarName:n});o.push({message:a,type:Je.DUPLICATE_RULE_NAME,ruleName:t.name})}return o}(e,t,o,r)}));return i.t(a.concat(h,f,u,c,s,l,p,d,v))}function re(t){return Et(t)+"_#_"+t.idx+"_#_"+ie(t)}function ie(t){return t instanceof pt?t.terminalType.name:t instanceof it?t.nonTerminalName:""}var oe=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.allProductions=[],e}return ee(e,t),e.prototype.visitNonTerminal=function(t){this.allProductions.push(t)},e.prototype.visitOption=function(t){this.allProductions.push(t)},e.prototype.visitRepetitionWithSeparator=function(t){this.allProductions.push(t)},e.prototype.visitRepetitionMandatory=function(t){this.allProductions.push(t)},e.prototype.visitRepetitionMandatoryWithSeparator=function(t){this.allProductions.push(t)},e.prototype.visitRepetition=function(t){this.allProductions.push(t)},e.prototype.visitAlternation=function(t){this.allProductions.push(t)},e.prototype.visitTerminal=function(t){this.allProductions.push(t)},e}(mt),ae=/^[a-zA-Z_]\w*$/;var ue=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.alternations=[],e}return ee(e,t),e.prototype.visitAlternation=function(t){this.alternations.push(t)},e}(mt);var ce=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.allProductions=[],e}return ee(e,t),e.prototype.visitRepetitionWithSeparator=function(t){this.allProductions.push(t)},e.prototype.visitRepetitionMandatory=function(t){this.allProductions.push(t)},e.prototype.visitRepetitionMandatoryWithSeparator=function(t){this.allProductions.push(t)},e.prototype.visitRepetition=function(t){this.allProductions.push(t)},e}(mt);function se(t){t=Object(i.k)(t,{errMsgProvider:kt});var e,n,r,o={};return Object(i.u)(t.rules,(function(t){o[t.name]=t})),e=o,n=t.errMsgProvider,(r=new jt(e,n)).resolveRefs(),r.errors}function fe(t){return ne((t=Object(i.k)(t,{errMsgProvider:xt})).rules,t.maxLookahead,t.tokenTypes,t.errMsgProvider,t.grammarName)}function le(t){Object(i.u)(t.rules,(function(t){var e=new Tt;t.accept(e),Object(i.u)(e.dslMethods,(function(t){Object(i.u)(t,(function(t,e){t.idx=e+1}))}))}))}var he=["MismatchedTokenException","NoViableAltException","EarlyExitException","NotAllInputParsedException"];function pe(t){return Object(i.j)(he,t.name)}function de(t,e,n){this.name="MismatchedTokenException",this.message=t,this.token=e,this.previousToken=n,this.resyncedTokens=[]}function ve(t,e,n){this.name="NoViableAltException",this.message=t,this.token=e,this.previousToken=n,this.resyncedTokens=[]}function ye(t,e){this.name="NotAllInputParsedException",this.message=t,this.token=e,this.resyncedTokens=[]}function ge(t,e,n){this.name="EarlyExitException",this.message=t,this.token=e,this.previousToken=n,this.resyncedTokens=[]}Object.freeze(he),de.prototype=Error.prototype,ve.prototype=Error.prototype,ye.prototype=Error.prototype,ge.prototype=Error.prototype;var me={};function _e(t){this.name="InRuleRecoveryException",this.message=t}_e.prototype=Error.prototype;var Oe=function(){function t(){}return t.prototype.initRecoverable=function(t){this.firstAfterRepMap={},this.resyncFollows={},this.recoveryEnabled=Object(i.w)(t,"recoveryEnabled")?t.recoveryEnabled:Qe.recoveryEnabled,this.recoveryEnabled&&(this.attemptInRepetitionRecovery=Ee)},t.prototype.getTokenToInsert=function(t){var e=tt(t,"",NaN,NaN,NaN,NaN,NaN,NaN);return e.isInsertedInRecovery=!0,e},t.prototype.canTokenTypeBeInsertedInRecovery=function(t){return!0},t.prototype.tryInRepetitionRecovery=function(t,e,n,r){for(var o=this,a=this.findReSyncTokenType(),u=this.exportLexerState(),c=[],s=!1,f=this.LA(1),l=this.LA(1),h=function(){var t=o.LA(0),e=new de(o.errorMessageProvider.buildMismatchTokenMessage({expected:r,actual:f,previous:t,ruleName:o.getCurrRuleFullName()}),f,o.LA(0));e.resyncedTokens=Object(i.n)(c),o.SAVE_ERROR(e)};!s;){if(this.tokenMatcher(l,r))return void h();if(n.call(this))return h(),void t.apply(this,e);this.tokenMatcher(l,a)?s=!0:(l=this.SKIP_TOKEN(),this.addToResyncTokens(l,c))}this.importLexerState(u)},t.prototype.shouldInRepetitionRecoveryBeTried=function(t,e,n){return!1!==n&&(void 0!==t&&void 0!==e&&(!this.tokenMatcher(this.LA(1),t)&&(!this.isBackTracking()&&!this.canPerformInRuleRecovery(t,this.getFollowsForInRuleRecovery(t,e)))))},t.prototype.getFollowsForInRuleRecovery=function(t,e){var n=this.getCurrentGrammarPath(t,e);return this.getNextPossibleTokenTypes(n)},t.prototype.tryInRuleRecovery=function(t,e){if(this.canRecoverWithSingleTokenInsertion(t,e))return this.getTokenToInsert(t);if(this.canRecoverWithSingleTokenDeletion(t)){var n=this.SKIP_TOKEN();return this.consumeToken(),n}throw new _e("sad sad panda")},t.prototype.canPerformInRuleRecovery=function(t,e){return this.canRecoverWithSingleTokenInsertion(t,e)||this.canRecoverWithSingleTokenDeletion(t)},t.prototype.canRecoverWithSingleTokenInsertion=function(t,e){var n=this;if(!this.canTokenTypeBeInsertedInRecovery(t))return!1;if(Object(i.A)(e))return!1;var r=this.LA(1);return void 0!==Object(i.q)(e,(function(t){return n.tokenMatcher(r,t)}))},t.prototype.canRecoverWithSingleTokenDeletion=function(t){return this.tokenMatcher(this.LA(2),t)},t.prototype.isInCurrentRuleReSyncSet=function(t){var e=this.getCurrFollowKey(),n=this.getFollowSetFromFollowKey(e);return Object(i.j)(n,t)},t.prototype.findReSyncTokenType=function(){for(var t=this.flattenFollowSet(),e=this.LA(1),n=2;;){var r=e.tokenType;if(Object(i.j)(t,r))return r;e=this.LA(n),n++}},t.prototype.getCurrFollowKey=function(){if(1===this.RULE_STACK.length)return me;var t=this.getLastExplicitRuleShortName(),e=this.getLastExplicitRuleOccurrenceIndex(),n=this.getPreviousExplicitRuleShortName();return{ruleName:this.shortRuleNameToFullName(t),idxInCallingRule:e,inRule:this.shortRuleNameToFullName(n)}},t.prototype.buildFullFollowKeyStack=function(){var t=this,e=this.RULE_STACK,n=this.RULE_OCCURRENCE_STACK;return Object(i.I)(e,(function(r,i){return 0===i?me:{ruleName:t.shortRuleNameToFullName(r),idxInCallingRule:n[i],inRule:t.shortRuleNameToFullName(e[i-1])}}))},t.prototype.flattenFollowSet=function(){var t=this,e=Object(i.I)(this.buildFullFollowKeyStack(),(function(e){return t.getFollowSetFromFollowKey(e)}));return Object(i.t)(e)},t.prototype.getFollowSetFromFollowKey=function(t){if(t===me)return[Q];var e=t.ruleName+t.idxInCallingRule+It+t.inRule;return this.resyncFollows[e]},t.prototype.addToResyncTokens=function(t,e){return this.tokenMatcher(t,Q)||e.push(t),e},t.prototype.reSyncTo=function(t){for(var e=[],n=this.LA(1);!1===this.tokenMatcher(n,t);)n=this.SKIP_TOKEN(),this.addToResyncTokens(n,e);return Object(i.n)(e)},t.prototype.attemptInRepetitionRecovery=function(t,e,n,r,i,o,a){},t.prototype.getCurrentGrammarPath=function(t,e){return{ruleStack:this.getHumanReadableRuleStack(),occurrenceStack:Object(i.g)(this.RULE_OCCURRENCE_STACK),lastTok:t,lastTokOccurrence:e}},t.prototype.getHumanReadableRuleStack=function(){var t=this;return Object(i.I)(this.RULE_STACK,(function(e){return t.shortRuleNameToFullName(e)}))},t}();function Ee(t,e,n,r,i,o,a){var u=this.getKeyForAutomaticLookahead(r,i),c=this.firstAfterRepMap[u];if(void 0===c){var s=this.getCurrRuleFullName();c=new o(this.getGAstProductions()[s],i).startWalking(),this.firstAfterRepMap[u]=c}var f=c.token,l=c.occurrence,h=c.isEndOfRule;1===this.RULE_STACK.length&&h&&void 0===f&&(f=Q,l=1),this.shouldInRepetitionRecoveryBeTried(f,l,a)&&this.tryInRepetitionRecovery(t,e,n,f)}function Te(t,e,n){return n|e|t}var be=function(){function t(){}return t.prototype.initLooksAhead=function(t){this.dynamicTokensEnabled=Object(i.w)(t,"dynamicTokensEnabled")?t.dynamicTokensEnabled:Qe.dynamicTokensEnabled,this.maxLookahead=Object(i.w)(t,"maxLookahead")?t.maxLookahead:Qe.maxLookahead,this.lookAheadFuncsCache=Object(i.z)()?new Map:[],Object(i.z)()?(this.getLaFuncFromCache=this.getLaFuncFromMap,this.setLaFuncCache=this.setLaFuncCacheUsingMap):(this.getLaFuncFromCache=this.getLaFuncFromObj,this.setLaFuncCache=this.setLaFuncUsingObj)},t.prototype.preComputeLookaheadFunctions=function(t){var e=this;Object(i.u)(t,(function(t){e.TRACE_INIT(t.name+" Rule Lookahead",(function(){var n=function(t){bt.reset(),t.accept(bt);var e=bt.dslMethods;return bt.reset(),e}(t),r=n.alternation,o=n.repetition,a=n.option,u=n.repetitionMandatory,c=n.repetitionMandatoryWithSeparator,s=n.repetitionWithSeparator;Object(i.u)(r,(function(n){var r=0===n.idx?"":n.idx;e.TRACE_INIT(""+Et(n)+r,(function(){var r,i,o,a,u,c,s,f=(r=n.idx,i=t,o=n.maxLookahead||e.maxLookahead,a=n.hasPredicates,u=e.dynamicTokensEnabled,c=e.lookAheadBuilderForAlternatives,s=Zt(r,i,o),c(s,a,te(s)?F:U,u)),l=Te(e.fullRuleNameToShort[t.name],256,n.idx);e.setLaFuncCache(l,f)}))})),Object(i.u)(o,(function(n){e.computeLookaheadFunc(t,n.idx,768,Kt.REPETITION,n.maxLookahead,Et(n))})),Object(i.u)(a,(function(n){e.computeLookaheadFunc(t,n.idx,512,Kt.OPTION,n.maxLookahead,Et(n))})),Object(i.u)(u,(function(n){e.computeLookaheadFunc(t,n.idx,1024,Kt.REPETITION_MANDATORY,n.maxLookahead,Et(n))})),Object(i.u)(c,(function(n){e.computeLookaheadFunc(t,n.idx,1536,Kt.REPETITION_MANDATORY_WITH_SEPARATOR,n.maxLookahead,Et(n))})),Object(i.u)(s,(function(n){e.computeLookaheadFunc(t,n.idx,1280,Kt.REPETITION_WITH_SEPARATOR,n.maxLookahead,Et(n))}))}))}))},t.prototype.computeLookaheadFunc=function(t,e,n,r,i,o){var a=this;this.TRACE_INIT(""+o+(0===e?"":e),(function(){var o=function(t,e,n,r,i,o){var a=Jt(t,e,i,n),u=te(a)?F:U;return o(a[0],u,r)}(e,t,i||a.maxLookahead,a.dynamicTokensEnabled,r,a.lookAheadBuilderForOptional),u=Te(a.fullRuleNameToShort[t.name],n,e);a.setLaFuncCache(u,o)}))},t.prototype.lookAheadBuilderForOptional=function(t,e,n){return function(t,e,n){var r=Object(i.o)(t,(function(t){return 1===t.length})),o=t.length;if(r&&!n){var a=Object(i.t)(t);if(1===a.length&&Object(i.A)(a[0].categoryMatches)){var u=a[0].tokenTypeIdx;return function(){return this.LA(1).tokenTypeIdx===u}}var c=Object(i.O)(a,(function(t,e,n){return t[e.tokenTypeIdx]=!0,Object(i.u)(e.categoryMatches,(function(e){t[e]=!0})),t}),[]);return function(){var t=this.LA(1);return!0===c[t.tokenTypeIdx]}}return function(){t:for(var n=0;n<o;n++){for(var r=t[n],i=r.length,a=0;a<i;a++){var u=this.LA(a+1);if(!1===e(u,r[a]))continue t}return!0}return!1}}(t,e,n)},t.prototype.lookAheadBuilderForAlternatives=function(t,e,n,r){return function(t,e,n,r){var o=t.length,a=Object(i.o)(t,(function(t){return Object(i.o)(t,(function(t){return 1===t.length}))}));if(e)return function(e){for(var r=Object(i.I)(e,(function(t){return t.GATE})),a=0;a<o;a++){var u=t[a],c=u.length,s=r[a];if(void 0===s||!1!==s.call(this))t:for(var f=0;f<c;f++){for(var l=u[f],h=l.length,p=0;p<h;p++){var d=this.LA(p+1);if(!1===n(d,l[p]))continue t}return a}}};if(a&&!r){var u=Object(i.I)(t,(function(t){return Object(i.t)(t)})),c=Object(i.O)(u,(function(t,e,n){return Object(i.u)(e,(function(e){Object(i.w)(t,e.tokenTypeIdx)||(t[e.tokenTypeIdx]=n),Object(i.u)(e.categoryMatches,(function(e){Object(i.w)(t,e)||(t[e]=n)}))})),t}),[]);return function(){var t=this.LA(1);return c[t.tokenTypeIdx]}}return function(){for(var e=0;e<o;e++){var r=t[e],i=r.length;t:for(var a=0;a<i;a++){for(var u=r[a],c=u.length,s=0;s<c;s++){var f=this.LA(s+1);if(!1===n(f,u[s]))continue t}return e}}}}(t,e,n,r)},t.prototype.getKeyForAutomaticLookahead=function(t,e){return Te(this.getLastExplicitRuleShortName(),t,e)},t.prototype.getLaFuncFromCache=function(t){},t.prototype.getLaFuncFromMap=function(t){return this.lookAheadFuncsCache.get(t)},t.prototype.getLaFuncFromObj=function(t){return this.lookAheadFuncsCache[t]},t.prototype.setLaFuncCache=function(t,e){},t.prototype.setLaFuncCacheUsingMap=function(t,e){this.lookAheadFuncsCache.set(t,e)},t.prototype.setLaFuncUsingObj=function(t,e){this.lookAheadFuncsCache[t]=e},t}();function Ae(t,e){!0===isNaN(t.startOffset)?(t.startOffset=e.startOffset,t.endOffset=e.endOffset):t.endOffset<e.endOffset==!0&&(t.endOffset=e.endOffset)}function Ie(t,e){!0===isNaN(t.startOffset)?(t.startOffset=e.startOffset,t.startColumn=e.startColumn,t.startLine=e.startLine,t.endOffset=e.endOffset,t.endColumn=e.endColumn,t.endLine=e.endLine):t.endOffset<e.endOffset==!0&&(t.endOffset=e.endOffset,t.endColumn=e.endColumn,t.endLine=e.endLine)}var Re,Ne=/^\s*function\s*(\S*)\s*\(/;function Se(t){var e=t.name;return e||t.toString().match(Ne)[1]}function ke(t,e){var n=Object.getOwnPropertyDescriptor(t,"name");return!(!Object(i.F)(n)&&!n.configurable)&&(Object.defineProperty(t,"name",{enumerable:!1,configurable:!0,writable:!1,value:e}),!0)}function xe(t,e){for(var n=Object(i.G)(t),r=n.length,o=0;o<r;o++)for(var a=t[n[o]],u=a.length,c=0;c<u;c++){var s=a[c];void 0===s.tokenTypeIdx&&this[s.name](s.children,e)}}function Le(t,e){var n=function(){};return ke(n,t+"BaseSemantics"),(n.prototype={visit:function(t,e){if(Object(i.y)(t)&&(t=t[0]),!Object(i.F)(t))return this[t.name](t.children,e)},validateVisitor:function(){var t=function(t,e){var n=function(t,e){var n=Object(i.I)(e,(function(e){if(!Object(i.B)(t[e]))return{msg:"Missing visitor method: <"+e+"> on "+Se(t.constructor)+" CST Visitor.",type:Re.MISSING_METHOD,methodName:e}}));return Object(i.i)(n)}(t,e),r=function(t,e){var n=[];for(var r in t)ae.test(r)&&Object(i.B)(t[r])&&!Object(i.j)(je,r)&&!Object(i.j)(e,r)&&n.push({msg:"Redundant visitor method: <"+r+"> on "+Se(t.constructor)+" CST Visitor\nThere is no Grammar Rule corresponding to this method's name.\nFor utility methods on visitor classes use methods names that do not match /"+ae.source+"/.",type:Re.REDUNDANT_METHOD,methodName:r});return n}(t,e);return n.concat(r)}(this,e);if(!Object(i.A)(t)){var n=Object(i.I)(t,(function(t){return t.msg}));throw Error("Errors Detected in CST Visitor <"+Se(this.constructor)+">:\n\t"+n.join("\n\n").replace(/\n/g,"\n\t"))}}}).constructor=n,n._RULE_NAMES=e,n}!function(t){t[t.REDUNDANT_METHOD=0]="REDUNDANT_METHOD",t[t.MISSING_METHOD=1]="MISSING_METHOD"}(Re||(Re={}));var je=["constructor","visit","validateVisitor"];var Ce=function(){function t(){}return t.prototype.initTreeBuilder=function(t){if(this.CST_STACK=[],this.outputCst=t.outputCst,this.nodeLocationTracking=Object(i.w)(t,"nodeLocationTracking")?t.nodeLocationTracking:Qe.nodeLocationTracking,this.outputCst)if(/full/i.test(this.nodeLocationTracking))this.recoveryEnabled?(this.setNodeLocationFromToken=Ie,this.setNodeLocationFromNode=Ie,this.cstPostRule=i.b,this.setInitialNodeLocation=this.setInitialNodeLocationFullRecovery):(this.setNodeLocationFromToken=i.b,this.setNodeLocationFromNode=i.b,this.cstPostRule=this.cstPostRuleFull,this.setInitialNodeLocation=this.setInitialNodeLocationFullRegular);else if(/onlyOffset/i.test(this.nodeLocationTracking))this.recoveryEnabled?(this.setNodeLocationFromToken=Ae,this.setNodeLocationFromNode=Ae,this.cstPostRule=i.b,this.setInitialNodeLocation=this.setInitialNodeLocationOnlyOffsetRecovery):(this.setNodeLocationFromToken=i.b,this.setNodeLocationFromNode=i.b,this.cstPostRule=this.cstPostRuleOnlyOffset,this.setInitialNodeLocation=this.setInitialNodeLocationOnlyOffsetRegular);else{if(!/none/i.test(this.nodeLocationTracking))throw Error('Invalid <nodeLocationTracking> config option: "'+t.nodeLocationTracking+'"');this.setNodeLocationFromToken=i.b,this.setNodeLocationFromNode=i.b,this.cstPostRule=i.b,this.setInitialNodeLocation=i.b}else this.cstInvocationStateUpdate=i.b,this.cstFinallyStateUpdate=i.b,this.cstPostTerminal=i.b,this.cstPostNonTerminal=i.b,this.cstPostRule=i.b},t.prototype.setInitialNodeLocationOnlyOffsetRecovery=function(t){t.location={startOffset:NaN,endOffset:NaN}},t.prototype.setInitialNodeLocationOnlyOffsetRegular=function(t){t.location={startOffset:this.LA(1).startOffset,endOffset:NaN}},t.prototype.setInitialNodeLocationFullRecovery=function(t){t.location={startOffset:NaN,startLine:NaN,startColumn:NaN,endOffset:NaN,endLine:NaN,endColumn:NaN}},t.prototype.setInitialNodeLocationFullRegular=function(t){var e=this.LA(1);t.location={startOffset:e.startOffset,startLine:e.startLine,startColumn:e.startColumn,endOffset:NaN,endLine:NaN,endColumn:NaN}},t.prototype.cstInvocationStateUpdate=function(t,e){var n={name:t,children:{}};this.setInitialNodeLocation(n),this.CST_STACK.push(n)},t.prototype.cstFinallyStateUpdate=function(){this.CST_STACK.pop()},t.prototype.cstPostRuleFull=function(t){var e=this.LA(0),n=t.location;n.startOffset<=e.startOffset==!0?(n.endOffset=e.endOffset,n.endLine=e.endLine,n.endColumn=e.endColumn):(n.startOffset=NaN,n.startLine=NaN,n.startColumn=NaN)},t.prototype.cstPostRuleOnlyOffset=function(t){var e=this.LA(0),n=t.location;n.startOffset<=e.startOffset==!0?n.endOffset=e.endOffset:n.startOffset=NaN},t.prototype.cstPostTerminal=function(t,e){var n,r,i,o=this.CST_STACK[this.CST_STACK.length-1];r=e,i=t,void 0===(n=o).children[i]?n.children[i]=[r]:n.children[i].push(r),this.setNodeLocationFromToken(o.location,e)},t.prototype.cstPostNonTerminal=function(t,e){var n=this.CST_STACK[this.CST_STACK.length-1];!function(t,e,n){void 0===t.children[e]?t.children[e]=[n]:t.children[e].push(n)}(n,e,t),this.setNodeLocationFromNode(n.location,t.location)},t.prototype.getBaseCstVisitorConstructor=function(){if(Object(i.F)(this.baseCstVisitorConstructor)){var t=Le(this.className,Object(i.G)(this.gastProductionsCache));return this.baseCstVisitorConstructor=t,t}return this.baseCstVisitorConstructor},t.prototype.getBaseCstVisitorConstructorWithDefaults=function(){if(Object(i.F)(this.baseCstVisitorWithDefaultsConstructor)){var t=function(t,e,n){var r=function(){};ke(r,t+"BaseSemanticsWithDefaults");var o=Object.create(n.prototype);return Object(i.u)(e,(function(t){o[t]=xe})),(r.prototype=o).constructor=r,r}(this.className,Object(i.G)(this.gastProductionsCache),this.getBaseCstVisitorConstructor());return this.baseCstVisitorWithDefaultsConstructor=t,t}return this.baseCstVisitorWithDefaultsConstructor},t.prototype.getLastExplicitRuleShortName=function(){var t=this.RULE_STACK;return t[t.length-1]},t.prototype.getPreviousExplicitRuleShortName=function(){var t=this.RULE_STACK;return t[t.length-2]},t.prototype.getLastExplicitRuleOccurrenceIndex=function(){var t=this.RULE_OCCURRENCE_STACK;return t[t.length-1]},t}(),we=function(){function t(){}return t.prototype.initLexerAdapter=function(){this.tokVector=[],this.tokVectorLength=0,this.currIdx=-1},Object.defineProperty(t.prototype,"input",{get:function(){return this.tokVector},set:function(t){if(!0!==this.selfAnalysisDone)throw Error("Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.");this.reset(),this.tokVector=t,this.tokVectorLength=t.length},enumerable:!0,configurable:!0}),t.prototype.SKIP_TOKEN=function(){return this.currIdx<=this.tokVector.length-2?(this.consumeToken(),this.LA(1)):Ze},t.prototype.LA=function(t){var e=this.currIdx+t;return e<0||this.tokVectorLength<=e?Ze:this.tokVector[e]},t.prototype.consumeToken=function(){this.currIdx++},t.prototype.exportLexerState=function(){return this.currIdx},t.prototype.importLexerState=function(t){this.currIdx=t},t.prototype.resetLexerState=function(){this.currIdx=-1},t.prototype.moveToTerminatedState=function(){this.currIdx=this.tokVector.length-1},t.prototype.getLexerPosition=function(){return this.exportLexerState()},t}(),Pe=function(){function t(){}return t.prototype.ACTION=function(t){return t.call(this)},t.prototype.consume=function(t,e,n){return this.consumeInternal(e,t,n)},t.prototype.subrule=function(t,e,n){return this.subruleInternal(e,t,n)},t.prototype.option=function(t,e){return this.optionInternal(e,t)},t.prototype.or=function(t,e){return this.orInternal(e,t)},t.prototype.many=function(t,e){return this.manyInternal(t,e)},t.prototype.atLeastOne=function(t,e){return this.atLeastOneInternal(t,e)},t.prototype.CONSUME=function(t,e){return this.consumeInternal(t,0,e)},t.prototype.CONSUME1=function(t,e){return this.consumeInternal(t,1,e)},t.prototype.CONSUME2=function(t,e){return this.consumeInternal(t,2,e)},t.prototype.CONSUME3=function(t,e){return this.consumeInternal(t,3,e)},t.prototype.CONSUME4=function(t,e){return this.consumeInternal(t,4,e)},t.prototype.CONSUME5=function(t,e){return this.consumeInternal(t,5,e)},t.prototype.CONSUME6=function(t,e){return this.consumeInternal(t,6,e)},t.prototype.CONSUME7=function(t,e){return this.consumeInternal(t,7,e)},t.prototype.CONSUME8=function(t,e){return this.consumeInternal(t,8,e)},t.prototype.CONSUME9=function(t,e){return this.consumeInternal(t,9,e)},t.prototype.SUBRULE=function(t,e){return this.subruleInternal(t,0,e)},t.prototype.SUBRULE1=function(t,e){return this.subruleInternal(t,1,e)},t.prototype.SUBRULE2=function(t,e){return this.subruleInternal(t,2,e)},t.prototype.SUBRULE3=function(t,e){return this.subruleInternal(t,3,e)},t.prototype.SUBRULE4=function(t,e){return this.subruleInternal(t,4,e)},t.prototype.SUBRULE5=function(t,e){return this.subruleInternal(t,5,e)},t.prototype.SUBRULE6=function(t,e){return this.subruleInternal(t,6,e)},t.prototype.SUBRULE7=function(t,e){return this.subruleInternal(t,7,e)},t.prototype.SUBRULE8=function(t,e){return this.subruleInternal(t,8,e)},t.prototype.SUBRULE9=function(t,e){return this.subruleInternal(t,9,e)},t.prototype.OPTION=function(t){return this.optionInternal(t,0)},t.prototype.OPTION1=function(t){return this.optionInternal(t,1)},t.prototype.OPTION2=function(t){return this.optionInternal(t,2)},t.prototype.OPTION3=function(t){return this.optionInternal(t,3)},t.prototype.OPTION4=function(t){return this.optionInternal(t,4)},t.prototype.OPTION5=function(t){return this.optionInternal(t,5)},t.prototype.OPTION6=function(t){return this.optionInternal(t,6)},t.prototype.OPTION7=function(t){return this.optionInternal(t,7)},t.prototype.OPTION8=function(t){return this.optionInternal(t,8)},t.prototype.OPTION9=function(t){return this.optionInternal(t,9)},t.prototype.OR=function(t){return this.orInternal(t,0)},t.prototype.OR1=function(t){return this.orInternal(t,1)},t.prototype.OR2=function(t){return this.orInternal(t,2)},t.prototype.OR3=function(t){return this.orInternal(t,3)},t.prototype.OR4=function(t){return this.orInternal(t,4)},t.prototype.OR5=function(t){return this.orInternal(t,5)},t.prototype.OR6=function(t){return this.orInternal(t,6)},t.prototype.OR7=function(t){return this.orInternal(t,7)},t.prototype.OR8=function(t){return this.orInternal(t,8)},t.prototype.OR9=function(t){return this.orInternal(t,9)},t.prototype.MANY=function(t){this.manyInternal(0,t)},t.prototype.MANY1=function(t){this.manyInternal(1,t)},t.prototype.MANY2=function(t){this.manyInternal(2,t)},t.prototype.MANY3=function(t){this.manyInternal(3,t)},t.prototype.MANY4=function(t){this.manyInternal(4,t)},t.prototype.MANY5=function(t){this.manyInternal(5,t)},t.prototype.MANY6=function(t){this.manyInternal(6,t)},t.prototype.MANY7=function(t){this.manyInternal(7,t)},t.prototype.MANY8=function(t){this.manyInternal(8,t)},t.prototype.MANY9=function(t){this.manyInternal(9,t)},t.prototype.MANY_SEP=function(t){this.manySepFirstInternal(0,t)},t.prototype.MANY_SEP1=function(t){this.manySepFirstInternal(1,t)},t.prototype.MANY_SEP2=function(t){this.manySepFirstInternal(2,t)},t.prototype.MANY_SEP3=function(t){this.manySepFirstInternal(3,t)},t.prototype.MANY_SEP4=function(t){this.manySepFirstInternal(4,t)},t.prototype.MANY_SEP5=function(t){this.manySepFirstInternal(5,t)},t.prototype.MANY_SEP6=function(t){this.manySepFirstInternal(6,t)},t.prototype.MANY_SEP7=function(t){this.manySepFirstInternal(7,t)},t.prototype.MANY_SEP8=function(t){this.manySepFirstInternal(8,t)},t.prototype.MANY_SEP9=function(t){this.manySepFirstInternal(9,t)},t.prototype.AT_LEAST_ONE=function(t){this.atLeastOneInternal(0,t)},t.prototype.AT_LEAST_ONE1=function(t){return this.atLeastOneInternal(1,t)},t.prototype.AT_LEAST_ONE2=function(t){this.atLeastOneInternal(2,t)},t.prototype.AT_LEAST_ONE3=function(t){this.atLeastOneInternal(3,t)},t.prototype.AT_LEAST_ONE4=function(t){this.atLeastOneInternal(4,t)},t.prototype.AT_LEAST_ONE5=function(t){this.atLeastOneInternal(5,t)},t.prototype.AT_LEAST_ONE6=function(t){this.atLeastOneInternal(6,t)},t.prototype.AT_LEAST_ONE7=function(t){this.atLeastOneInternal(7,t)},t.prototype.AT_LEAST_ONE8=function(t){this.atLeastOneInternal(8,t)},t.prototype.AT_LEAST_ONE9=function(t){this.atLeastOneInternal(9,t)},t.prototype.AT_LEAST_ONE_SEP=function(t){this.atLeastOneSepFirstInternal(0,t)},t.prototype.AT_LEAST_ONE_SEP1=function(t){this.atLeastOneSepFirstInternal(1,t)},t.prototype.AT_LEAST_ONE_SEP2=function(t){this.atLeastOneSepFirstInternal(2,t)},t.prototype.AT_LEAST_ONE_SEP3=function(t){this.atLeastOneSepFirstInternal(3,t)},t.prototype.AT_LEAST_ONE_SEP4=function(t){this.atLeastOneSepFirstInternal(4,t)},t.prototype.AT_LEAST_ONE_SEP5=function(t){this.atLeastOneSepFirstInternal(5,t)},t.prototype.AT_LEAST_ONE_SEP6=function(t){this.atLeastOneSepFirstInternal(6,t)},t.prototype.AT_LEAST_ONE_SEP7=function(t){this.atLeastOneSepFirstInternal(7,t)},t.prototype.AT_LEAST_ONE_SEP8=function(t){this.atLeastOneSepFirstInternal(8,t)},t.prototype.AT_LEAST_ONE_SEP9=function(t){this.atLeastOneSepFirstInternal(9,t)},t.prototype.RULE=function(t,e,n){if(void 0===n&&(n=tn),Object(i.j)(this.definedRulesNames,t)){var r={message:xt.buildDuplicateRuleNameError({topLevelRule:t,grammarName:this.className}),type:Je.DUPLICATE_RULE_NAME,ruleName:t};this.definitionErrors.push(r)}this.definedRulesNames.push(t);var o=this.defineRule(t,e,n);return this[t]=o,o},t.prototype.OVERRIDE_RULE=function(t,e,n){void 0===n&&(n=tn);var r,o,a,u,c,s=[];s=s.concat((r=t,o=this.definedRulesNames,a=this.className,c=[],i.j(o,r)||(u="Invalid rule override, rule: ->"+r+"<- cannot be overridden in the grammar: ->"+a+"<-as it is not defined in any of the super grammars ",c.push({message:u,type:Je.INVALID_RULE_OVERRIDE,ruleName:r})),c)),this.definitionErrors.push.apply(this.definitionErrors,s);var f=this.defineRule(t,e,n);return this[t]=f,f},t.prototype.BACKTRACK=function(t,e){return function(){this.isBackTrackingStack.push(1);var n=this.saveRecogState();try{return t.apply(this,e),!0}catch(t){if(pe(t))return!1;throw t}finally{this.reloadRecogState(n),this.isBackTrackingStack.pop()}}},t.prototype.getGAstProductions=function(){return this.gastProductionsCache},t.prototype.getSerializedGastProductions=function(){return dt(Object(i.U)(this.gastProductionsCache))},t}(),Me=function(){function t(){}return t.prototype.initRecognizerEngine=function(t,e){if(this.className=Se(this.constructor),this.shortRuleNameToFull={},this.fullRuleNameToShort={},this.ruleShortNameIdx=256,this.tokenMatcher=F,this.definedRulesNames=[],this.tokensMap={},this.isBackTrackingStack=[],this.RULE_STACK=[],this.RULE_OCCURRENCE_STACK=[],this.gastProductionsCache={},Object(i.w)(e,"serializedGrammar"))throw Error("The Parser's configuration can no longer contain a <serializedGrammar> property.\n\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_6-0-0\n\tFor Further details.");if(Object(i.y)(t)){if(Object(i.A)(t))throw Error("A Token Vocabulary cannot be empty.\n\tNote that the first argument for the parser constructor\n\tis no longer a Token vector (since v4.0).");if("number"==typeof t[0].startOffset)throw Error("The Parser constructor no longer accepts a token vector as the first argument.\n\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\n\tFor Further details.")}if(Object(i.y)(t))this.tokensMap=Object(i.O)(t,(function(t,e){return t[e.name]=e,t}),{});else if(Object(i.w)(t,"modes")&&Object(i.o)(Object(i.t)(Object(i.U)(t.modes)),z)){var n=Object(i.t)(Object(i.U)(t.modes)),r=Object(i.T)(n);this.tokensMap=Object(i.O)(r,(function(t,e){return t[e.name]=e,t}),{})}else{if(!Object(i.C)(t))throw new Error("<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition");this.tokensMap=Object(i.h)(t)}this.tokensMap.EOF=Q;var o=Object(i.o)(Object(i.U)(t),(function(t){return Object(i.A)(t.categoryMatches)}));this.tokenMatcher=o?F:U,W(Object(i.U)(this.tokensMap))},t.prototype.defineRule=function(t,e,n){if(this.selfAnalysisDone)throw Error("Grammar rule <"+t+"> may not be defined after the 'performSelfAnalysis' method has been called'\nMake sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.");var r,o=Object(i.w)(n,"resyncEnabled")?n.resyncEnabled:tn.resyncEnabled,a=Object(i.w)(n,"recoveryValueFunc")?n.recoveryValueFunc:tn.recoveryValueFunc,u=this.ruleShortNameIdx<<12;function c(t){try{if(!0===this.outputCst){e.apply(this,t);var n=this.CST_STACK[this.CST_STACK.length-1];return this.cstPostRule(n),n}return e.apply(this,t)}catch(t){return this.invokeRuleCatch(t,o,a)}finally{this.ruleFinallyStateUpdate()}}this.ruleShortNameIdx++,this.shortRuleNameToFull[u]=t,this.fullRuleNameToShort[t]=u;return(r=function(e,n){return void 0===e&&(e=0),this.ruleInvocationStateUpdate(u,t,e),c.call(this,n)}).ruleName=t,r.originalGrammarAction=e,r},t.prototype.invokeRuleCatch=function(t,e,n){var r=1===this.RULE_STACK.length,i=e&&!this.isBackTracking()&&this.recoveryEnabled;if(pe(t)){var o=t;if(i){var a,u=this.findReSyncTokenType();if(this.isInCurrentRuleReSyncSet(u))return o.resyncedTokens=this.reSyncTo(u),this.outputCst?((a=this.CST_STACK[this.CST_STACK.length-1]).recoveredNode=!0,a):n();throw this.outputCst&&((a=this.CST_STACK[this.CST_STACK.length-1]).recoveredNode=!0,o.partialCstResult=a),o}if(r)return this.moveToTerminatedState(),n();throw o}throw t},t.prototype.optionInternal=function(t,e){var n=this.getKeyForAutomaticLookahead(512,e);return this.optionInternalLogic(t,e,n)},t.prototype.optionInternalLogic=function(t,e,n){var r,i,o=this,a=this.getLaFuncFromCache(n);if(void 0!==t.DEF){if(r=t.DEF,void 0!==(i=t.GATE)){var u=a;a=function(){return i.call(o)&&u.call(o)}}}else r=t;if(!0===a.call(this))return r.call(this)},t.prototype.atLeastOneInternal=function(t,e){var n=this.getKeyForAutomaticLookahead(1024,t);return this.atLeastOneInternalLogic(t,e,n)},t.prototype.atLeastOneInternalLogic=function(t,e,n){var r,i,o=this,a=this.getLaFuncFromCache(n);if(void 0!==e.DEF){if(r=e.DEF,void 0!==(i=e.GATE)){var u=a;a=function(){return i.call(o)&&u.call(o)}}}else r=e;if(!0!==a.call(this))throw this.raiseEarlyExitException(t,Kt.REPETITION_MANDATORY,e.ERR_MSG);for(var c=this.doSingleRepetition(r);!0===a.call(this)&&!0===c;)c=this.doSingleRepetition(r);this.attemptInRepetitionRecovery(this.atLeastOneInternal,[t,e],a,1024,t,Ft)},t.prototype.atLeastOneSepFirstInternal=function(t,e){var n=this.getKeyForAutomaticLookahead(1536,t);this.atLeastOneSepFirstInternalLogic(t,e,n)},t.prototype.atLeastOneSepFirstInternalLogic=function(t,e,n){var r=this,i=e.DEF,o=e.SEP;if(!0!==this.getLaFuncFromCache(n).call(this))throw this.raiseEarlyExitException(t,Kt.REPETITION_MANDATORY_WITH_SEPARATOR,e.ERR_MSG);i.call(this);for(var a=function(){return r.tokenMatcher(r.LA(1),o)};!0===this.tokenMatcher(this.LA(1),o);)this.CONSUME(o),i.call(this);this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal,[t,o,a,i,Dt],a,1536,t,Dt)},t.prototype.manyInternal=function(t,e){var n=this.getKeyForAutomaticLookahead(768,t);return this.manyInternalLogic(t,e,n)},t.prototype.manyInternalLogic=function(t,e,n){var r,i,o=this,a=this.getLaFuncFromCache(n);if(void 0!==e.DEF){if(r=e.DEF,void 0!==(i=e.GATE)){var u=a;a=function(){return i.call(o)&&u.call(o)}}}else r=e;for(var c=!0;!0===a.call(this)&&!0===c;)c=this.doSingleRepetition(r);this.attemptInRepetitionRecovery(this.manyInternal,[t,e],a,768,t,Mt,c)},t.prototype.manySepFirstInternal=function(t,e){var n=this.getKeyForAutomaticLookahead(1280,t);this.manySepFirstInternalLogic(t,e,n)},t.prototype.manySepFirstInternalLogic=function(t,e,n){var r=this,i=e.DEF,o=e.SEP;if(!0===this.getLaFuncFromCache(n).call(this)){i.call(this);for(var a=function(){return r.tokenMatcher(r.LA(1),o)};!0===this.tokenMatcher(this.LA(1),o);)this.CONSUME(o),i.call(this);this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal,[t,o,a,i,Ut],a,1280,t,Ut)}},t.prototype.repetitionSepSecondInternal=function(t,e,n,r,i){for(;n();)this.CONSUME(e),r.call(this);this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal,[t,e,n,r,i],n,1536,t,i)},t.prototype.doSingleRepetition=function(t){var e=this.getLexerPosition();return t.call(this),this.getLexerPosition()>e},t.prototype.orInternal=function(t,e){var n=this.getKeyForAutomaticLookahead(256,e),r=Object(i.y)(t)?t:t.DEF,o=this.getLaFuncFromCache(n).call(this,r);if(void 0!==o)return r[o].ALT.call(this);this.raiseNoAltException(e,t.ERR_MSG)},t.prototype.ruleFinallyStateUpdate=function(){if(this.RULE_STACK.pop(),this.RULE_OCCURRENCE_STACK.pop(),this.cstFinallyStateUpdate(),0===this.RULE_STACK.length&&!1===this.isAtEndOfInput()){var t=this.LA(1),e=this.errorMessageProvider.buildNotAllInputParsedMessage({firstRedundant:t,ruleName:this.getCurrRuleFullName()});this.SAVE_ERROR(new ye(e,t))}},t.prototype.subruleInternal=function(t,e,n){var r;try{var i=void 0!==n?n.ARGS:void 0;return r=t.call(this,e,i),this.cstPostNonTerminal(r,void 0!==n&&void 0!==n.LABEL?n.LABEL:t.ruleName),r}catch(e){this.subruleInternalError(e,n,t.ruleName)}},t.prototype.subruleInternalError=function(t,e,n){throw pe(t)&&void 0!==t.partialCstResult&&(this.cstPostNonTerminal(t.partialCstResult,void 0!==e&&void 0!==e.LABEL?e.LABEL:n),delete t.partialCstResult),t},t.prototype.consumeInternal=function(t,e,n){var r;try{var i=this.LA(1);!0===this.tokenMatcher(i,t)?(this.consumeToken(),r=i):this.consumeInternalError(t,i,n)}catch(n){r=this.consumeInternalRecovery(t,e,n)}return this.cstPostTerminal(void 0!==n&&void 0!==n.LABEL?n.LABEL:t.name,r),r},t.prototype.consumeInternalError=function(t,e,n){var r,i=this.LA(0);throw r=void 0!==n&&n.ERR_MSG?n.ERR_MSG:this.errorMessageProvider.buildMismatchTokenMessage({expected:t,actual:e,previous:i,ruleName:this.getCurrRuleFullName()}),this.SAVE_ERROR(new de(r,e,i))},t.prototype.consumeInternalRecovery=function(t,e,n){if(!this.recoveryEnabled||"MismatchedTokenException"!==n.name||this.isBackTracking())throw n;var r=this.getFollowsForInRuleRecovery(t,e);try{return this.tryInRuleRecovery(t,r)}catch(t){throw"InRuleRecoveryException"===t.name?n:t}},t.prototype.saveRecogState=function(){var t=this.errors,e=Object(i.g)(this.RULE_STACK);return{errors:t,lexerState:this.exportLexerState(),RULE_STACK:e,CST_STACK:this.CST_STACK}},t.prototype.reloadRecogState=function(t){this.errors=t.errors,this.importLexerState(t.lexerState),this.RULE_STACK=t.RULE_STACK},t.prototype.ruleInvocationStateUpdate=function(t,e,n){this.RULE_OCCURRENCE_STACK.push(n),this.RULE_STACK.push(t),this.cstInvocationStateUpdate(e,t)},t.prototype.isBackTracking=function(){return 0!==this.isBackTrackingStack.length},t.prototype.getCurrRuleFullName=function(){var t=this.getLastExplicitRuleShortName();return this.shortRuleNameToFull[t]},t.prototype.shortRuleNameToFullName=function(t){return this.shortRuleNameToFull[t]},t.prototype.isAtEndOfInput=function(){return this.tokenMatcher(this.LA(1),Q)},t.prototype.reset=function(){this.resetLexerState(),this.isBackTrackingStack=[],this.errors=[],this.RULE_STACK=[],this.CST_STACK=[],this.RULE_OCCURRENCE_STACK=[]},t}(),Ue=function(){function t(){}return t.prototype.initErrorHandler=function(t){this._errors=[],this.errorMessageProvider=Object(i.w)(t,"errorMessageProvider")?t.errorMessageProvider:Qe.errorMessageProvider},t.prototype.SAVE_ERROR=function(t){if(pe(t))return t.context={ruleStack:this.getHumanReadableRuleStack(),ruleOccurrenceStack:Object(i.g)(this.RULE_OCCURRENCE_STACK)},this._errors.push(t),t;throw Error("Trying to save an Error which is not a RecognitionException")},Object.defineProperty(t.prototype,"errors",{get:function(){return Object(i.g)(this._errors)},set:function(t){this._errors=t},enumerable:!0,configurable:!0}),t.prototype.raiseEarlyExitException=function(t,e,n){for(var r=this.getCurrRuleFullName(),i=Jt(t,this.getGAstProductions()[r],e,this.maxLookahead)[0],o=[],a=1;a<=this.maxLookahead;a++)o.push(this.LA(a));var u=this.errorMessageProvider.buildEarlyExitMessage({expectedIterationPaths:i,actual:o,previous:this.LA(0),customUserDescription:n,ruleName:r});throw this.SAVE_ERROR(new ge(u,this.LA(1),this.LA(0)))},t.prototype.raiseNoAltException=function(t,e){for(var n=this.getCurrRuleFullName(),r=Zt(t,this.getGAstProductions()[n],this.maxLookahead),i=[],o=1;o<=this.maxLookahead;o++)i.push(this.LA(o));var a=this.LA(0),u=this.errorMessageProvider.buildNoViableAltMessage({expectedPathsPerAlt:r,actual:i,previous:a,customUserDescription:e,ruleName:this.getCurrRuleFullName()});throw this.SAVE_ERROR(new ve(u,this.LA(1),a))},t}(),Fe=function(){function t(){}return t.prototype.initContentAssist=function(){},t.prototype.computeContentAssist=function(t,e){var n=this.gastProductionsCache[t];if(Object(i.F)(n))throw Error("Rule ->"+t+"<- does not exist in this grammar.");return Wt([n],e,this.tokenMatcher,this.maxLookahead)},t.prototype.getNextPossibleTokenTypes=function(t){var e=Object(i.s)(t.ruleStack),n=this.getGAstProductions()[e];return new wt(n,t).startWalking()},t}(),De={description:"This Object indicates the Parser is during Recording Phase"};Object.freeze(De);var Be=Math.pow(2,8)-1,We=J({name:"RECORDING_PHASE_TOKEN",pattern:$.NA});W([We]);var Ge=tt(We,"This IToken indicates the Parser is in Recording Phase\n\tSee: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details",-1,-1,-1,-1,-1,-1);Object.freeze(Ge);var Ke={name:"This CSTNode indicates the Parser is in Recording Phase\n\tSee: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details",children:{}},ze=function(){function t(){}return t.prototype.initGastRecorder=function(t){this.recordingProdStack=[],this.RECORDING_PHASE=!1},t.prototype.enableRecording=function(){var t=this;this.RECORDING_PHASE=!0,this.TRACE_INIT("Enable Recording",(function(){for(var e=function(e){var n=e>0?e:"";t["CONSUME"+n]=function(t,n){return this.consumeInternalRecord(t,e,n)},t["SUBRULE"+n]=function(t,n){return this.subruleInternalRecord(t,e,n)},t["OPTION"+n]=function(t){return this.optionInternalRecord(t,e)},t["OR"+n]=function(t){return this.orInternalRecord(t,e)},t["MANY"+n]=function(t){this.manyInternalRecord(e,t)},t["MANY_SEP"+n]=function(t){this.manySepFirstInternalRecord(e,t)},t["AT_LEAST_ONE"+n]=function(t){this.atLeastOneInternalRecord(e,t)},t["AT_LEAST_ONE_SEP"+n]=function(t){this.atLeastOneSepFirstInternalRecord(e,t)}},n=0;n<10;n++)e(n);t.consume=function(t,e,n){return this.consumeInternalRecord(e,t,n)},t.subrule=function(t,e,n){return this.subruleInternalRecord(e,t,n)},t.option=function(t,e){return this.optionInternalRecord(e,t)},t.or=function(t,e){return this.orInternalRecord(e,t)},t.many=function(t,e){this.manyInternalRecord(t,e)},t.atLeastOne=function(t,e){this.atLeastOneInternalRecord(t,e)},t.ACTION=t.ACTION_RECORD,t.BACKTRACK=t.BACKTRACK_RECORD,t.LA=t.LA_RECORD}))},t.prototype.disableRecording=function(){var t=this;this.RECORDING_PHASE=!1,this.TRACE_INIT("Deleting Recording methods",(function(){for(var e=0;e<10;e++){var n=e>0?e:"";delete t["CONSUME"+n],delete t["SUBRULE"+n],delete t["OPTION"+n],delete t["OR"+n],delete t["MANY"+n],delete t["MANY_SEP"+n],delete t["AT_LEAST_ONE"+n],delete t["AT_LEAST_ONE_SEP"+n]}delete t.consume,delete t.subrule,delete t.option,delete t.or,delete t.many,delete t.atLeastOne,delete t.ACTION,delete t.BACKTRACK,delete t.LA}))},t.prototype.ACTION_RECORD=function(t){},t.prototype.BACKTRACK_RECORD=function(t,e){return function(){return!0}},t.prototype.LA_RECORD=function(t){return Ze},t.prototype.topLevelRuleRecord=function(t,e){try{var n=new ot({definition:[],name:t});return n.name=t,this.recordingProdStack.push(n),e.call(this),this.recordingProdStack.pop(),n}catch(t){if(!0!==t.KNOWN_RECORDER_ERROR)try{t.message=t.message+'\n\t This error was thrown during the "grammar recording phase" For more info see:\n\thttps://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording'}catch(e){throw t}throw t}},t.prototype.optionInternalRecord=function(t,e){return Ve.call(this,ut,t,e)},t.prototype.atLeastOneInternalRecord=function(t,e){Ve.call(this,ct,e,t)},t.prototype.atLeastOneSepFirstInternalRecord=function(t,e){Ve.call(this,st,e,t,!0)},t.prototype.manyInternalRecord=function(t,e){Ve.call(this,ft,e,t)},t.prototype.manySepFirstInternalRecord=function(t,e){Ve.call(this,lt,e,t,!0)},t.prototype.orInternalRecord=function(t,e){return He.call(this,t,e)},t.prototype.subruleInternalRecord=function(t,e,n){if($e(e),!t||!1===Object(i.w)(t,"ruleName")){var r=new Error("<SUBRULE"+Ye(e)+"> argument is invalid expecting a Parser method reference but got: <"+JSON.stringify(t)+">\n inside top level rule: <"+this.recordingProdStack[0].name+">");throw r.KNOWN_RECORDER_ERROR=!0,r}var o=Object(i.M)(this.recordingProdStack),a=t.ruleName,u=new it({idx:e,nonTerminalName:a,referencedRule:void 0});return o.definition.push(u),this.outputCst?Ke:De},t.prototype.consumeInternalRecord=function(t,e,n){if($e(e),!G(t)){var r=new Error("<CONSUME"+Ye(e)+"> argument is invalid expecting a TokenType reference but got: <"+JSON.stringify(t)+">\n inside top level rule: <"+this.recordingProdStack[0].name+">");throw r.KNOWN_RECORDER_ERROR=!0,r}var o=Object(i.M)(this.recordingProdStack),a=new pt({idx:e,terminalType:t});return o.definition.push(a),Ge},t}();function Ve(t,e,n,r){void 0===r&&(r=!1),$e(n);var o=Object(i.M)(this.recordingProdStack),a=Object(i.B)(e)?e:e.DEF,u=new t({definition:[],idx:n});return r&&(u.separator=e.SEP),Object(i.w)(e,"MAX_LOOKAHEAD")&&(u.maxLookahead=e.MAX_LOOKAHEAD),this.recordingProdStack.push(u),a.call(this),o.definition.push(u),this.recordingProdStack.pop(),De}function He(t,e){var n=this;$e(e);var r=Object(i.M)(this.recordingProdStack),o=!1===Object(i.y)(t),a=!1===o?t:t.DEF,u=new ht({definition:[],idx:e,ignoreAmbiguities:o&&!0===t.IGNORE_AMBIGUITIES});Object(i.w)(t,"MAX_LOOKAHEAD")&&(u.maxLookahead=t.MAX_LOOKAHEAD);var c=Object(i.Q)(a,(function(t){return Object(i.B)(t.GATE)}));return u.hasPredicates=c,r.definition.push(u),Object(i.u)(a,(function(t){var e=new at({definition:[]});u.definition.push(e),Object(i.w)(t,"IGNORE_AMBIGUITIES")?e.ignoreAmbiguities=t.IGNORE_AMBIGUITIES:Object(i.w)(t,"GATE")&&(e.ignoreAmbiguities=!0),n.recordingProdStack.push(e),t.ALT.call(n),n.recordingProdStack.pop()})),De}function Ye(t){return 0===t?"":""+t}function $e(t){if(t<0||t>Be){var e=new Error("Invalid DSL Method idx value: <"+t+">\n\tIdx value must be a none negative value smaller than "+(Be+1));throw e.KNOWN_RECORDER_ERROR=!0,e}}var qe=function(){function t(){}return t.prototype.initPerformanceTracer=function(t){if(Object(i.w)(t,"traceInitPerf")){var e=t.traceInitPerf,n="number"==typeof e;this.traceInitMaxIdent=n?e:1/0,this.traceInitPerf=n?e>0:e}else this.traceInitMaxIdent=0,this.traceInitPerf=Qe.traceInitPerf;this.traceInitIndent=-1},t.prototype.TRACE_INIT=function(t,e){if(!0===this.traceInitPerf){this.traceInitIndent++;var n=new Array(this.traceInitIndent+1).join("\t");this.traceInitIndent<this.traceInitMaxIdent&&console.log(n+"--\x3e <"+t+">");var r=Object(i.R)(e),o=r.time,a=r.value,u=o>10?console.warn:console.log;return this.traceInitIndent<this.traceInitMaxIdent&&u(n+"<-- <"+t+"> time: "+o+"ms"),this.traceInitIndent--,a}return e()},t}(),Xe=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ze=tt(Q,"",NaN,NaN,NaN,NaN,NaN,NaN);Object.freeze(Ze);var Je,Qe=Object.freeze({recoveryEnabled:!1,maxLookahead:3,dynamicTokensEnabled:!1,outputCst:!0,errorMessageProvider:St,nodeLocationTracking:"none",traceInitPerf:!1,skipValidations:!1}),tn=Object.freeze({recoveryValueFunc:function(){},resyncEnabled:!0});function en(t){return void 0===t&&(t=void 0),function(){return t}}!function(t){t[t.INVALID_RULE_NAME=0]="INVALID_RULE_NAME",t[t.DUPLICATE_RULE_NAME=1]="DUPLICATE_RULE_NAME",t[t.INVALID_RULE_OVERRIDE=2]="INVALID_RULE_OVERRIDE",t[t.DUPLICATE_PRODUCTIONS=3]="DUPLICATE_PRODUCTIONS",t[t.UNRESOLVED_SUBRULE_REF=4]="UNRESOLVED_SUBRULE_REF",t[t.LEFT_RECURSION=5]="LEFT_RECURSION",t[t.NONE_LAST_EMPTY_ALT=6]="NONE_LAST_EMPTY_ALT",t[t.AMBIGUOUS_ALTS=7]="AMBIGUOUS_ALTS",t[t.CONFLICT_TOKENS_RULES_NAMESPACE=8]="CONFLICT_TOKENS_RULES_NAMESPACE",t[t.INVALID_TOKEN_NAME=9]="INVALID_TOKEN_NAME",t[t.NO_NON_EMPTY_LOOKAHEAD=10]="NO_NON_EMPTY_LOOKAHEAD",t[t.AMBIGUOUS_PREFIX_ALTS=11]="AMBIGUOUS_PREFIX_ALTS",t[t.TOO_MANY_ALTS=12]="TOO_MANY_ALTS"}(Je||(Je={}));var nn=function(){function t(t,e){this.definitionErrors=[],this.selfAnalysisDone=!1;if(this.initErrorHandler(e),this.initLexerAdapter(),this.initLooksAhead(e),this.initRecognizerEngine(t,e),this.initRecoverable(e),this.initTreeBuilder(e),this.initContentAssist(),this.initGastRecorder(e),this.initPerformanceTracer(e),Object(i.w)(e,"ignoredIssues"))throw new Error("The <ignoredIssues> IParserConfig property has been deprecated.\n\tPlease use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\n\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\n\tFor further details.");this.skipValidations=Object(i.w)(e,"skipValidations")?e.skipValidations:Qe.skipValidations}return t.performSelfAnalysis=function(t){throw Error("The **static** `performSelfAnalysis` method has been deprecated.\t\nUse the **instance** method with the same name instead.")},t.prototype.performSelfAnalysis=function(){var e=this;this.TRACE_INIT("performSelfAnalysis",(function(){var n;e.selfAnalysisDone=!0;var r=e.className;e.TRACE_INIT("toFastProps",(function(){Object(i.S)(e)})),e.TRACE_INIT("Grammar Recording",(function(){try{e.enableRecording(),Object(i.u)(e.definedRulesNames,(function(t){var n=e[t].originalGrammarAction,r=void 0;e.TRACE_INIT(t+" Rule",(function(){r=e.topLevelRuleRecord(t,n)})),e.gastProductionsCache[t]=r}))}finally{e.disableRecording()}}));var o=[];if(e.TRACE_INIT("Grammar Resolving",(function(){o=se({rules:Object(i.U)(e.gastProductionsCache)}),e.definitionErrors.push.apply(e.definitionErrors,o)})),e.TRACE_INIT("Grammar Validations",(function(){if(Object(i.A)(o)&&!1===e.skipValidations){var t=fe({rules:Object(i.U)(e.gastProductionsCache),maxLookahead:e.maxLookahead,tokenTypes:Object(i.U)(e.tokensMap),errMsgProvider:xt,grammarName:r});e.definitionErrors.push.apply(e.definitionErrors,t)}})),Object(i.A)(e.definitionErrors)&&(e.recoveryEnabled&&e.TRACE_INIT("computeAllProdsFollows",(function(){var t,n,r=(t=Object(i.U)(e.gastProductionsCache),n={},Object(i.u)(t,(function(t){var e=new Nt(t).startWalking();Object(i.f)(n,e)})),n);e.resyncFollows=r})),e.TRACE_INIT("ComputeLookaheadFunctions",(function(){e.preComputeLookaheadFunctions(Object(i.U)(e.gastProductionsCache))}))),!t.DEFER_DEFINITION_ERRORS_HANDLING&&!Object(i.A)(e.definitionErrors))throw n=Object(i.I)(e.definitionErrors,(function(t){return t.message})),new Error("Parser Definition Errors detected:\n "+n.join("\n-------------------------------\n"))}))},t.DEFER_DEFINITION_ERRORS_HANDLING=!1,t}();Object(i.e)(nn,[Oe,be,Ce,we,Me,Pe,Ue,Fe,ze,qe]);var rn=function(t){function e(e,n){void 0===n&&(n=Qe);var r=Object(i.h)(n);return r.outputCst=!0,t.call(this,e,r)||this}return Xe(e,t),e}(nn),on=function(t){function e(e,n){void 0===n&&(n=Qe);var r=Object(i.h)(n);return r.outputCst=!1,t.call(this,e,r)||this}return Xe(e,t),e}(nn);function an(t,e){var n=void 0===e?{}:e,i=n.resourceBase,o=void 0===i?"https://unpkg.com/chevrotain@"+r+"/diagrams/":i,a=n.css;return'\n\x3c!-- This is a generated file --\x3e\n<!DOCTYPE html>\n<meta charset="utf-8">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n'+("\n<link rel='stylesheet' href='"+(void 0===a?"https://unpkg.com/chevrotain@"+r+"/diagrams/diagrams.css":a)+"'>\n")+("\n<script src='"+o+"vendor/railroad-diagrams.js'><\/script>\n<script src='"+o+"src/diagrams_builder.js'><\/script>\n<script src='"+o+"src/diagrams_behavior.js'><\/script>\n<script src='"+o+"src/main.js'><\/script>\n")+'\n<div id="diagrams" align="center"></div>    \n'+("\n<script>\n    window.serializedGrammar = "+JSON.stringify(t,null,"  ")+";\n<\/script>\n")+'\n<script>\n    var diagramsDiv = document.getElementById("diagrams");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n<\/script>\n'}var un="\n";function cn(t){var e;return"\nfunction "+t.name+"(tokenVocabulary, config) {\n    // invoke super constructor\n    // No support for embedded actions currently, so we can 'hardcode'\n    // The use of CstParser.\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\n\n    const $ = this\n\n    "+(e=t.rules,Object(i.I)(e,(function(t){return r=dn(n=1,'$.RULE("'+(e=t).name+'", function() {')+un,r+=pn(e.definition,n+1),r+=dn(n+1,"})")+un;var e,n,r})).join("\n")+"\n\n    // very important to call this after all the rules have been defined.\n    // otherwise the parser may not work correctly as it will lack information\n    // derived during the self analysis phase.\n    this.performSelfAnalysis(this)\n}\n\n// inheritance as implemented in javascript in the previous decade... :(\n")+t.name+".prototype = Object.create(chevrotain.CstParser.prototype)\n"+t.name+".prototype.constructor = "+t.name+"    \n    "}function sn(t,e){var n=dn(e,"$.OR"+t.idx+"([")+un,r=Object(i.I)(t.definition,(function(t){return function(t,e){var n=dn(e,"{")+un;return n+=dn(e+1,"ALT: function() {")+un,n+=pn(t.definition,e+1),n+=dn(e+1,"}")+un,n+=dn(e,"}")}(t,e+1)}));return n+=r.join(",\n"),n+=un+dn(e,"])\n")}function fn(t,e){if(t instanceof it)return function(t,e){return dn(e,"$.SUBRULE"+t.idx+"($."+t.nonTerminalName+")"+un)}(t,e);if(t instanceof ut)return ln("OPTION",t,e);if(t instanceof ct)return ln("AT_LEAST_ONE",t,e);if(t instanceof st)return ln("AT_LEAST_ONE_SEP",t,e);if(t instanceof lt)return ln("MANY_SEP",t,e);if(t instanceof ft)return ln("MANY",t,e);if(t instanceof ht)return sn(t,e);if(t instanceof pt)return function(t,e){var n=t.terminalType.name;return dn(e,"$.CONSUME"+t.idx+"(this.tokensMap."+n+")"+un)}(t,e);if(t instanceof at)return pn(t.definition,e);throw Error("non exhaustive match")}function ln(t,e,n){var r=dn(n,"$."+(t+e.idx)+"(");return e.separator?(r+="{\n",r+=dn(n+1,"SEP: this.tokensMap."+e.separator.name)+","+un,r+="DEF: "+hn(e.definition,n+2)+un,r+=dn(n,"}")+un):r+=hn(e.definition,n+1),r+=dn(n,")")+un}function hn(t,e){var n="function() {\n";return n+=pn(t,e),n+=dn(e,"}")+un}function pn(t,e){var n="";return Object(i.u)(t,(function(t){n+=fn(t,e+1)})),n}function dn(t,e){return Array(4*t+1).join(" ")+e}function vn(t){var e=function(t){return"    \n"+cn(t)+"\nreturn new "+t.name+"(tokenVocabulary, config)    \n"}({name:t.name,rules:t.rules}),r=new Function("tokenVocabulary","config","chevrotain",e);return function(e){return r(t.tokenVocabulary,e,n(2))}}function yn(t){return function(t){return"\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['chevrotain'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('chevrotain'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.b);\n    }\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\n\n"+cn(t)+"\n    \nreturn {\n    "+t.name+": "+t.name+" \n}\n}));\n"}({name:t.name,rules:t.rules})}function gn(){console.warn("The clearCache function was 'soft' removed from the Chevrotain API.\n\t It performs no action other than printing this message.\n\t Please avoid using it as it will be completely removed in the future")}var mn=function(){throw new Error("The Parser class has been deprecated, use CstParser or EmbeddedActionsParser instead.\t\nSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_7-0-0")}},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o="Expected a function",a="__lodash_placeholder__",u=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],c="[object Arguments]",s="[object Array]",f="[object Boolean]",l="[object Date]",h="[object Error]",p="[object Function]",d="[object GeneratorFunction]",v="[object Map]",y="[object Number]",g="[object Object]",m="[object RegExp]",_="[object Set]",O="[object String]",E="[object Symbol]",T="[object WeakMap]",b="[object ArrayBuffer]",A="[object DataView]",I="[object Float32Array]",R="[object Float64Array]",N="[object Int8Array]",S="[object Int16Array]",k="[object Int32Array]",x="[object Uint8Array]",L="[object Uint16Array]",j="[object Uint32Array]",C=/\b__p \+= '';/g,w=/\b(__p \+=) '' \+/g,P=/(__e\(.*?\)|\b__t\)) \+\n'';/g,M=/&(?:amp|lt|gt|quot|#39);/g,U=/[&<>"']/g,F=RegExp(M.source),D=RegExp(U.source),B=/<%-([\s\S]+?)%>/g,W=/<%([\s\S]+?)%>/g,G=/<%=([\s\S]+?)%>/g,K=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,z=/^\w*$/,V=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,H=/[\\^$.*+?()[\]{}|]/g,Y=RegExp(H.source),$=/^\s+|\s+$/g,q=/^\s+/,X=/\s+$/,Z=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,J=/\{\n\/\* \[wrapped with (.+)\] \*/,Q=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,nt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,it=/^[-+]0x[0-9a-f]+$/i,ot=/^0b[01]+$/i,at=/^\[object .+?Constructor\]$/,ut=/^0o[0-7]+$/i,ct=/^(?:0|[1-9]\d*)$/,st=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ft=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",pt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",dt="[\\ud800-\\udfff]",vt="["+pt+"]",yt="["+ht+"]",gt="\\d+",mt="[\\u2700-\\u27bf]",_t="[a-z\\xdf-\\xf6\\xf8-\\xff]",Ot="[^\\ud800-\\udfff"+pt+gt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",Et="\\ud83c[\\udffb-\\udfff]",Tt="[^\\ud800-\\udfff]",bt="(?:\\ud83c[\\udde6-\\uddff]){2}",At="[\\ud800-\\udbff][\\udc00-\\udfff]",It="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Rt="(?:"+_t+"|"+Ot+")",Nt="(?:"+It+"|"+Ot+")",St="(?:"+yt+"|"+Et+")"+"?",kt="[\\ufe0e\\ufe0f]?"+St+("(?:\\u200d(?:"+[Tt,bt,At].join("|")+")[\\ufe0e\\ufe0f]?"+St+")*"),xt="(?:"+[mt,bt,At].join("|")+")"+kt,Lt="(?:"+[Tt+yt+"?",yt,bt,At,dt].join("|")+")",jt=RegExp("['’]","g"),Ct=RegExp(yt,"g"),wt=RegExp(Et+"(?="+Et+")|"+Lt+kt,"g"),Pt=RegExp([It+"?"+_t+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[vt,It,"$"].join("|")+")",Nt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[vt,It+Rt,"$"].join("|")+")",It+"?"+Rt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",It+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",gt,xt].join("|"),"g"),Mt=RegExp("[\\u200d\\ud800-\\udfff"+ht+"\\ufe0e\\ufe0f]"),Ut=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ft=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Dt=-1,Bt={};Bt[I]=Bt[R]=Bt[N]=Bt[S]=Bt[k]=Bt[x]=Bt["[object Uint8ClampedArray]"]=Bt[L]=Bt[j]=!0,Bt[c]=Bt[s]=Bt[b]=Bt[f]=Bt[A]=Bt[l]=Bt[h]=Bt[p]=Bt[v]=Bt[y]=Bt[g]=Bt[m]=Bt[_]=Bt[O]=Bt[T]=!1;var Wt={};Wt[c]=Wt[s]=Wt[b]=Wt[A]=Wt[f]=Wt[l]=Wt[I]=Wt[R]=Wt[N]=Wt[S]=Wt[k]=Wt[v]=Wt[y]=Wt[g]=Wt[m]=Wt[_]=Wt[O]=Wt[E]=Wt[x]=Wt["[object Uint8ClampedArray]"]=Wt[L]=Wt[j]=!0,Wt[h]=Wt[p]=Wt[T]=!1;var Gt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Kt=parseFloat,zt=parseInt,Vt="object"==typeof t&&t&&t.Object===Object&&t,Ht="object"==typeof self&&self&&self.Object===Object&&self,Yt=Vt||Ht||Function("return this")(),$t=e&&!e.nodeType&&e,qt=$t&&"object"==typeof r&&r&&!r.nodeType&&r,Xt=qt&&qt.exports===$t,Zt=Xt&&Vt.process,Jt=function(){try{var t=qt&&qt.require&&qt.require("util").types;return t||Zt&&Zt.binding&&Zt.binding("util")}catch(t){}}(),Qt=Jt&&Jt.isArrayBuffer,te=Jt&&Jt.isDate,ee=Jt&&Jt.isMap,ne=Jt&&Jt.isRegExp,re=Jt&&Jt.isSet,ie=Jt&&Jt.isTypedArray;function oe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function ae(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function ue(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function ce(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function se(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function fe(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function le(t,e){return!!(null==t?0:t.length)&&Ee(t,e,0)>-1}function he(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function pe(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function de(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function ve(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function ye(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function ge(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var me=Ie("length");function _e(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function Oe(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Ee(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):Oe(t,be,n)}function Te(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function be(t){return t!=t}function Ae(t,e){var n=null==t?0:t.length;return n?Se(t,e)/n:NaN}function Ie(t){return function(e){return null==e?void 0:e[t]}}function Re(t){return function(e){return null==t?void 0:t[e]}}function Ne(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function Se(t,e){for(var n,r=-1,i=t.length;++r<i;){var o=e(t[r]);void 0!==o&&(n=void 0===n?o:n+o)}return n}function ke(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function xe(t){return function(e){return t(e)}}function Le(t,e){return pe(e,(function(e){return t[e]}))}function je(t,e){return t.has(e)}function Ce(t,e){for(var n=-1,r=t.length;++n<r&&Ee(e,t[n],0)>-1;);return n}function we(t,e){for(var n=t.length;n--&&Ee(e,t[n],0)>-1;);return n}function Pe(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var Me=Re({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Ue=Re({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Fe(t){return"\\"+Gt[t]}function De(t){return Mt.test(t)}function Be(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function We(t,e){return function(n){return t(e(n))}}function Ge(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var u=t[n];u!==e&&u!==a||(t[n]=a,o[i++]=n)}return o}function Ke(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function ze(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function Ve(t){return De(t)?function(t){var e=wt.lastIndex=0;for(;wt.test(t);)++e;return e}(t):me(t)}function He(t){return De(t)?function(t){return t.match(wt)||[]}(t):function(t){return t.split("")}(t)}var Ye=Re({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var $e=function t(e){var n,r=(e=null==e?Yt:$e.defaults(Yt.Object(),e,$e.pick(Yt,Ft))).Array,i=e.Date,ht=e.Error,pt=e.Function,dt=e.Math,vt=e.Object,yt=e.RegExp,gt=e.String,mt=e.TypeError,_t=r.prototype,Ot=pt.prototype,Et=vt.prototype,Tt=e["__core-js_shared__"],bt=Ot.toString,At=Et.hasOwnProperty,It=0,Rt=(n=/[^.]+$/.exec(Tt&&Tt.keys&&Tt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Nt=Et.toString,St=bt.call(vt),kt=Yt._,xt=yt("^"+bt.call(At).replace(H,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Lt=Xt?e.Buffer:void 0,wt=e.Symbol,Mt=e.Uint8Array,Gt=Lt?Lt.allocUnsafe:void 0,Vt=We(vt.getPrototypeOf,vt),Ht=vt.create,$t=Et.propertyIsEnumerable,qt=_t.splice,Zt=wt?wt.isConcatSpreadable:void 0,Jt=wt?wt.iterator:void 0,me=wt?wt.toStringTag:void 0,Re=function(){try{var t=Qi(vt,"defineProperty");return t({},"",{}),t}catch(t){}}(),qe=e.clearTimeout!==Yt.clearTimeout&&e.clearTimeout,Xe=i&&i.now!==Yt.Date.now&&i.now,Ze=e.setTimeout!==Yt.setTimeout&&e.setTimeout,Je=dt.ceil,Qe=dt.floor,tn=vt.getOwnPropertySymbols,en=Lt?Lt.isBuffer:void 0,nn=e.isFinite,rn=_t.join,on=We(vt.keys,vt),an=dt.max,un=dt.min,cn=i.now,sn=e.parseInt,fn=dt.random,ln=_t.reverse,hn=Qi(e,"DataView"),pn=Qi(e,"Map"),dn=Qi(e,"Promise"),vn=Qi(e,"Set"),yn=Qi(e,"WeakMap"),gn=Qi(vt,"create"),mn=yn&&new yn,_n={},On=No(hn),En=No(pn),Tn=No(dn),bn=No(vn),An=No(yn),In=wt?wt.prototype:void 0,Rn=In?In.valueOf:void 0,Nn=In?In.toString:void 0;function Sn(t){if(za(t)&&!Ca(t)&&!(t instanceof jn)){if(t instanceof Ln)return t;if(At.call(t,"__wrapped__"))return So(t)}return new Ln(t)}var kn=function(){function t(){}return function(e){if(!Ka(e))return{};if(Ht)return Ht(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function xn(){}function Ln(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function jn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Cn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function wn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Pn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Mn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Pn;++e<n;)this.add(t[e])}function Un(t){var e=this.__data__=new wn(t);this.size=e.size}function Fn(t,e){var n=Ca(t),r=!n&&ja(t),i=!n&&!r&&Ua(t),o=!n&&!r&&!i&&Ja(t),a=n||r||i||o,u=a?ke(t.length,gt):[],c=u.length;for(var s in t)!e&&!At.call(t,s)||a&&("length"==s||i&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||ao(s,c))||u.push(s);return u}function Dn(t){var e=t.length;return e?t[Mr(0,e-1)]:void 0}function Bn(t,e){return Ao(gi(t),qn(e,0,t.length))}function Wn(t){return Ao(gi(t))}function Gn(t,e,n){(void 0!==n&&!ka(t[e],n)||void 0===n&&!(e in t))&&Yn(t,e,n)}function Kn(t,e,n){var r=t[e];At.call(t,e)&&ka(r,n)&&(void 0!==n||e in t)||Yn(t,e,n)}function zn(t,e){for(var n=t.length;n--;)if(ka(t[n][0],e))return n;return-1}function Vn(t,e,n,r){return tr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function Hn(t,e){return t&&mi(e,Ou(e),t)}function Yn(t,e,n){"__proto__"==e&&Re?Re(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function $n(t,e){for(var n=-1,i=e.length,o=r(i),a=null==t;++n<i;)o[n]=a?void 0:vu(t,e[n]);return o}function qn(t,e,n){return t==t&&(void 0!==n&&(t=t<=n?t:n),void 0!==e&&(t=t>=e?t:e)),t}function Xn(t,e,n,r,i,o){var a,u=1&e,s=2&e,h=4&e;if(n&&(a=i?n(t,r,i,o):n(t)),void 0!==a)return a;if(!Ka(t))return t;var T=Ca(t);if(T){if(a=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&At.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!u)return gi(t,a)}else{var C=no(t),w=C==p||C==d;if(Ua(t))return li(t,u);if(C==g||C==c||w&&!i){if(a=s||w?{}:io(t),!u)return s?function(t,e){return mi(t,eo(t),e)}(t,function(t,e){return t&&mi(e,Eu(e),t)}(a,t)):function(t,e){return mi(t,to(t),e)}(t,Hn(a,t))}else{if(!Wt[C])return i?t:{};a=function(t,e,n){var r=t.constructor;switch(e){case b:return hi(t);case f:case l:return new r(+t);case A:return function(t,e){var n=e?hi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case I:case R:case N:case S:case k:case x:case"[object Uint8ClampedArray]":case L:case j:return pi(t,n);case v:return new r;case y:case O:return new r(t);case m:return function(t){var e=new t.constructor(t.source,rt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case _:return new r;case E:return i=t,Rn?vt(Rn.call(i)):{}}var i}(t,C,u)}}o||(o=new Un);var P=o.get(t);if(P)return P;o.set(t,a),qa(t)?t.forEach((function(r){a.add(Xn(r,e,n,r,t,o))})):Va(t)&&t.forEach((function(r,i){a.set(i,Xn(r,e,n,i,t,o))}));var M=T?void 0:(h?s?Hi:Vi:s?Eu:Ou)(t);return ue(M||t,(function(r,i){M&&(r=t[i=r]),Kn(a,i,Xn(r,e,n,i,t,o))})),a}function Zn(t,e,n){var r=n.length;if(null==t)return!r;for(t=vt(t);r--;){var i=n[r],o=e[i],a=t[i];if(void 0===a&&!(i in t)||!o(a))return!1}return!0}function Jn(t,e,n){if("function"!=typeof t)throw new mt(o);return Oo((function(){t.apply(void 0,n)}),e)}function Qn(t,e,n,r){var i=-1,o=le,a=!0,u=t.length,c=[],s=e.length;if(!u)return c;n&&(e=pe(e,xe(n))),r?(o=he,a=!1):e.length>=200&&(o=je,a=!1,e=new Mn(e));t:for(;++i<u;){var f=t[i],l=null==n?f:n(f);if(f=r||0!==f?f:0,a&&l==l){for(var h=s;h--;)if(e[h]===l)continue t;c.push(f)}else o(e,l,r)||c.push(f)}return c}Sn.templateSettings={escape:B,evaluate:W,interpolate:G,variable:"",imports:{_:Sn}},Sn.prototype=xn.prototype,Sn.prototype.constructor=Sn,Ln.prototype=kn(xn.prototype),Ln.prototype.constructor=Ln,jn.prototype=kn(xn.prototype),jn.prototype.constructor=jn,Cn.prototype.clear=function(){this.__data__=gn?gn(null):{},this.size=0},Cn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Cn.prototype.get=function(t){var e=this.__data__;if(gn){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return At.call(e,t)?e[t]:void 0},Cn.prototype.has=function(t){var e=this.__data__;return gn?void 0!==e[t]:At.call(e,t)},Cn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=gn&&void 0===e?"__lodash_hash_undefined__":e,this},wn.prototype.clear=function(){this.__data__=[],this.size=0},wn.prototype.delete=function(t){var e=this.__data__,n=zn(e,t);return!(n<0)&&(n==e.length-1?e.pop():qt.call(e,n,1),--this.size,!0)},wn.prototype.get=function(t){var e=this.__data__,n=zn(e,t);return n<0?void 0:e[n][1]},wn.prototype.has=function(t){return zn(this.__data__,t)>-1},wn.prototype.set=function(t,e){var n=this.__data__,r=zn(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Pn.prototype.clear=function(){this.size=0,this.__data__={hash:new Cn,map:new(pn||wn),string:new Cn}},Pn.prototype.delete=function(t){var e=Zi(this,t).delete(t);return this.size-=e?1:0,e},Pn.prototype.get=function(t){return Zi(this,t).get(t)},Pn.prototype.has=function(t){return Zi(this,t).has(t)},Pn.prototype.set=function(t,e){var n=Zi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Mn.prototype.add=Mn.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Mn.prototype.has=function(t){return this.__data__.has(t)},Un.prototype.clear=function(){this.__data__=new wn,this.size=0},Un.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Un.prototype.get=function(t){return this.__data__.get(t)},Un.prototype.has=function(t){return this.__data__.has(t)},Un.prototype.set=function(t,e){var n=this.__data__;if(n instanceof wn){var r=n.__data__;if(!pn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Pn(r)}return n.set(t,e),this.size=n.size,this};var tr=Ei(cr),er=Ei(sr,!0);function nr(t,e){var n=!0;return tr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function rr(t,e,n){for(var r=-1,i=t.length;++r<i;){var o=t[r],a=e(o);if(null!=a&&(void 0===u?a==a&&!Za(a):n(a,u)))var u=a,c=o}return c}function ir(t,e){var n=[];return tr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function or(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=oo),i||(i=[]);++o<a;){var u=t[o];e>0&&n(u)?e>1?or(u,e-1,n,r,i):de(i,u):r||(i[i.length]=u)}return i}var ar=Ti(),ur=Ti(!0);function cr(t,e){return t&&ar(t,e,Ou)}function sr(t,e){return t&&ur(t,e,Ou)}function fr(t,e){return fe(e,(function(e){return Ba(t[e])}))}function lr(t,e){for(var n=0,r=(e=ui(e,t)).length;null!=t&&n<r;)t=t[Ro(e[n++])];return n&&n==r?t:void 0}function hr(t,e,n){var r=e(t);return Ca(t)?r:de(r,n(t))}function pr(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":me&&me in vt(t)?function(t){var e=At.call(t,me),n=t[me];try{t[me]=void 0;var r=!0}catch(t){}var i=Nt.call(t);r&&(e?t[me]=n:delete t[me]);return i}(t):function(t){return Nt.call(t)}(t)}function dr(t,e){return t>e}function vr(t,e){return null!=t&&At.call(t,e)}function yr(t,e){return null!=t&&e in vt(t)}function gr(t,e,n){for(var i=n?he:le,o=t[0].length,a=t.length,u=a,c=r(a),s=1/0,f=[];u--;){var l=t[u];u&&e&&(l=pe(l,xe(e))),s=un(l.length,s),c[u]=!n&&(e||o>=120&&l.length>=120)?new Mn(u&&l):void 0}l=t[0];var h=-1,p=c[0];t:for(;++h<o&&f.length<s;){var d=l[h],v=e?e(d):d;if(d=n||0!==d?d:0,!(p?je(p,v):i(f,v,n))){for(u=a;--u;){var y=c[u];if(!(y?je(y,v):i(t[u],v,n)))continue t}p&&p.push(v),f.push(d)}}return f}function mr(t,e,n){var r=null==(t=yo(t,e=ui(e,t)))?t:t[Ro(Do(e))];return null==r?void 0:oe(r,t,n)}function _r(t){return za(t)&&pr(t)==c}function Or(t,e,n,r,i){return t===e||(null==t||null==e||!za(t)&&!za(e)?t!=t&&e!=e:function(t,e,n,r,i,o){var a=Ca(t),u=Ca(e),p=a?s:no(t),d=u?s:no(e),T=(p=p==c?g:p)==g,I=(d=d==c?g:d)==g,R=p==d;if(R&&Ua(t)){if(!Ua(e))return!1;a=!0,T=!1}if(R&&!T)return o||(o=new Un),a||Ja(t)?Ki(t,e,n,r,i,o):function(t,e,n,r,i,o,a){switch(n){case A:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case b:return!(t.byteLength!=e.byteLength||!o(new Mt(t),new Mt(e)));case f:case l:case y:return ka(+t,+e);case h:return t.name==e.name&&t.message==e.message;case m:case O:return t==e+"";case v:var u=Be;case _:var c=1&r;if(u||(u=Ke),t.size!=e.size&&!c)return!1;var s=a.get(t);if(s)return s==e;r|=2,a.set(t,e);var p=Ki(u(t),u(e),r,i,o,a);return a.delete(t),p;case E:if(Rn)return Rn.call(t)==Rn.call(e)}return!1}(t,e,p,n,r,i,o);if(!(1&n)){var N=T&&At.call(t,"__wrapped__"),S=I&&At.call(e,"__wrapped__");if(N||S){var k=N?t.value():t,x=S?e.value():e;return o||(o=new Un),i(k,x,n,r,o)}}if(!R)return!1;return o||(o=new Un),function(t,e,n,r,i,o){var a=1&n,u=Vi(t),c=u.length,s=Vi(e).length;if(c!=s&&!a)return!1;var f=c;for(;f--;){var l=u[f];if(!(a?l in e:At.call(e,l)))return!1}var h=o.get(t);if(h&&o.get(e))return h==e;var p=!0;o.set(t,e),o.set(e,t);var d=a;for(;++f<c;){l=u[f];var v=t[l],y=e[l];if(r)var g=a?r(y,v,l,e,t,o):r(v,y,l,t,e,o);if(!(void 0===g?v===y||i(v,y,n,r,o):g)){p=!1;break}d||(d="constructor"==l)}if(p&&!d){var m=t.constructor,_=e.constructor;m==_||!("constructor"in t)||!("constructor"in e)||"function"==typeof m&&m instanceof m&&"function"==typeof _&&_ instanceof _||(p=!1)}return o.delete(t),o.delete(e),p}(t,e,n,r,i,o)}(t,e,n,r,Or,i))}function Er(t,e,n,r){var i=n.length,o=i,a=!r;if(null==t)return!o;for(t=vt(t);i--;){var u=n[i];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<o;){var c=(u=n[i])[0],s=t[c],f=u[1];if(a&&u[2]){if(void 0===s&&!(c in t))return!1}else{var l=new Un;if(r)var h=r(s,f,c,t,e,l);if(!(void 0===h?Or(f,s,3,r,l):h))return!1}}return!0}function Tr(t){return!(!Ka(t)||(e=t,Rt&&Rt in e))&&(Ba(t)?xt:at).test(No(t));var e}function br(t){return"function"==typeof t?t:null==t?Hu:"object"==typeof t?Ca(t)?kr(t[0],t[1]):Sr(t):ec(t)}function Ar(t){if(!lo(t))return on(t);var e=[];for(var n in vt(t))At.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Ir(t){if(!Ka(t))return function(t){var e=[];if(null!=t)for(var n in vt(t))e.push(n);return e}(t);var e=lo(t),n=[];for(var r in t)("constructor"!=r||!e&&At.call(t,r))&&n.push(r);return n}function Rr(t,e){return t<e}function Nr(t,e){var n=-1,i=Pa(t)?r(t.length):[];return tr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function Sr(t){var e=Ji(t);return 1==e.length&&e[0][2]?po(e[0][0],e[0][1]):function(n){return n===t||Er(n,t,e)}}function kr(t,e){return co(t)&&ho(e)?po(Ro(t),e):function(n){var r=vu(n,t);return void 0===r&&r===e?yu(n,t):Or(e,r,3)}}function xr(t,e,n,r,i){t!==e&&ar(e,(function(o,a){if(i||(i=new Un),Ka(o))!function(t,e,n,r,i,o,a){var u=mo(t,n),c=mo(e,n),s=a.get(c);if(s)return void Gn(t,n,s);var f=o?o(u,c,n+"",t,e,a):void 0,l=void 0===f;if(l){var h=Ca(c),p=!h&&Ua(c),d=!h&&!p&&Ja(c);f=c,h||p||d?Ca(u)?f=u:Ma(u)?f=gi(u):p?(l=!1,f=li(c,!0)):d?(l=!1,f=pi(c,!0)):f=[]:Ya(c)||ja(c)?(f=u,ja(u)?f=au(u):Ka(u)&&!Ba(u)||(f=io(c))):l=!1}l&&(a.set(c,f),i(f,c,r,o,a),a.delete(c));Gn(t,n,f)}(t,e,a,n,xr,r,i);else{var u=r?r(mo(t,a),o,a+"",t,e,i):void 0;void 0===u&&(u=o),Gn(t,a,u)}}),Eu)}function Lr(t,e){var n=t.length;if(n)return ao(e+=e<0?n:0,n)?t[e]:void 0}function jr(t,e,n){var r=-1;return e=pe(e.length?e:[Hu],xe(Xi())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(Nr(t,(function(t,n,i){return{criteria:pe(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){var r=-1,i=t.criteria,o=e.criteria,a=i.length,u=n.length;for(;++r<a;){var c=di(i[r],o[r]);if(c){if(r>=u)return c;var s=n[r];return c*("desc"==s?-1:1)}}return t.index-e.index}(t,e,n)}))}function Cr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],u=lr(t,a);n(u,a)&&Wr(o,ui(a,t),u)}return o}function wr(t,e,n,r){var i=r?Te:Ee,o=-1,a=e.length,u=t;for(t===e&&(e=gi(e)),n&&(u=pe(t,xe(n)));++o<a;)for(var c=0,s=e[o],f=n?n(s):s;(c=i(u,f,c,r))>-1;)u!==t&&qt.call(u,c,1),qt.call(t,c,1);return t}function Pr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;ao(i)?qt.call(t,i,1):Qr(t,i)}}return t}function Mr(t,e){return t+Qe(fn()*(e-t+1))}function Ur(t,e){var n="";if(!t||e<1||e>9007199254740991)return n;do{e%2&&(n+=t),(e=Qe(e/2))&&(t+=t)}while(e);return n}function Fr(t,e){return Eo(vo(t,e,Hu),t+"")}function Dr(t){return Dn(ku(t))}function Br(t,e){var n=ku(t);return Ao(n,qn(e,0,n.length))}function Wr(t,e,n,r){if(!Ka(t))return t;for(var i=-1,o=(e=ui(e,t)).length,a=o-1,u=t;null!=u&&++i<o;){var c=Ro(e[i]),s=n;if(i!=a){var f=u[c];void 0===(s=r?r(f,c,u):void 0)&&(s=Ka(f)?f:ao(e[i+1])?[]:{})}Kn(u,c,s),u=u[c]}return t}var Gr=mn?function(t,e){return mn.set(t,e),t}:Hu,Kr=Re?function(t,e){return Re(t,"toString",{configurable:!0,enumerable:!1,value:Ku(e),writable:!0})}:Hu;function zr(t){return Ao(ku(t))}function Vr(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var a=r(o);++i<o;)a[i]=t[i+e];return a}function Hr(t,e){var n;return tr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function Yr(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!Za(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return $r(t,e,Hu,n)}function $r(t,e,n,r){e=n(e);for(var i=0,o=null==t?0:t.length,a=e!=e,u=null===e,c=Za(e),s=void 0===e;i<o;){var f=Qe((i+o)/2),l=n(t[f]),h=void 0!==l,p=null===l,d=l==l,v=Za(l);if(a)var y=r||d;else y=s?d&&(r||h):u?d&&h&&(r||!p):c?d&&h&&!p&&(r||!v):!p&&!v&&(r?l<=e:l<e);y?i=f+1:o=f}return un(o,4294967294)}function qr(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!ka(u,c)){var c=u;o[i++]=0===a?0:a}}return o}function Xr(t){return"number"==typeof t?t:Za(t)?NaN:+t}function Zr(t){if("string"==typeof t)return t;if(Ca(t))return pe(t,Zr)+"";if(Za(t))return Nn?Nn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Jr(t,e,n){var r=-1,i=le,o=t.length,a=!0,u=[],c=u;if(n)a=!1,i=he;else if(o>=200){var s=e?null:Ui(t);if(s)return Ke(s);a=!1,i=je,c=new Mn}else c=e?[]:u;t:for(;++r<o;){var f=t[r],l=e?e(f):f;if(f=n||0!==f?f:0,a&&l==l){for(var h=c.length;h--;)if(c[h]===l)continue t;e&&c.push(l),u.push(f)}else i(c,l,n)||(c!==u&&c.push(l),u.push(f))}return u}function Qr(t,e){return null==(t=yo(t,e=ui(e,t)))||delete t[Ro(Do(e))]}function ti(t,e,n,r){return Wr(t,e,n(lr(t,e)),r)}function ei(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Vr(t,r?0:o,r?o+1:i):Vr(t,r?o+1:0,r?i:o)}function ni(t,e){var n=t;return n instanceof jn&&(n=n.value()),ve(e,(function(t,e){return e.func.apply(e.thisArg,de([t],e.args))}),n)}function ri(t,e,n){var i=t.length;if(i<2)return i?Jr(t[0]):[];for(var o=-1,a=r(i);++o<i;)for(var u=t[o],c=-1;++c<i;)c!=o&&(a[o]=Qn(a[o]||u,t[c],e,n));return Jr(or(a,1),e,n)}function ii(t,e,n){for(var r=-1,i=t.length,o=e.length,a={};++r<i;){var u=r<o?e[r]:void 0;n(a,t[r],u)}return a}function oi(t){return Ma(t)?t:[]}function ai(t){return"function"==typeof t?t:Hu}function ui(t,e){return Ca(t)?t:co(t,e)?[t]:Io(uu(t))}var ci=Fr;function si(t,e,n){var r=t.length;return n=void 0===n?r:n,!e&&n>=r?t:Vr(t,e,n)}var fi=qe||function(t){return Yt.clearTimeout(t)};function li(t,e){if(e)return t.slice();var n=t.length,r=Gt?Gt(n):new t.constructor(n);return t.copy(r),r}function hi(t){var e=new t.constructor(t.byteLength);return new Mt(e).set(new Mt(t)),e}function pi(t,e){var n=e?hi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function di(t,e){if(t!==e){var n=void 0!==t,r=null===t,i=t==t,o=Za(t),a=void 0!==e,u=null===e,c=e==e,s=Za(e);if(!u&&!s&&!o&&t>e||o&&a&&c&&!u&&!s||r&&a&&c||!n&&c||!i)return 1;if(!r&&!o&&!s&&t<e||s&&n&&i&&!r&&!o||u&&n&&i||!a&&i||!c)return-1}return 0}function vi(t,e,n,i){for(var o=-1,a=t.length,u=n.length,c=-1,s=e.length,f=an(a-u,0),l=r(s+f),h=!i;++c<s;)l[c]=e[c];for(;++o<u;)(h||o<a)&&(l[n[o]]=t[o]);for(;f--;)l[c++]=t[o++];return l}function yi(t,e,n,i){for(var o=-1,a=t.length,u=-1,c=n.length,s=-1,f=e.length,l=an(a-c,0),h=r(l+f),p=!i;++o<l;)h[o]=t[o];for(var d=o;++s<f;)h[d+s]=e[s];for(;++u<c;)(p||o<a)&&(h[d+n[u]]=t[o++]);return h}function gi(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function mi(t,e,n,r){var i=!n;n||(n={});for(var o=-1,a=e.length;++o<a;){var u=e[o],c=r?r(n[u],t[u],u,n,t):void 0;void 0===c&&(c=t[u]),i?Yn(n,u,c):Kn(n,u,c)}return n}function _i(t,e){return function(n,r){var i=Ca(n)?ae:Vn,o=e?e():{};return i(n,t,Xi(r,2),o)}}function Oi(t){return Fr((function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:void 0,a=i>2?n[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,a&&uo(n[0],n[1],a)&&(o=i<3?void 0:o,i=1),e=vt(e);++r<i;){var u=n[r];u&&t(e,u,r,o)}return e}))}function Ei(t,e){return function(n,r){if(null==n)return n;if(!Pa(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=vt(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Ti(t){return function(e,n,r){for(var i=-1,o=vt(e),a=r(e),u=a.length;u--;){var c=a[t?u:++i];if(!1===n(o[c],c,o))break}return e}}function bi(t){return function(e){var n=De(e=uu(e))?He(e):void 0,r=n?n[0]:e.charAt(0),i=n?si(n,1).join(""):e.slice(1);return r[t]()+i}}function Ai(t){return function(e){return ve(Bu(ju(e).replace(jt,"")),t,"")}}function Ii(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=kn(t.prototype),r=t.apply(n,e);return Ka(r)?r:n}}function Ri(t){return function(e,n,r){var i=vt(e);if(!Pa(e)){var o=Xi(n,3);e=Ou(e),n=function(t){return o(i[t],t,i)}}var a=t(e,n,r);return a>-1?i[o?e[a]:a]:void 0}}function Ni(t){return zi((function(e){var n=e.length,r=n,i=Ln.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new mt(o);if(i&&!u&&"wrapper"==$i(a))var u=new Ln([],!0)}for(r=u?r:n;++r<n;){var c=$i(a=e[r]),s="wrapper"==c?Yi(a):void 0;u=s&&so(s[0])&&424==s[1]&&!s[4].length&&1==s[9]?u[$i(s[0])].apply(u,s[3]):1==a.length&&so(a)?u[c]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&Ca(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function Si(t,e,n,i,o,a,u,c,s,f){var l=128&e,h=1&e,p=2&e,d=24&e,v=512&e,y=p?void 0:Ii(t);return function g(){for(var m=arguments.length,_=r(m),O=m;O--;)_[O]=arguments[O];if(d)var E=qi(g),T=Pe(_,E);if(i&&(_=vi(_,i,o,d)),a&&(_=yi(_,a,u,d)),m-=T,d&&m<f){var b=Ge(_,E);return Pi(t,e,Si,g.placeholder,n,_,b,c,s,f-m)}var A=h?n:this,I=p?A[t]:t;return m=_.length,c?_=go(_,c):v&&m>1&&_.reverse(),l&&s<m&&(_.length=s),this&&this!==Yt&&this instanceof g&&(I=y||Ii(I)),I.apply(A,_)}}function ki(t,e){return function(n,r){return function(t,e,n,r){return cr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function xi(t,e){return function(n,r){var i;if(void 0===n&&void 0===r)return e;if(void 0!==n&&(i=n),void 0!==r){if(void 0===i)return r;"string"==typeof n||"string"==typeof r?(n=Zr(n),r=Zr(r)):(n=Xr(n),r=Xr(r)),i=t(n,r)}return i}}function Li(t){return zi((function(e){return e=pe(e,xe(Xi())),Fr((function(n){var r=this;return t(e,(function(t){return oe(t,r,n)}))}))}))}function ji(t,e){var n=(e=void 0===e?" ":Zr(e)).length;if(n<2)return n?Ur(e,t):e;var r=Ur(e,Je(t/Ve(e)));return De(e)?si(He(r),0,t).join(""):r.slice(0,t)}function Ci(t){return function(e,n,i){return i&&"number"!=typeof i&&uo(e,n,i)&&(n=i=void 0),e=nu(e),void 0===n?(n=e,e=0):n=nu(n),function(t,e,n,i){for(var o=-1,a=an(Je((e-t)/(n||1)),0),u=r(a);a--;)u[i?a:++o]=t,t+=n;return u}(e,n,i=void 0===i?e<n?1:-1:nu(i),t)}}function wi(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ou(e),n=ou(n)),t(e,n)}}function Pi(t,e,n,r,i,o,a,u,c,s){var f=8&e;e|=f?32:64,4&(e&=~(f?64:32))||(e&=-4);var l=[t,e,i,f?o:void 0,f?a:void 0,f?void 0:o,f?void 0:a,u,c,s],h=n.apply(void 0,l);return so(t)&&_o(h,l),h.placeholder=r,To(h,t,e)}function Mi(t){var e=dt[t];return function(t,n){if(t=ou(t),(n=null==n?0:un(ru(n),292))&&nn(t)){var r=(uu(t)+"e").split("e");return+((r=(uu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Ui=vn&&1/Ke(new vn([,-0]))[1]==1/0?function(t){return new vn(t)}:Zu;function Fi(t){return function(e){var n=no(e);return n==v?Be(e):n==_?ze(e):function(t,e){return pe(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Di(t,e,n,i,u,c,s,f){var l=2&e;if(!l&&"function"!=typeof t)throw new mt(o);var h=i?i.length:0;if(h||(e&=-97,i=u=void 0),s=void 0===s?s:an(ru(s),0),f=void 0===f?f:ru(f),h-=u?u.length:0,64&e){var p=i,d=u;i=u=void 0}var v=l?void 0:Yi(t),y=[t,e,n,i,u,p,d,c,s,f];if(v&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,u=128==r&&8==n||128==r&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!o&&!u)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var c=e[3];if(c){var s=t[3];t[3]=s?vi(s,c,e[4]):c,t[4]=s?Ge(t[3],a):e[4]}(c=e[5])&&(s=t[5],t[5]=s?yi(s,c,e[6]):c,t[6]=s?Ge(t[5],a):e[6]);(c=e[7])&&(t[7]=c);128&r&&(t[8]=null==t[8]?e[8]:un(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=i}(y,v),t=y[0],e=y[1],n=y[2],i=y[3],u=y[4],!(f=y[9]=void 0===y[9]?l?0:t.length:an(y[9]-h,0))&&24&e&&(e&=-25),e&&1!=e)g=8==e||16==e?function(t,e,n){var i=Ii(t);return function o(){for(var a=arguments.length,u=r(a),c=a,s=qi(o);c--;)u[c]=arguments[c];var f=a<3&&u[0]!==s&&u[a-1]!==s?[]:Ge(u,s);if((a-=f.length)<n)return Pi(t,e,Si,o.placeholder,void 0,u,f,void 0,void 0,n-a);var l=this&&this!==Yt&&this instanceof o?i:t;return oe(l,this,u)}}(t,e,f):32!=e&&33!=e||u.length?Si.apply(void 0,y):function(t,e,n,i){var o=1&e,a=Ii(t);return function e(){for(var u=-1,c=arguments.length,s=-1,f=i.length,l=r(f+c),h=this&&this!==Yt&&this instanceof e?a:t;++s<f;)l[s]=i[s];for(;c--;)l[s++]=arguments[++u];return oe(h,o?n:this,l)}}(t,e,n,i);else var g=function(t,e,n){var r=1&e,i=Ii(t);return function e(){var o=this&&this!==Yt&&this instanceof e?i:t;return o.apply(r?n:this,arguments)}}(t,e,n);return To((v?Gr:_o)(g,y),t,e)}function Bi(t,e,n,r){return void 0===t||ka(t,Et[n])&&!At.call(r,n)?e:t}function Wi(t,e,n,r,i,o){return Ka(t)&&Ka(e)&&(o.set(e,t),xr(t,e,void 0,Wi,o),o.delete(e)),t}function Gi(t){return Ya(t)?void 0:t}function Ki(t,e,n,r,i,o){var a=1&n,u=t.length,c=e.length;if(u!=c&&!(a&&c>u))return!1;var s=o.get(t);if(s&&o.get(e))return s==e;var f=-1,l=!0,h=2&n?new Mn:void 0;for(o.set(t,e),o.set(e,t);++f<u;){var p=t[f],d=e[f];if(r)var v=a?r(d,p,f,e,t,o):r(p,d,f,t,e,o);if(void 0!==v){if(v)continue;l=!1;break}if(h){if(!ge(e,(function(t,e){if(!je(h,e)&&(p===t||i(p,t,n,r,o)))return h.push(e)}))){l=!1;break}}else if(p!==d&&!i(p,d,n,r,o)){l=!1;break}}return o.delete(t),o.delete(e),l}function zi(t){return Eo(vo(t,void 0,wo),t+"")}function Vi(t){return hr(t,Ou,to)}function Hi(t){return hr(t,Eu,eo)}var Yi=mn?function(t){return mn.get(t)}:Zu;function $i(t){for(var e=t.name+"",n=_n[e],r=At.call(_n,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function qi(t){return(At.call(Sn,"placeholder")?Sn:t).placeholder}function Xi(){var t=Sn.iteratee||Yu;return t=t===Yu?br:t,arguments.length?t(arguments[0],arguments[1]):t}function Zi(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Ji(t){for(var e=Ou(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,ho(i)]}return e}function Qi(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return Tr(n)?n:void 0}var to=tn?function(t){return null==t?[]:(t=vt(t),fe(tn(t),(function(e){return $t.call(t,e)})))}:ic,eo=tn?function(t){for(var e=[];t;)de(e,to(t)),t=Vt(t);return e}:ic,no=pr;function ro(t,e,n){for(var r=-1,i=(e=ui(e,t)).length,o=!1;++r<i;){var a=Ro(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Ga(i)&&ao(a,i)&&(Ca(t)||ja(t))}function io(t){return"function"!=typeof t.constructor||lo(t)?{}:kn(Vt(t))}function oo(t){return Ca(t)||ja(t)||!!(Zt&&t&&t[Zt])}function ao(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&ct.test(t))&&t>-1&&t%1==0&&t<e}function uo(t,e,n){if(!Ka(n))return!1;var r=typeof e;return!!("number"==r?Pa(n)&&ao(e,n.length):"string"==r&&e in n)&&ka(n[e],t)}function co(t,e){if(Ca(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Za(t))||(z.test(t)||!K.test(t)||null!=e&&t in vt(e))}function so(t){var e=$i(t),n=Sn[e];if("function"!=typeof n||!(e in jn.prototype))return!1;if(t===n)return!0;var r=Yi(n);return!!r&&t===r[0]}(hn&&no(new hn(new ArrayBuffer(1)))!=A||pn&&no(new pn)!=v||dn&&"[object Promise]"!=no(dn.resolve())||vn&&no(new vn)!=_||yn&&no(new yn)!=T)&&(no=function(t){var e=pr(t),n=e==g?t.constructor:void 0,r=n?No(n):"";if(r)switch(r){case On:return A;case En:return v;case Tn:return"[object Promise]";case bn:return _;case An:return T}return e});var fo=Tt?Ba:oc;function lo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Et)}function ho(t){return t==t&&!Ka(t)}function po(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in vt(n)))}}function vo(t,e,n){return e=an(void 0===e?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=an(i.length-e,0),u=r(a);++o<a;)u[o]=i[e+o];o=-1;for(var c=r(e+1);++o<e;)c[o]=i[o];return c[e]=n(u),oe(t,this,c)}}function yo(t,e){return e.length<2?t:lr(t,Vr(e,0,-1))}function go(t,e){for(var n=t.length,r=un(e.length,n),i=gi(t);r--;){var o=e[r];t[r]=ao(o,n)?i[o]:void 0}return t}function mo(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var _o=bo(Gr),Oo=Ze||function(t,e){return Yt.setTimeout(t,e)},Eo=bo(Kr);function To(t,e,n){var r=e+"";return Eo(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Z,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return ue(u,(function(n){var r="_."+n[0];e&n[1]&&!le(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(J);return e?e[1].split(Q):[]}(r),n)))}function bo(t){var e=0,n=0;return function(){var r=cn(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function Ao(t,e){var n=-1,r=t.length,i=r-1;for(e=void 0===e?r:e;++n<e;){var o=Mr(n,i),a=t[o];t[o]=t[n],t[n]=a}return t.length=e,t}var Io=function(t){var e=ba(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(V,(function(t,n,r,i){e.push(r?i.replace(et,"$1"):n||t)})),e}));function Ro(t){if("string"==typeof t||Za(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function No(t){if(null!=t){try{return bt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function So(t){if(t instanceof jn)return t.clone();var e=new Ln(t.__wrapped__,t.__chain__);return e.__actions__=gi(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ko=Fr((function(t,e){return Ma(t)?Qn(t,or(e,1,Ma,!0)):[]})),xo=Fr((function(t,e){var n=Do(e);return Ma(n)&&(n=void 0),Ma(t)?Qn(t,or(e,1,Ma,!0),Xi(n,2)):[]})),Lo=Fr((function(t,e){var n=Do(e);return Ma(n)&&(n=void 0),Ma(t)?Qn(t,or(e,1,Ma,!0),void 0,n):[]}));function jo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ru(n);return i<0&&(i=an(r+i,0)),Oe(t,Xi(e,3),i)}function Co(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return void 0!==n&&(i=ru(n),i=n<0?an(r+i,0):un(i,r-1)),Oe(t,Xi(e,3),i,!0)}function wo(t){return(null==t?0:t.length)?or(t,1):[]}function Po(t){return t&&t.length?t[0]:void 0}var Mo=Fr((function(t){var e=pe(t,oi);return e.length&&e[0]===t[0]?gr(e):[]})),Uo=Fr((function(t){var e=Do(t),n=pe(t,oi);return e===Do(n)?e=void 0:n.pop(),n.length&&n[0]===t[0]?gr(n,Xi(e,2)):[]})),Fo=Fr((function(t){var e=Do(t),n=pe(t,oi);return(e="function"==typeof e?e:void 0)&&n.pop(),n.length&&n[0]===t[0]?gr(n,void 0,e):[]}));function Do(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var Bo=Fr(Wo);function Wo(t,e){return t&&t.length&&e&&e.length?wr(t,e):t}var Go=zi((function(t,e){var n=null==t?0:t.length,r=$n(t,e);return Pr(t,pe(e,(function(t){return ao(t,n)?+t:t})).sort(di)),r}));function Ko(t){return null==t?t:ln.call(t)}var zo=Fr((function(t){return Jr(or(t,1,Ma,!0))})),Vo=Fr((function(t){var e=Do(t);return Ma(e)&&(e=void 0),Jr(or(t,1,Ma,!0),Xi(e,2))})),Ho=Fr((function(t){var e=Do(t);return e="function"==typeof e?e:void 0,Jr(or(t,1,Ma,!0),void 0,e)}));function Yo(t){if(!t||!t.length)return[];var e=0;return t=fe(t,(function(t){if(Ma(t))return e=an(t.length,e),!0})),ke(e,(function(e){return pe(t,Ie(e))}))}function $o(t,e){if(!t||!t.length)return[];var n=Yo(t);return null==e?n:pe(n,(function(t){return oe(e,void 0,t)}))}var qo=Fr((function(t,e){return Ma(t)?Qn(t,e):[]})),Xo=Fr((function(t){return ri(fe(t,Ma))})),Zo=Fr((function(t){var e=Do(t);return Ma(e)&&(e=void 0),ri(fe(t,Ma),Xi(e,2))})),Jo=Fr((function(t){var e=Do(t);return e="function"==typeof e?e:void 0,ri(fe(t,Ma),void 0,e)})),Qo=Fr(Yo);var ta=Fr((function(t){var e=t.length,n=e>1?t[e-1]:void 0;return n="function"==typeof n?(t.pop(),n):void 0,$o(t,n)}));function ea(t){var e=Sn(t);return e.__chain__=!0,e}function na(t,e){return e(t)}var ra=zi((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return $n(e,t)};return!(e>1||this.__actions__.length)&&r instanceof jn&&ao(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:na,args:[i],thisArg:void 0}),new Ln(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(i)}));var ia=_i((function(t,e,n){At.call(t,n)?++t[n]:Yn(t,n,1)}));var oa=Ri(jo),aa=Ri(Co);function ua(t,e){return(Ca(t)?ue:tr)(t,Xi(e,3))}function ca(t,e){return(Ca(t)?ce:er)(t,Xi(e,3))}var sa=_i((function(t,e,n){At.call(t,n)?t[n].push(e):Yn(t,n,[e])}));var fa=Fr((function(t,e,n){var i=-1,o="function"==typeof e,a=Pa(t)?r(t.length):[];return tr(t,(function(t){a[++i]=o?oe(e,t,n):mr(t,e,n)})),a})),la=_i((function(t,e,n){Yn(t,n,e)}));function ha(t,e){return(Ca(t)?pe:Nr)(t,Xi(e,3))}var pa=_i((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var da=Fr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&uo(t,e[0],e[1])?e=[]:n>2&&uo(e[0],e[1],e[2])&&(e=[e[0]]),jr(t,or(e,1),[])})),va=Xe||function(){return Yt.Date.now()};function ya(t,e,n){return e=n?void 0:e,Di(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function ga(t,e){var n;if("function"!=typeof e)throw new mt(o);return t=ru(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=void 0),n}}var ma=Fr((function(t,e,n){var r=1;if(n.length){var i=Ge(n,qi(ma));r|=32}return Di(t,r,e,n,i)})),_a=Fr((function(t,e,n){var r=3;if(n.length){var i=Ge(n,qi(_a));r|=32}return Di(e,r,t,n,i)}));function Oa(t,e,n){var r,i,a,u,c,s,f=0,l=!1,h=!1,p=!0;if("function"!=typeof t)throw new mt(o);function d(e){var n=r,o=i;return r=i=void 0,f=e,u=t.apply(o,n)}function v(t){return f=t,c=Oo(g,e),l?d(t):u}function y(t){var n=t-s;return void 0===s||n>=e||n<0||h&&t-f>=a}function g(){var t=va();if(y(t))return m(t);c=Oo(g,function(t){var n=e-(t-s);return h?un(n,a-(t-f)):n}(t))}function m(t){return c=void 0,p&&r?d(t):(r=i=void 0,u)}function _(){var t=va(),n=y(t);if(r=arguments,i=this,s=t,n){if(void 0===c)return v(s);if(h)return fi(c),c=Oo(g,e),d(s)}return void 0===c&&(c=Oo(g,e)),u}return e=ou(e)||0,Ka(n)&&(l=!!n.leading,a=(h="maxWait"in n)?an(ou(n.maxWait)||0,e):a,p="trailing"in n?!!n.trailing:p),_.cancel=function(){void 0!==c&&fi(c),f=0,r=s=i=c=void 0},_.flush=function(){return void 0===c?u:m(va())},_}var Ea=Fr((function(t,e){return Jn(t,1,e)})),Ta=Fr((function(t,e,n){return Jn(t,ou(e)||0,n)}));function ba(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new mt(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(ba.Cache||Pn),n}function Aa(t){if("function"!=typeof t)throw new mt(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}ba.Cache=Pn;var Ia=ci((function(t,e){var n=(e=1==e.length&&Ca(e[0])?pe(e[0],xe(Xi())):pe(or(e,1),xe(Xi()))).length;return Fr((function(r){for(var i=-1,o=un(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return oe(t,this,r)}))})),Ra=Fr((function(t,e){return Di(t,32,void 0,e,Ge(e,qi(Ra)))})),Na=Fr((function(t,e){return Di(t,64,void 0,e,Ge(e,qi(Na)))})),Sa=zi((function(t,e){return Di(t,256,void 0,void 0,void 0,e)}));function ka(t,e){return t===e||t!=t&&e!=e}var xa=wi(dr),La=wi((function(t,e){return t>=e})),ja=_r(function(){return arguments}())?_r:function(t){return za(t)&&At.call(t,"callee")&&!$t.call(t,"callee")},Ca=r.isArray,wa=Qt?xe(Qt):function(t){return za(t)&&pr(t)==b};function Pa(t){return null!=t&&Ga(t.length)&&!Ba(t)}function Ma(t){return za(t)&&Pa(t)}var Ua=en||oc,Fa=te?xe(te):function(t){return za(t)&&pr(t)==l};function Da(t){if(!za(t))return!1;var e=pr(t);return e==h||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Ya(t)}function Ba(t){if(!Ka(t))return!1;var e=pr(t);return e==p||e==d||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Wa(t){return"number"==typeof t&&t==ru(t)}function Ga(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Ka(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function za(t){return null!=t&&"object"==typeof t}var Va=ee?xe(ee):function(t){return za(t)&&no(t)==v};function Ha(t){return"number"==typeof t||za(t)&&pr(t)==y}function Ya(t){if(!za(t)||pr(t)!=g)return!1;var e=Vt(t);if(null===e)return!0;var n=At.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&bt.call(n)==St}var $a=ne?xe(ne):function(t){return za(t)&&pr(t)==m};var qa=re?xe(re):function(t){return za(t)&&no(t)==_};function Xa(t){return"string"==typeof t||!Ca(t)&&za(t)&&pr(t)==O}function Za(t){return"symbol"==typeof t||za(t)&&pr(t)==E}var Ja=ie?xe(ie):function(t){return za(t)&&Ga(t.length)&&!!Bt[pr(t)]};var Qa=wi(Rr),tu=wi((function(t,e){return t<=e}));function eu(t){if(!t)return[];if(Pa(t))return Xa(t)?He(t):gi(t);if(Jt&&t[Jt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Jt]());var e=no(t);return(e==v?Be:e==_?Ke:ku)(t)}function nu(t){return t?(t=ou(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ru(t){var e=nu(t),n=e%1;return e==e?n?e-n:e:0}function iu(t){return t?qn(ru(t),0,4294967295):0}function ou(t){if("number"==typeof t)return t;if(Za(t))return NaN;if(Ka(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Ka(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace($,"");var n=ot.test(t);return n||ut.test(t)?zt(t.slice(2),n?2:8):it.test(t)?NaN:+t}function au(t){return mi(t,Eu(t))}function uu(t){return null==t?"":Zr(t)}var cu=Oi((function(t,e){if(lo(e)||Pa(e))mi(e,Ou(e),t);else for(var n in e)At.call(e,n)&&Kn(t,n,e[n])})),su=Oi((function(t,e){mi(e,Eu(e),t)})),fu=Oi((function(t,e,n,r){mi(e,Eu(e),t,r)})),lu=Oi((function(t,e,n,r){mi(e,Ou(e),t,r)})),hu=zi($n);var pu=Fr((function(t,e){t=vt(t);var n=-1,r=e.length,i=r>2?e[2]:void 0;for(i&&uo(e[0],e[1],i)&&(r=1);++n<r;)for(var o=e[n],a=Eu(o),u=-1,c=a.length;++u<c;){var s=a[u],f=t[s];(void 0===f||ka(f,Et[s])&&!At.call(t,s))&&(t[s]=o[s])}return t})),du=Fr((function(t){return t.push(void 0,Wi),oe(bu,void 0,t)}));function vu(t,e,n){var r=null==t?void 0:lr(t,e);return void 0===r?n:r}function yu(t,e){return null!=t&&ro(t,e,yr)}var gu=ki((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Nt.call(e)),t[e]=n}),Ku(Hu)),mu=ki((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Nt.call(e)),At.call(t,e)?t[e].push(n):t[e]=[n]}),Xi),_u=Fr(mr);function Ou(t){return Pa(t)?Fn(t):Ar(t)}function Eu(t){return Pa(t)?Fn(t,!0):Ir(t)}var Tu=Oi((function(t,e,n){xr(t,e,n)})),bu=Oi((function(t,e,n,r){xr(t,e,n,r)})),Au=zi((function(t,e){var n={};if(null==t)return n;var r=!1;e=pe(e,(function(e){return e=ui(e,t),r||(r=e.length>1),e})),mi(t,Hi(t),n),r&&(n=Xn(n,7,Gi));for(var i=e.length;i--;)Qr(n,e[i]);return n}));var Iu=zi((function(t,e){return null==t?{}:function(t,e){return Cr(t,e,(function(e,n){return yu(t,n)}))}(t,e)}));function Ru(t,e){if(null==t)return{};var n=pe(Hi(t),(function(t){return[t]}));return e=Xi(e),Cr(t,n,(function(t,n){return e(t,n[0])}))}var Nu=Fi(Ou),Su=Fi(Eu);function ku(t){return null==t?[]:Le(t,Ou(t))}var xu=Ai((function(t,e,n){return e=e.toLowerCase(),t+(n?Lu(e):e)}));function Lu(t){return Du(uu(t).toLowerCase())}function ju(t){return(t=uu(t))&&t.replace(st,Me).replace(Ct,"")}var Cu=Ai((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),wu=Ai((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Pu=bi("toLowerCase");var Mu=Ai((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Uu=Ai((function(t,e,n){return t+(n?" ":"")+Du(e)}));var Fu=Ai((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Du=bi("toUpperCase");function Bu(t,e,n){return t=uu(t),void 0===(e=n?void 0:e)?function(t){return Ut.test(t)}(t)?function(t){return t.match(Pt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Wu=Fr((function(t,e){try{return oe(t,void 0,e)}catch(t){return Da(t)?t:new ht(t)}})),Gu=zi((function(t,e){return ue(e,(function(e){e=Ro(e),Yn(t,e,ma(t[e],t))})),t}));function Ku(t){return function(){return t}}var zu=Ni(),Vu=Ni(!0);function Hu(t){return t}function Yu(t){return br("function"==typeof t?t:Xn(t,1))}var $u=Fr((function(t,e){return function(n){return mr(n,t,e)}})),qu=Fr((function(t,e){return function(n){return mr(t,n,e)}}));function Xu(t,e,n){var r=Ou(e),i=fr(e,r);null!=n||Ka(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=fr(e,Ou(e)));var o=!(Ka(n)&&"chain"in n&&!n.chain),a=Ba(t);return ue(i,(function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=gi(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,de([this.value()],arguments))})})),t}function Zu(){}var Ju=Li(pe),Qu=Li(se),tc=Li(ge);function ec(t){return co(t)?Ie(Ro(t)):function(t){return function(e){return lr(e,t)}}(t)}var nc=Ci(),rc=Ci(!0);function ic(){return[]}function oc(){return!1}var ac=xi((function(t,e){return t+e}),0),uc=Mi("ceil"),cc=xi((function(t,e){return t/e}),1),sc=Mi("floor");var fc,lc=xi((function(t,e){return t*e}),1),hc=Mi("round"),pc=xi((function(t,e){return t-e}),0);return Sn.after=function(t,e){if("function"!=typeof e)throw new mt(o);return t=ru(t),function(){if(--t<1)return e.apply(this,arguments)}},Sn.ary=ya,Sn.assign=cu,Sn.assignIn=su,Sn.assignInWith=fu,Sn.assignWith=lu,Sn.at=hu,Sn.before=ga,Sn.bind=ma,Sn.bindAll=Gu,Sn.bindKey=_a,Sn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ca(t)?t:[t]},Sn.chain=ea,Sn.chunk=function(t,e,n){e=(n?uo(t,e,n):void 0===e)?1:an(ru(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var o=0,a=0,u=r(Je(i/e));o<i;)u[a++]=Vr(t,o,o+=e);return u},Sn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},Sn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return de(Ca(n)?gi(n):[n],or(e,1))},Sn.cond=function(t){var e=null==t?0:t.length,n=Xi();return t=e?pe(t,(function(t){if("function"!=typeof t[1])throw new mt(o);return[n(t[0]),t[1]]})):[],Fr((function(n){for(var r=-1;++r<e;){var i=t[r];if(oe(i[0],this,n))return oe(i[1],this,n)}}))},Sn.conforms=function(t){return function(t){var e=Ou(t);return function(n){return Zn(n,t,e)}}(Xn(t,1))},Sn.constant=Ku,Sn.countBy=ia,Sn.create=function(t,e){var n=kn(t);return null==e?n:Hn(n,e)},Sn.curry=function t(e,n,r){var i=Di(e,8,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return i.placeholder=t.placeholder,i},Sn.curryRight=function t(e,n,r){var i=Di(e,16,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return i.placeholder=t.placeholder,i},Sn.debounce=Oa,Sn.defaults=pu,Sn.defaultsDeep=du,Sn.defer=Ea,Sn.delay=Ta,Sn.difference=ko,Sn.differenceBy=xo,Sn.differenceWith=Lo,Sn.drop=function(t,e,n){var r=null==t?0:t.length;return r?Vr(t,(e=n||void 0===e?1:ru(e))<0?0:e,r):[]},Sn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Vr(t,0,(e=r-(e=n||void 0===e?1:ru(e)))<0?0:e):[]},Sn.dropRightWhile=function(t,e){return t&&t.length?ei(t,Xi(e,3),!0,!0):[]},Sn.dropWhile=function(t,e){return t&&t.length?ei(t,Xi(e,3),!0):[]},Sn.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&uo(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=ru(n))<0&&(n=-n>i?0:i+n),(r=void 0===r||r>i?i:ru(r))<0&&(r+=i),r=n>r?0:iu(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Sn.filter=function(t,e){return(Ca(t)?fe:ir)(t,Xi(e,3))},Sn.flatMap=function(t,e){return or(ha(t,e),1)},Sn.flatMapDeep=function(t,e){return or(ha(t,e),1/0)},Sn.flatMapDepth=function(t,e,n){return n=void 0===n?1:ru(n),or(ha(t,e),n)},Sn.flatten=wo,Sn.flattenDeep=function(t){return(null==t?0:t.length)?or(t,1/0):[]},Sn.flattenDepth=function(t,e){return(null==t?0:t.length)?or(t,e=void 0===e?1:ru(e)):[]},Sn.flip=function(t){return Di(t,512)},Sn.flow=zu,Sn.flowRight=Vu,Sn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},Sn.functions=function(t){return null==t?[]:fr(t,Ou(t))},Sn.functionsIn=function(t){return null==t?[]:fr(t,Eu(t))},Sn.groupBy=sa,Sn.initial=function(t){return(null==t?0:t.length)?Vr(t,0,-1):[]},Sn.intersection=Mo,Sn.intersectionBy=Uo,Sn.intersectionWith=Fo,Sn.invert=gu,Sn.invertBy=mu,Sn.invokeMap=fa,Sn.iteratee=Yu,Sn.keyBy=la,Sn.keys=Ou,Sn.keysIn=Eu,Sn.map=ha,Sn.mapKeys=function(t,e){var n={};return e=Xi(e,3),cr(t,(function(t,r,i){Yn(n,e(t,r,i),t)})),n},Sn.mapValues=function(t,e){var n={};return e=Xi(e,3),cr(t,(function(t,r,i){Yn(n,r,e(t,r,i))})),n},Sn.matches=function(t){return Sr(Xn(t,1))},Sn.matchesProperty=function(t,e){return kr(t,Xn(e,1))},Sn.memoize=ba,Sn.merge=Tu,Sn.mergeWith=bu,Sn.method=$u,Sn.methodOf=qu,Sn.mixin=Xu,Sn.negate=Aa,Sn.nthArg=function(t){return t=ru(t),Fr((function(e){return Lr(e,t)}))},Sn.omit=Au,Sn.omitBy=function(t,e){return Ru(t,Aa(Xi(e)))},Sn.once=function(t){return ga(2,t)},Sn.orderBy=function(t,e,n,r){return null==t?[]:(Ca(e)||(e=null==e?[]:[e]),Ca(n=r?void 0:n)||(n=null==n?[]:[n]),jr(t,e,n))},Sn.over=Ju,Sn.overArgs=Ia,Sn.overEvery=Qu,Sn.overSome=tc,Sn.partial=Ra,Sn.partialRight=Na,Sn.partition=pa,Sn.pick=Iu,Sn.pickBy=Ru,Sn.property=ec,Sn.propertyOf=function(t){return function(e){return null==t?void 0:lr(t,e)}},Sn.pull=Bo,Sn.pullAll=Wo,Sn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?wr(t,e,Xi(n,2)):t},Sn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?wr(t,e,void 0,n):t},Sn.pullAt=Go,Sn.range=nc,Sn.rangeRight=rc,Sn.rearg=Sa,Sn.reject=function(t,e){return(Ca(t)?fe:ir)(t,Aa(Xi(e,3)))},Sn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=Xi(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return Pr(t,i),n},Sn.rest=function(t,e){if("function"!=typeof t)throw new mt(o);return Fr(t,e=void 0===e?e:ru(e))},Sn.reverse=Ko,Sn.sampleSize=function(t,e,n){return e=(n?uo(t,e,n):void 0===e)?1:ru(e),(Ca(t)?Bn:Br)(t,e)},Sn.set=function(t,e,n){return null==t?t:Wr(t,e,n)},Sn.setWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:Wr(t,e,n,r)},Sn.shuffle=function(t){return(Ca(t)?Wn:zr)(t)},Sn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&uo(t,e,n)?(e=0,n=r):(e=null==e?0:ru(e),n=void 0===n?r:ru(n)),Vr(t,e,n)):[]},Sn.sortBy=da,Sn.sortedUniq=function(t){return t&&t.length?qr(t):[]},Sn.sortedUniqBy=function(t,e){return t&&t.length?qr(t,Xi(e,2)):[]},Sn.split=function(t,e,n){return n&&"number"!=typeof n&&uo(t,e,n)&&(e=n=void 0),(n=void 0===n?4294967295:n>>>0)?(t=uu(t))&&("string"==typeof e||null!=e&&!$a(e))&&!(e=Zr(e))&&De(t)?si(He(t),0,n):t.split(e,n):[]},Sn.spread=function(t,e){if("function"!=typeof t)throw new mt(o);return e=null==e?0:an(ru(e),0),Fr((function(n){var r=n[e],i=si(n,0,e);return r&&de(i,r),oe(t,this,i)}))},Sn.tail=function(t){var e=null==t?0:t.length;return e?Vr(t,1,e):[]},Sn.take=function(t,e,n){return t&&t.length?Vr(t,0,(e=n||void 0===e?1:ru(e))<0?0:e):[]},Sn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Vr(t,(e=r-(e=n||void 0===e?1:ru(e)))<0?0:e,r):[]},Sn.takeRightWhile=function(t,e){return t&&t.length?ei(t,Xi(e,3),!1,!0):[]},Sn.takeWhile=function(t,e){return t&&t.length?ei(t,Xi(e,3)):[]},Sn.tap=function(t,e){return e(t),t},Sn.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new mt(o);return Ka(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Oa(t,e,{leading:r,maxWait:e,trailing:i})},Sn.thru=na,Sn.toArray=eu,Sn.toPairs=Nu,Sn.toPairsIn=Su,Sn.toPath=function(t){return Ca(t)?pe(t,Ro):Za(t)?[t]:gi(Io(uu(t)))},Sn.toPlainObject=au,Sn.transform=function(t,e,n){var r=Ca(t),i=r||Ua(t)||Ja(t);if(e=Xi(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Ka(t)&&Ba(o)?kn(Vt(t)):{}}return(i?ue:cr)(t,(function(t,r,i){return e(n,t,r,i)})),n},Sn.unary=function(t){return ya(t,1)},Sn.union=zo,Sn.unionBy=Vo,Sn.unionWith=Ho,Sn.uniq=function(t){return t&&t.length?Jr(t):[]},Sn.uniqBy=function(t,e){return t&&t.length?Jr(t,Xi(e,2)):[]},Sn.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?Jr(t,void 0,e):[]},Sn.unset=function(t,e){return null==t||Qr(t,e)},Sn.unzip=Yo,Sn.unzipWith=$o,Sn.update=function(t,e,n){return null==t?t:ti(t,e,ai(n))},Sn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:ti(t,e,ai(n),r)},Sn.values=ku,Sn.valuesIn=function(t){return null==t?[]:Le(t,Eu(t))},Sn.without=qo,Sn.words=Bu,Sn.wrap=function(t,e){return Ra(ai(e),t)},Sn.xor=Xo,Sn.xorBy=Zo,Sn.xorWith=Jo,Sn.zip=Qo,Sn.zipObject=function(t,e){return ii(t||[],e||[],Kn)},Sn.zipObjectDeep=function(t,e){return ii(t||[],e||[],Wr)},Sn.zipWith=ta,Sn.entries=Nu,Sn.entriesIn=Su,Sn.extend=su,Sn.extendWith=fu,Xu(Sn,Sn),Sn.add=ac,Sn.attempt=Wu,Sn.camelCase=xu,Sn.capitalize=Lu,Sn.ceil=uc,Sn.clamp=function(t,e,n){return void 0===n&&(n=e,e=void 0),void 0!==n&&(n=(n=ou(n))==n?n:0),void 0!==e&&(e=(e=ou(e))==e?e:0),qn(ou(t),e,n)},Sn.clone=function(t){return Xn(t,4)},Sn.cloneDeep=function(t){return Xn(t,5)},Sn.cloneDeepWith=function(t,e){return Xn(t,5,e="function"==typeof e?e:void 0)},Sn.cloneWith=function(t,e){return Xn(t,4,e="function"==typeof e?e:void 0)},Sn.conformsTo=function(t,e){return null==e||Zn(t,e,Ou(e))},Sn.deburr=ju,Sn.defaultTo=function(t,e){return null==t||t!=t?e:t},Sn.divide=cc,Sn.endsWith=function(t,e,n){t=uu(t),e=Zr(e);var r=t.length,i=n=void 0===n?r:qn(ru(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},Sn.eq=ka,Sn.escape=function(t){return(t=uu(t))&&D.test(t)?t.replace(U,Ue):t},Sn.escapeRegExp=function(t){return(t=uu(t))&&Y.test(t)?t.replace(H,"\\$&"):t},Sn.every=function(t,e,n){var r=Ca(t)?se:nr;return n&&uo(t,e,n)&&(e=void 0),r(t,Xi(e,3))},Sn.find=oa,Sn.findIndex=jo,Sn.findKey=function(t,e){return _e(t,Xi(e,3),cr)},Sn.findLast=aa,Sn.findLastIndex=Co,Sn.findLastKey=function(t,e){return _e(t,Xi(e,3),sr)},Sn.floor=sc,Sn.forEach=ua,Sn.forEachRight=ca,Sn.forIn=function(t,e){return null==t?t:ar(t,Xi(e,3),Eu)},Sn.forInRight=function(t,e){return null==t?t:ur(t,Xi(e,3),Eu)},Sn.forOwn=function(t,e){return t&&cr(t,Xi(e,3))},Sn.forOwnRight=function(t,e){return t&&sr(t,Xi(e,3))},Sn.get=vu,Sn.gt=xa,Sn.gte=La,Sn.has=function(t,e){return null!=t&&ro(t,e,vr)},Sn.hasIn=yu,Sn.head=Po,Sn.identity=Hu,Sn.includes=function(t,e,n,r){t=Pa(t)?t:ku(t),n=n&&!r?ru(n):0;var i=t.length;return n<0&&(n=an(i+n,0)),Xa(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&Ee(t,e,n)>-1},Sn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ru(n);return i<0&&(i=an(r+i,0)),Ee(t,e,i)},Sn.inRange=function(t,e,n){return e=nu(e),void 0===n?(n=e,e=0):n=nu(n),function(t,e,n){return t>=un(e,n)&&t<an(e,n)}(t=ou(t),e,n)},Sn.invoke=_u,Sn.isArguments=ja,Sn.isArray=Ca,Sn.isArrayBuffer=wa,Sn.isArrayLike=Pa,Sn.isArrayLikeObject=Ma,Sn.isBoolean=function(t){return!0===t||!1===t||za(t)&&pr(t)==f},Sn.isBuffer=Ua,Sn.isDate=Fa,Sn.isElement=function(t){return za(t)&&1===t.nodeType&&!Ya(t)},Sn.isEmpty=function(t){if(null==t)return!0;if(Pa(t)&&(Ca(t)||"string"==typeof t||"function"==typeof t.splice||Ua(t)||Ja(t)||ja(t)))return!t.length;var e=no(t);if(e==v||e==_)return!t.size;if(lo(t))return!Ar(t).length;for(var n in t)if(At.call(t,n))return!1;return!0},Sn.isEqual=function(t,e){return Or(t,e)},Sn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:void 0)?n(t,e):void 0;return void 0===r?Or(t,e,void 0,n):!!r},Sn.isError=Da,Sn.isFinite=function(t){return"number"==typeof t&&nn(t)},Sn.isFunction=Ba,Sn.isInteger=Wa,Sn.isLength=Ga,Sn.isMap=Va,Sn.isMatch=function(t,e){return t===e||Er(t,e,Ji(e))},Sn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:void 0,Er(t,e,Ji(e),n)},Sn.isNaN=function(t){return Ha(t)&&t!=+t},Sn.isNative=function(t){if(fo(t))throw new ht("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Tr(t)},Sn.isNil=function(t){return null==t},Sn.isNull=function(t){return null===t},Sn.isNumber=Ha,Sn.isObject=Ka,Sn.isObjectLike=za,Sn.isPlainObject=Ya,Sn.isRegExp=$a,Sn.isSafeInteger=function(t){return Wa(t)&&t>=-9007199254740991&&t<=9007199254740991},Sn.isSet=qa,Sn.isString=Xa,Sn.isSymbol=Za,Sn.isTypedArray=Ja,Sn.isUndefined=function(t){return void 0===t},Sn.isWeakMap=function(t){return za(t)&&no(t)==T},Sn.isWeakSet=function(t){return za(t)&&"[object WeakSet]"==pr(t)},Sn.join=function(t,e){return null==t?"":rn.call(t,e)},Sn.kebabCase=Cu,Sn.last=Do,Sn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return void 0!==n&&(i=(i=ru(n))<0?an(r+i,0):un(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):Oe(t,be,i,!0)},Sn.lowerCase=wu,Sn.lowerFirst=Pu,Sn.lt=Qa,Sn.lte=tu,Sn.max=function(t){return t&&t.length?rr(t,Hu,dr):void 0},Sn.maxBy=function(t,e){return t&&t.length?rr(t,Xi(e,2),dr):void 0},Sn.mean=function(t){return Ae(t,Hu)},Sn.meanBy=function(t,e){return Ae(t,Xi(e,2))},Sn.min=function(t){return t&&t.length?rr(t,Hu,Rr):void 0},Sn.minBy=function(t,e){return t&&t.length?rr(t,Xi(e,2),Rr):void 0},Sn.stubArray=ic,Sn.stubFalse=oc,Sn.stubObject=function(){return{}},Sn.stubString=function(){return""},Sn.stubTrue=function(){return!0},Sn.multiply=lc,Sn.nth=function(t,e){return t&&t.length?Lr(t,ru(e)):void 0},Sn.noConflict=function(){return Yt._===this&&(Yt._=kt),this},Sn.noop=Zu,Sn.now=va,Sn.pad=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ve(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return ji(Qe(i),n)+t+ji(Je(i),n)},Sn.padEnd=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ve(t):0;return e&&r<e?t+ji(e-r,n):t},Sn.padStart=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ve(t):0;return e&&r<e?ji(e-r,n)+t:t},Sn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),sn(uu(t).replace(q,""),e||0)},Sn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&uo(t,e,n)&&(e=n=void 0),void 0===n&&("boolean"==typeof e?(n=e,e=void 0):"boolean"==typeof t&&(n=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=nu(t),void 0===e?(e=t,t=0):e=nu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=fn();return un(t+i*(e-t+Kt("1e-"+((i+"").length-1))),e)}return Mr(t,e)},Sn.reduce=function(t,e,n){var r=Ca(t)?ve:Ne,i=arguments.length<3;return r(t,Xi(e,4),n,i,tr)},Sn.reduceRight=function(t,e,n){var r=Ca(t)?ye:Ne,i=arguments.length<3;return r(t,Xi(e,4),n,i,er)},Sn.repeat=function(t,e,n){return e=(n?uo(t,e,n):void 0===e)?1:ru(e),Ur(uu(t),e)},Sn.replace=function(){var t=arguments,e=uu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Sn.result=function(t,e,n){var r=-1,i=(e=ui(e,t)).length;for(i||(i=1,t=void 0);++r<i;){var o=null==t?void 0:t[Ro(e[r])];void 0===o&&(r=i,o=n),t=Ba(o)?o.call(t):o}return t},Sn.round=hc,Sn.runInContext=t,Sn.sample=function(t){return(Ca(t)?Dn:Dr)(t)},Sn.size=function(t){if(null==t)return 0;if(Pa(t))return Xa(t)?Ve(t):t.length;var e=no(t);return e==v||e==_?t.size:Ar(t).length},Sn.snakeCase=Mu,Sn.some=function(t,e,n){var r=Ca(t)?ge:Hr;return n&&uo(t,e,n)&&(e=void 0),r(t,Xi(e,3))},Sn.sortedIndex=function(t,e){return Yr(t,e)},Sn.sortedIndexBy=function(t,e,n){return $r(t,e,Xi(n,2))},Sn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Yr(t,e);if(r<n&&ka(t[r],e))return r}return-1},Sn.sortedLastIndex=function(t,e){return Yr(t,e,!0)},Sn.sortedLastIndexBy=function(t,e,n){return $r(t,e,Xi(n,2),!0)},Sn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=Yr(t,e,!0)-1;if(ka(t[n],e))return n}return-1},Sn.startCase=Uu,Sn.startsWith=function(t,e,n){return t=uu(t),n=null==n?0:qn(ru(n),0,t.length),e=Zr(e),t.slice(n,n+e.length)==e},Sn.subtract=pc,Sn.sum=function(t){return t&&t.length?Se(t,Hu):0},Sn.sumBy=function(t,e){return t&&t.length?Se(t,Xi(e,2)):0},Sn.template=function(t,e,n){var r=Sn.templateSettings;n&&uo(t,e,n)&&(e=void 0),t=uu(t),e=fu({},e,r,Bi);var i,o,a=fu({},e.imports,r.imports,Bi),u=Ou(a),c=Le(a,u),s=0,f=e.interpolate||ft,l="__p += '",h=yt((e.escape||ft).source+"|"+f.source+"|"+(f===G?nt:ft).source+"|"+(e.evaluate||ft).source+"|$","g"),p="//# sourceURL="+(At.call(e,"sourceURL")?(e.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Dt+"]")+"\n";t.replace(h,(function(e,n,r,a,u,c){return r||(r=a),l+=t.slice(s,c).replace(lt,Fe),n&&(i=!0,l+="' +\n__e("+n+") +\n'"),u&&(o=!0,l+="';\n"+u+";\n__p += '"),r&&(l+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=c+e.length,e})),l+="';\n";var d=At.call(e,"variable")&&e.variable;d||(l="with (obj) {\n"+l+"\n}\n"),l=(o?l.replace(C,""):l).replace(w,"$1").replace(P,"$1;"),l="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var v=Wu((function(){return pt(u,p+"return "+l).apply(void 0,c)}));if(v.source=l,Da(v))throw v;return v},Sn.times=function(t,e){if((t=ru(t))<1||t>9007199254740991)return[];var n=4294967295,r=un(t,4294967295);t-=4294967295;for(var i=ke(r,e=Xi(e));++n<t;)e(n);return i},Sn.toFinite=nu,Sn.toInteger=ru,Sn.toLength=iu,Sn.toLower=function(t){return uu(t).toLowerCase()},Sn.toNumber=ou,Sn.toSafeInteger=function(t){return t?qn(ru(t),-9007199254740991,9007199254740991):0===t?t:0},Sn.toString=uu,Sn.toUpper=function(t){return uu(t).toUpperCase()},Sn.trim=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace($,"");if(!t||!(e=Zr(e)))return t;var r=He(t),i=He(e);return si(r,Ce(r,i),we(r,i)+1).join("")},Sn.trimEnd=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace(X,"");if(!t||!(e=Zr(e)))return t;var r=He(t);return si(r,0,we(r,He(e))+1).join("")},Sn.trimStart=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace(q,"");if(!t||!(e=Zr(e)))return t;var r=He(t);return si(r,Ce(r,He(e))).join("")},Sn.truncate=function(t,e){var n=30,r="...";if(Ka(e)){var i="separator"in e?e.separator:i;n="length"in e?ru(e.length):n,r="omission"in e?Zr(e.omission):r}var o=(t=uu(t)).length;if(De(t)){var a=He(t);o=a.length}if(n>=o)return t;var u=n-Ve(r);if(u<1)return r;var c=a?si(a,0,u).join(""):t.slice(0,u);if(void 0===i)return c+r;if(a&&(u+=c.length-u),$a(i)){if(t.slice(u).search(i)){var s,f=c;for(i.global||(i=yt(i.source,uu(rt.exec(i))+"g")),i.lastIndex=0;s=i.exec(f);)var l=s.index;c=c.slice(0,void 0===l?u:l)}}else if(t.indexOf(Zr(i),u)!=u){var h=c.lastIndexOf(i);h>-1&&(c=c.slice(0,h))}return c+r},Sn.unescape=function(t){return(t=uu(t))&&F.test(t)?t.replace(M,Ye):t},Sn.uniqueId=function(t){var e=++It;return uu(t)+e},Sn.upperCase=Fu,Sn.upperFirst=Du,Sn.each=ua,Sn.eachRight=ca,Sn.first=Po,Xu(Sn,(fc={},cr(Sn,(function(t,e){At.call(Sn.prototype,e)||(fc[e]=t)})),fc),{chain:!1}),Sn.VERSION="4.17.15",ue(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Sn[t].placeholder=Sn})),ue(["drop","take"],(function(t,e){jn.prototype[t]=function(n){n=void 0===n?1:an(ru(n),0);var r=this.__filtered__&&!e?new jn(this):this.clone();return r.__filtered__?r.__takeCount__=un(n,r.__takeCount__):r.__views__.push({size:un(n,4294967295),type:t+(r.__dir__<0?"Right":"")}),r},jn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),ue(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;jn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Xi(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),ue(["head","last"],(function(t,e){var n="take"+(e?"Right":"");jn.prototype[t]=function(){return this[n](1).value()[0]}})),ue(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");jn.prototype[t]=function(){return this.__filtered__?new jn(this):this[n](1)}})),jn.prototype.compact=function(){return this.filter(Hu)},jn.prototype.find=function(t){return this.filter(t).head()},jn.prototype.findLast=function(t){return this.reverse().find(t)},jn.prototype.invokeMap=Fr((function(t,e){return"function"==typeof t?new jn(this):this.map((function(n){return mr(n,t,e)}))})),jn.prototype.reject=function(t){return this.filter(Aa(Xi(t)))},jn.prototype.slice=function(t,e){t=ru(t);var n=this;return n.__filtered__&&(t>0||e<0)?new jn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),void 0!==e&&(n=(e=ru(e))<0?n.dropRight(-e):n.take(e-t)),n)},jn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},jn.prototype.toArray=function(){return this.take(4294967295)},cr(jn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=Sn[r?"take"+("last"==e?"Right":""):e],o=r||/^find/.test(e);i&&(Sn.prototype[e]=function(){var e=this.__wrapped__,a=r?[1]:arguments,u=e instanceof jn,c=a[0],s=u||Ca(e),f=function(t){var e=i.apply(Sn,de([t],a));return r&&l?e[0]:e};s&&n&&"function"==typeof c&&1!=c.length&&(u=s=!1);var l=this.__chain__,h=!!this.__actions__.length,p=o&&!l,d=u&&!h;if(!o&&s){e=d?e:new jn(this);var v=t.apply(e,a);return v.__actions__.push({func:na,args:[f],thisArg:void 0}),new Ln(v,l)}return p&&d?t.apply(this,a):(v=this.thru(f),p?r?v.value()[0]:v.value():v)})})),ue(["pop","push","shift","sort","splice","unshift"],(function(t){var e=_t[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Sn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(Ca(i)?i:[],t)}return this[n]((function(n){return e.apply(Ca(n)?n:[],t)}))}})),cr(jn.prototype,(function(t,e){var n=Sn[e];if(n){var r=n.name+"";At.call(_n,r)||(_n[r]=[]),_n[r].push({name:e,func:n})}})),_n[Si(void 0,2).name]=[{name:"wrapper",func:void 0}],jn.prototype.clone=function(){var t=new jn(this.__wrapped__);return t.__actions__=gi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=gi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=gi(this.__views__),t},jn.prototype.reverse=function(){if(this.__filtered__){var t=new jn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},jn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Ca(t),r=e<0,i=n?t.length:0,o=function(t,e,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=un(e,t+a);break;case"takeRight":t=an(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,u=o.end,c=u-a,s=r?u:a-1,f=this.__iteratees__,l=f.length,h=0,p=un(c,this.__takeCount__);if(!n||!r&&i==c&&p==c)return ni(t,this.__actions__);var d=[];t:for(;c--&&h<p;){for(var v=-1,y=t[s+=e];++v<l;){var g=f[v],m=g.iteratee,_=g.type,O=m(y);if(2==_)y=O;else if(!O){if(1==_)continue t;break t}}d[h++]=y}return d},Sn.prototype.at=ra,Sn.prototype.chain=function(){return ea(this)},Sn.prototype.commit=function(){return new Ln(this.value(),this.__chain__)},Sn.prototype.next=function(){void 0===this.__values__&&(this.__values__=eu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Sn.prototype.plant=function(t){for(var e,n=this;n instanceof xn;){var r=So(n);r.__index__=0,r.__values__=void 0,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},Sn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof jn){var e=t;return this.__actions__.length&&(e=new jn(this)),(e=e.reverse()).__actions__.push({func:na,args:[Ko],thisArg:void 0}),new Ln(e,this.__chain__)}return this.thru(Ko)},Sn.prototype.toJSON=Sn.prototype.valueOf=Sn.prototype.value=function(){return ni(this.__wrapped__,this.__actions__)},Sn.prototype.first=Sn.prototype.head,Jt&&(Sn.prototype[Jt]=function(){return this}),Sn}();Yt._=$e,void 0===(i=function(){return $e}.call(e,n,e,r))||(r.exports=i)}).call(this)}).call(this,n(8),n(9)(t))},function(t,e,n){var r=n(5),i=n(6);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);t.exports=i.locals||{}},function(t,e,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function u(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],i=0;i<t.length;i++){var o=t[i],c=e.base?o[0]+e.base:o[0],s=n[c]||0,f="".concat(c," ").concat(s);n[c]=s+1;var l=u(f),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==l?(a[l].references++,a[l].updater(h)):a.push({identifier:f,updater:y(h,e),references:1}),r.push(f)}return r}function s(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var f,l=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function h(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function p(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,v=0;function y(t,e){var n,r,i;if(e.singleton){var o=v++;n=d||(d=s(e)),r=h.bind(null,n,o,!1),i=h.bind(null,n,o,!0)}else n=s(e),r=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=u(n[r]);a[i].references--}for(var o=c(t,e),s=0;s<n.length;s++){var f=u(n[s]);0===a[f].references&&(a[f].updater(),a.splice(f,1))}n=o}}}},function(t,e,n){(e=n(7)(!1)).push([t.i,"body {\n  color: darkslategrey;\n  background-color: lightblue;\n}\n\n.code {\n  white-space: pre;\n}\n\n.result {\n  color: darkslategrey;\n  background-color: lightgreen;\n}\n\n.error {\n  color: red;\n  background-color: lightpink;\n}\n",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(c," */")),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(o).concat([i]).join("\n")}var a,u,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";n.r(e);n(4);var r=n(3),i=n.n(r),o=n(2);const a=o.Lexer,u=o.createToken,c=u({name:"WhiteSpace",pattern:/\s+/,group:o.Lexer.SKIPPED}),s=u({name:"Var",pattern:/var/}),f=u({name:"Print",pattern:/print/}),l=new a([c,s,u({name:"Println",pattern:/println/}),f,u({name:"Identifier",pattern:/[a-zA-Z]\w*/}),u({name:"Literal",pattern:/"(:?[^\\"]+|\\(:?[bfnrtv"\\/]|u[0-9a-fA-F]{4}))*"/}),u({name:"Integer",pattern:/0|[1-9]\d*/}),u({name:"ParenthesesOpen",pattern:/\(/}),u({name:"ParenthesesClose",pattern:/\)/}),u({name:"BlockOpen",pattern:/{/}),u({name:"BlockClose",pattern:/}/}),u({name:"Comma",pattern:/,/}),u({name:"SemiColon",pattern:/;/}),u({name:"Equals",pattern:/=/}),u({name:"Plus",pattern:/\+/}),u({name:"Minus",pattern:/-/}),u({name:"Div",pattern:/\//}),u({name:"Mult",pattern:/\*/})]);var h;h='\n  test() {\n    var a, b, c;\n    println "Some expressions";\n    a = -40 / (-2 * 5);\n    print "a = ", a, "   -1/a = ", -1 / a;\n    println "   2*a = ", 2 * a;\n    println "a = 2; b = 3; c = 5;";\n    a = 2; b = 3; c = 5;\n    print "b*8-(c-b)*7-(a*c-b)/(c/(a+b)) = ";\n    print  b * 8 - (c - b) * 7 - (a * c - b) / (c / (a + b));\n  }\n',document.body.appendChild(function(t){const e=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div");n.innerHTML=t,n.classList.add("code");const o=l.tokenize(t);return r.classList.add("code"),o.errors.length>0?(r.classList.add("error"),r.innerHTML=i.a.chain(o.errors).map(t=>t.message).join("\n")):(r.classList.add("result"),r.innerHTML=i.a.chain(o.tokens).map(t=>`${t.tokenType.name} ${t.image}`).join("\n")),e.appendChild(n),e.appendChild(document.createElement("hr")),e.appendChild(r),e}(h))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,